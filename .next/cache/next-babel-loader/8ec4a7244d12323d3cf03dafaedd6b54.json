{"ast":null,"code":"// third-party\nimport thunk from 'redux-thunk';\nimport { applyMiddleware, createStore } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper'; // application\n\nimport rootReducer from '~/store/root/rootReducer';\nimport version from '~/store/version';\nconst STORAGE_KEY = 'red-parts/react';\nexport const save = state => {\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  }\n};\nexport const load = () => {\n  if (!false) {\n    return undefined;\n  }\n\n  let state;\n\n  try {\n    state = localStorage.getItem(STORAGE_KEY);\n\n    if (typeof state === 'string') {\n      state = JSON.parse(state);\n    }\n\n    if (state && state.version !== version) {\n      state = undefined;\n    }\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  }\n\n  return state || undefined;\n};\n\nconst bindMiddleware = (...middleware) => {\n  if (true) {\n    // eslint-disable-next-line global-require\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst makeStore = () => createStore(rootReducer, bindMiddleware(thunk));\n\nexport const wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/store/store.ts"],"names":["thunk","applyMiddleware","createStore","createWrapper","rootReducer","version","STORAGE_KEY","save","state","localStorage","setItem","JSON","stringify","error","console","load","undefined","getItem","parse","bindMiddleware","middleware","composeWithDevTools","require","makeStore","wrapper"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAAyD,OAAzD;AACA,SAASC,aAAT,QAAyC,oBAAzC,C,CACA;;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AAIA,MAAMC,WAAW,GAAG,iBAApB;AAEA,OAAO,MAAMC,IAAI,GAAIC,KAAD,IAAgB;AAChC,MAAI;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqBJ,WAArB,EAAkCK,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAlC;AACH,GAFD,CAEE,OAAOK,KAAP,EAAc;AACZ;AACAC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACJ,CAPM;AASP,OAAO,MAAME,IAAI,GAAG,MAAM;AACtB,MAAI,MAAJ,EAAsB;AAClB,WAAOC,SAAP;AACH;;AAED,MAAIR,KAAJ;;AAEA,MAAI;AACAA,IAAAA,KAAK,GAAGC,YAAY,CAACQ,OAAb,CAAqBX,WAArB,CAAR;;AAEA,QAAI,OAAOE,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,MAAAA,KAAK,GAAGG,IAAI,CAACO,KAAL,CAAWV,KAAX,CAAR;AACH;;AAED,QAAIA,KAAK,IAAIA,KAAK,CAACH,OAAN,KAAkBA,OAA/B,EAAwC;AACpCG,MAAAA,KAAK,GAAGQ,SAAR;AACH;AACJ,GAVD,CAUE,OAAOH,KAAP,EAAc;AACZ;AACAC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;;AAED,SAAOL,KAAK,IAAIQ,SAAhB;AACH,CAvBM;;AAyBP,MAAMG,cAAc,GAAG,CAAC,GAAGC,UAAJ,KAAiC;AACpD,YAA2C;AACvC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AAEA,WAAOD,mBAAmB,CAACpB,eAAe,CAAC,GAAGmB,UAAJ,CAAhB,CAA1B;AACH;;AAED,SAAOnB,eAAe,CAAC,GAAGmB,UAAJ,CAAtB;AACH,CATD;;AAWA,MAAMG,SAAgC,GAAG,MACrCrB,WAAW,CAACE,WAAD,EAAce,cAAc,CAACnB,KAAD,CAA5B,CADf;;AAIA,OAAO,MAAMwB,OAAO,GAAGrB,aAAa,CAAaoB,SAAb,CAA7B","sourcesContent":["// third-party\nimport thunk from 'redux-thunk';\nimport { applyMiddleware, createStore, Middleware } from 'redux';\nimport { createWrapper, MakeStore } from 'next-redux-wrapper';\n// application\nimport rootReducer from '~/store/root/rootReducer';\nimport version from '~/store/version';\nimport { FirstArgType } from '~/store/types';\nimport { IRootState } from '~/store/root/rootTypes';\n\nconst STORAGE_KEY = 'red-parts/react';\n\nexport const save = (state: any) => {\n    try {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n    }\n};\n\nexport const load = () => {\n    if (!process.browser) {\n        return undefined;\n    }\n\n    let state;\n\n    try {\n        state = localStorage.getItem(STORAGE_KEY);\n\n        if (typeof state === 'string') {\n            state = JSON.parse(state);\n        }\n\n        if (state && state.version !== version) {\n            state = undefined;\n        }\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n    }\n\n    return state || undefined;\n};\n\nconst bindMiddleware = (...middleware: Middleware[]) => {\n    if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line global-require\n        const { composeWithDevTools } = require('redux-devtools-extension');\n\n        return composeWithDevTools(applyMiddleware(...middleware));\n    }\n\n    return applyMiddleware(...middleware);\n};\n\nconst makeStore: MakeStore<IRootState> = () => (\n    createStore(rootReducer, bindMiddleware(thunk))\n);\n\nexport const wrapper = createWrapper<IRootState>(makeStore);\n\nexport type GetServerSidePropsContext = FirstArgType<FirstArgType<typeof wrapper.getServerSideProps>>\n"]},"metadata":{},"sourceType":"module"}