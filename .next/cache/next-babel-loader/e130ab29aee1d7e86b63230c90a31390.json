{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shbaita Studio\\\\Documents\\\\project\\\\new1\\\\themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template\\\\Sources\\\\src\\\\components\\\\shop\\\\ReviewsView.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport React, { useEffect, useRef, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { useForm } from 'react-hook-form'; // application\n\nimport ReviewsList from '~/components/shop/ReviewsList';\nimport { shopApi } from '~/api';\nimport { useAsyncAction, useIsUnmountedRef } from '~/store/hooks';\nimport { validateEmail } from '~/services/validators';\n\nfunction ReviewsView(props) {\n  var _errors$rating, _errors$author, _errors$email, _errors$email2, _errors$content;\n\n  const intl = useIntl();\n  const {\n    productId,\n    productPageLayout\n  } = props;\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const listMetaRef = useRef(null);\n  const {\n    0: list,\n    1: setList\n  } = useState(null);\n  const formMethods = useForm();\n  const {\n    handleSubmit,\n    register,\n    errors,\n    reset\n  } = formMethods;\n  const isUnmountedRef = useIsUnmountedRef();\n\n  const load = async (productId, page, canceledRef) => {\n    await shopApi.getProductReviews(productId, {\n      limit: 8,\n      page\n    }).then(result => {\n      if (isUnmountedRef.current || (canceledRef === null || canceledRef === void 0 ? void 0 : canceledRef.current)) {\n        return;\n      }\n\n      listMetaRef.current = {\n        productId,\n        page\n      };\n      setList(result);\n      setPage(result.page);\n    });\n  };\n\n  useEffect(() => {\n    var _listMetaRef$current, _listMetaRef$current2;\n\n    const canceledRef = {\n      current: false\n    };\n\n    if (productId !== ((_listMetaRef$current = listMetaRef.current) === null || _listMetaRef$current === void 0 ? void 0 : _listMetaRef$current.productId) || page !== ((_listMetaRef$current2 = listMetaRef.current) === null || _listMetaRef$current2 === void 0 ? void 0 : _listMetaRef$current2.page)) {\n      load(productId, page, canceledRef).then();\n    }\n\n    return () => {\n      canceledRef.current = true;\n    };\n  }, [productId, page]);\n  const [submit, submitInProgress] = useAsyncAction(async data => {\n    await shopApi.addProductReview(productId, _objectSpread(_objectSpread({}, data), {}, {\n      rating: parseFloat(data.rating)\n    }));\n    await load(productId, 1);\n\n    if (isUnmountedRef.current) {\n      return;\n    }\n\n    reset();\n    toast.success(intl.formatMessage({\n      id: 'TEXT_TOAST_REVIEW_ADDED'\n    }));\n  }, [productId, reset]);\n  return __jsx(\"div\", {\n    className: \"reviews-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, list && __jsx(\"div\", {\n    className: \"reviews-view__list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, __jsx(ReviewsList, {\n    list: list,\n    page: page,\n    onPageChange: setPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  })), __jsx(\"form\", {\n    className: \"reviews-view__form\",\n    onSubmit: handleSubmit(submit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, __jsx(\"h3\", {\n    className: \"reviews-view__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"HEADER_WRITE_REVIEW\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  })), __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: classNames({\n      'col-xxl-8 col-xl-10 col-lg-9 col-12': productPageLayout === 'full',\n      'col-xxl-12 col-xl-10 col-12': productPageLayout === 'sidebar'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }, __jsx(\"div\", {\n    className: \"form-group col-md-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"review-stars\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 33\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_RATING_LABEL\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 37\n    }\n  })), __jsx(\"select\", {\n    id: \"review-stars\",\n    name: \"rating\",\n    className: classNames('form-control', {\n      'is-invalid': errors.rating\n    }),\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 33\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 37\n    }\n  }, intl.formatMessage({\n    id: 'INPUT_RATING_PLACEHOLDER'\n  })), [5, 4, 3, 2, 1].map(stars => __jsx(\"option\", {\n    key: stars,\n    value: stars,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 41\n    }\n  }, intl.formatMessage({\n    id: 'INPUT_RATING_OPTION'\n  }, {\n    stars\n  })))), __jsx(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 33\n    }\n  }, ((_errors$rating = errors.rating) === null || _errors$rating === void 0 ? void 0 : _errors$rating.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 41\n    }\n  }))), __jsx(\"div\", {\n    className: \"form-group col-md-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 29\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"review-author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 33\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_YOUR_NAME_LABEL\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 37\n    }\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"review-author\",\n    name: \"author\",\n    className: classNames('form-control', {\n      'is-invalid': errors.author\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_YOUR_NAME_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 33\n    }\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 33\n    }\n  }, ((_errors$author = errors.author) === null || _errors$author === void 0 ? void 0 : _errors$author.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 41\n    }\n  }))), __jsx(\"div\", {\n    className: \"form-group col-md-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 29\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"review-email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 33\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_EMAIL_ADDRESS_LABEL\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 37\n    }\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: \"review-email\",\n    name: \"email\",\n    className: classNames('form-control', {\n      'is-invalid': errors.email\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_EMAIL_ADDRESS_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true,\n      validate: {\n        email: validateEmail\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 33\n    }\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 33\n    }\n  }, ((_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 41\n    }\n  }), ((_errors$email2 = errors.email) === null || _errors$email2 === void 0 ? void 0 : _errors$email2.type) === 'email' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_INCORRECT_EMAIL\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 41\n    }\n  })))), __jsx(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"review-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 29\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_YOUR_REVIEW_LABEL\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 33\n    }\n  })), __jsx(\"textarea\", {\n    id: \"review-text\",\n    rows: 6,\n    name: \"content\",\n    className: classNames('form-control', {\n      'is-invalid': errors.content\n    }),\n    placeholder: intl.formatMessage({\n      id: 'INPUT_YOUR_REVIEW_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 29\n    }\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 29\n    }\n  }, ((_errors$content = errors.content) === null || _errors$content === void 0 ? void 0 : _errors$content.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 37\n    }\n  }))), __jsx(\"div\", {\n    className: \"form-group mb-0 mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 25\n    }\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: classNames('btn', 'btn-primary', {\n      'btn-loading': submitInProgress\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 29\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"BUTTON_POST_REVIEW\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 33\n    }\n  })))))));\n}\n\nexport default ReviewsView;","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/components/shop/ReviewsView.tsx"],"names":["React","useEffect","useRef","useState","classNames","FormattedMessage","useIntl","toast","useForm","ReviewsList","shopApi","useAsyncAction","useIsUnmountedRef","validateEmail","ReviewsView","props","intl","productId","productPageLayout","page","setPage","listMetaRef","list","setList","formMethods","handleSubmit","register","errors","reset","isUnmountedRef","load","canceledRef","getProductReviews","limit","then","result","current","submit","submitInProgress","data","addProductReview","rating","parseFloat","success","formatMessage","id","required","map","stars","type","author","email","validate","content"],"mappings":"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","sourcesContent":["// react\nimport React, { useEffect, useRef, useState } from 'react';\n// third-party\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { useForm } from 'react-hook-form';\n// application\nimport ReviewsList from '~/components/shop/ReviewsList';\nimport { IProductPageLayout } from '~/interfaces/pages';\nimport { IReviewsList } from '~/interfaces/list';\nimport { shopApi } from '~/api';\nimport { useAsyncAction, useIsUnmountedRef } from '~/store/hooks';\nimport { validateEmail } from '~/services/validators';\n\ninterface IForm {\n    rating: string;\n    author: string;\n    email: string;\n    content: string;\n}\n\ninterface Props {\n    productId: number;\n    productPageLayout: IProductPageLayout;\n}\n\nfunction ReviewsView(props: Props) {\n    const intl = useIntl();\n    const { productId, productPageLayout } = props;\n    const [page, setPage] = useState<number>(1);\n    const listMetaRef = useRef<{ productId: number, page: number } | null>(null);\n    const [list, setList] = useState<IReviewsList | null>(null);\n    const formMethods = useForm<IForm>();\n    const {\n        handleSubmit,\n        register,\n        errors,\n        reset,\n    } = formMethods;\n\n    const isUnmountedRef = useIsUnmountedRef();\n\n    const load = async (productId: number, page: number, canceledRef?: React.RefObject<boolean>) => {\n        await shopApi.getProductReviews(productId, { limit: 8, page }).then((result) => {\n            if (isUnmountedRef.current || canceledRef?.current) {\n                return;\n            }\n\n            listMetaRef.current = {\n                productId,\n                page,\n            };\n\n            setList(result);\n            setPage(result.page);\n        });\n    };\n\n    useEffect(() => {\n        const canceledRef = { current: false };\n\n        if (productId !== listMetaRef.current?.productId || page !== listMetaRef.current?.page) {\n            load(productId, page, canceledRef).then();\n        }\n\n        return () => {\n            canceledRef.current = true;\n        };\n    }, [productId, page]);\n\n    const [submit, submitInProgress] = useAsyncAction(async (data: IForm) => {\n        await shopApi.addProductReview(productId, {\n            ...data,\n            rating: parseFloat(data.rating),\n        });\n\n        await load(productId, 1);\n\n        if (isUnmountedRef.current) {\n            return;\n        }\n\n        reset();\n\n        toast.success(intl.formatMessage({ id: 'TEXT_TOAST_REVIEW_ADDED' }));\n    }, [productId, reset]);\n\n    return (\n        <div className=\"reviews-view\">\n            {list && (\n                <div className=\"reviews-view__list\">\n                    <ReviewsList\n                        list={list}\n                        page={page}\n                        onPageChange={setPage}\n                    />\n                </div>\n            )}\n\n            <form className=\"reviews-view__form\" onSubmit={handleSubmit(submit)}>\n                <h3 className=\"reviews-view__header\">\n                    <FormattedMessage id=\"HEADER_WRITE_REVIEW\" />\n                </h3>\n                <div className=\"row\">\n                    <div\n                        className={classNames({\n                            'col-xxl-8 col-xl-10 col-lg-9 col-12': productPageLayout === 'full',\n                            'col-xxl-12 col-xl-10 col-12': productPageLayout === 'sidebar',\n                        })}\n                    >\n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"review-stars\">\n                                    <FormattedMessage id=\"INPUT_RATING_LABEL\" />\n                                </label>\n                                <select\n                                    id=\"review-stars\"\n                                    name=\"rating\"\n                                    className={classNames('form-control', {\n                                        'is-invalid': errors.rating,\n                                    })}\n                                    ref={register({ required: true })}\n                                >\n                                    <option value=\"\">\n                                        {intl.formatMessage({ id: 'INPUT_RATING_PLACEHOLDER' })}\n                                    </option>\n                                    {[5, 4, 3, 2, 1].map((stars) => (\n                                        <option key={stars} value={stars}>\n                                            {intl.formatMessage({ id: 'INPUT_RATING_OPTION' }, { stars })}\n                                        </option>\n                                    ))}\n                                </select>\n                                <div className=\"invalid-feedback\">\n                                    {errors.rating?.type === 'required' && (\n                                        <FormattedMessage id=\"ERROR_FORM_REQUIRED\" />\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"review-author\">\n                                    <FormattedMessage id=\"INPUT_YOUR_NAME_LABEL\" />\n                                </label>\n                                <input\n                                    type=\"text\"\n                                    id=\"review-author\"\n                                    name=\"author\"\n                                    className={classNames('form-control', {\n                                        'is-invalid': errors.author,\n                                    })}\n                                    placeholder={intl.formatMessage({ id: 'INPUT_YOUR_NAME_PLACEHOLDER' })}\n                                    ref={register({ required: true })}\n                                />\n                                <div className=\"invalid-feedback\">\n                                    {errors.author?.type === 'required' && (\n                                        <FormattedMessage id=\"ERROR_FORM_REQUIRED\" />\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"review-email\">\n                                    <FormattedMessage id=\"INPUT_EMAIL_ADDRESS_LABEL\" />\n                                </label>\n                                <input\n                                    type=\"text\"\n                                    id=\"review-email\"\n                                    name=\"email\"\n                                    className={classNames('form-control', {\n                                        'is-invalid': errors.email,\n                                    })}\n                                    placeholder={intl.formatMessage({ id: 'INPUT_EMAIL_ADDRESS_PLACEHOLDER' })}\n                                    ref={register({\n                                        required: true,\n                                        validate: { email: validateEmail },\n                                    })}\n                                />\n                                <div className=\"invalid-feedback\">\n                                    {errors.email?.type === 'required' && (\n                                        <FormattedMessage id=\"ERROR_FORM_REQUIRED\" />\n                                    )}\n                                    {errors.email?.type === 'email' && (\n                                        <FormattedMessage id=\"ERROR_FORM_INCORRECT_EMAIL\" />\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"review-text\">\n                                <FormattedMessage id=\"INPUT_YOUR_REVIEW_LABEL\" />\n                            </label>\n                            <textarea\n                                id=\"review-text\"\n                                rows={6}\n                                name=\"content\"\n                                className={classNames('form-control', {\n                                    'is-invalid': errors.content,\n                                })}\n                                placeholder={intl.formatMessage({ id: 'INPUT_YOUR_REVIEW_PLACEHOLDER' })}\n                                ref={register({ required: true })}\n                            />\n                            <div className=\"invalid-feedback\">\n                                {errors.content?.type === 'required' && (\n                                    <FormattedMessage id=\"ERROR_FORM_REQUIRED\" />\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"form-group mb-0 mt-4\">\n                            <button\n                                type=\"submit\"\n                                className={classNames('btn', 'btn-primary', {\n                                    'btn-loading': submitInProgress,\n                                })}\n                            >\n                                <FormattedMessage id=\"BUTTON_POST_REVIEW\" />\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default ReviewsView;\n"]},"metadata":{},"sourceType":"module"}