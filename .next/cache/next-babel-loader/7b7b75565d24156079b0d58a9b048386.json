{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/prefer-default-export,class-methods-use-this */\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { products as dbProducts } from '~/fake-server/database/products';\nexport class CheckFilterBuilder extends AbstractFilterBuilder {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"value\", []);\n  }\n\n  test(product) {\n    if (this.value.length === 0) {\n      return true;\n    }\n\n    return this.value.reduce((result, value) => result || this.extractItems(product).map(x => x.slug).includes(value), false);\n  } // noinspection DuplicatedCode\n\n\n  makeItems(products, value) {\n    products.forEach(product => this.extractItems(product).forEach(item => {\n      if (!this.items.find(x => x.slug === item.slug)) {\n        this.items.push(item);\n      }\n    }));\n    this.value = this.parseValue(value);\n  } // noinspection DuplicatedCode\n\n\n  calc(filters) {\n    const products = dbProducts.filter(product => filters.reduce((isMatched, filter) => isMatched && (filter === this || filter.test(product)), true));\n    this.items = this.items.map(item => _objectSpread(_objectSpread({}, item), {}, {\n      count: products.reduce((acc, product) => acc + (this.extractItems(product).map(x => x.slug).includes(item.slug) ? 1 : 0), 0)\n    }));\n  }\n\n  build() {\n    return {\n      type: 'check',\n      slug: this.slug,\n      name: this.name,\n      items: this.items,\n      value: this.value\n    };\n  } // noinspection JSMethodCanBeStatic\n\n\n  parseValue(value) {\n    return value ? value.split(',') : [];\n  }\n\n  extractItems(product) {\n    if (this.slug === 'brand') {\n      return product.brand ? [{\n        slug: product.brand.slug,\n        name: product.brand.name,\n        count: 0\n      }] : [];\n    }\n\n    throw Error();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/fake-server/filters/check-filter-builder.ts"],"names":["AbstractFilterBuilder","products","dbProducts","CheckFilterBuilder","test","product","value","length","reduce","result","extractItems","map","x","slug","includes","makeItems","forEach","item","items","find","push","parseValue","calc","filters","filter","isMatched","count","acc","build","type","name","split","brand","Error"],"mappings":"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","sourcesContent":["/* eslint-disable import/prefer-default-export,class-methods-use-this */\n\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { IBaseFilterItem, ICheckFilter } from '~/interfaces/filter';\nimport { IProduct } from '~/interfaces/product';\nimport { products as dbProducts } from '~/fake-server/database/products';\n\nexport class CheckFilterBuilder extends AbstractFilterBuilder {\n    private items: IBaseFilterItem[] = [];\n\n    private value: string[] = [];\n\n    test(product: IProduct): boolean {\n        if (this.value.length === 0) {\n            return true;\n        }\n\n        return this.value.reduce<boolean>((result, value) => (\n            result || this.extractItems(product).map((x) => x.slug).includes(value)\n        ), false);\n    }\n\n    // noinspection DuplicatedCode\n    makeItems(products: IProduct[], value: string): void {\n        products.forEach((product) => this.extractItems(product).forEach((item) => {\n            if (!this.items.find((x) => x.slug === item.slug)) {\n                this.items.push(item);\n            }\n        }));\n\n        this.value = this.parseValue(value);\n    }\n\n    // noinspection DuplicatedCode\n    calc(filters: AbstractFilterBuilder[]): void {\n        const products = dbProducts.filter(\n            (product) => filters.reduce<boolean>(\n                (isMatched, filter) => (isMatched && (filter === this || filter.test(product))),\n                true,\n            ),\n        );\n\n        this.items = this.items.map((item) => ({\n            ...item,\n            count: products.reduce((acc, product) => (\n                acc + (this.extractItems(product).map((x) => x.slug).includes(item.slug) ? 1 : 0)\n            ), 0),\n        }));\n    }\n\n    build(): ICheckFilter {\n        return {\n            type: 'check',\n            slug: this.slug,\n            name: this.name,\n            items: this.items,\n            value: this.value,\n        };\n    }\n\n    // noinspection JSMethodCanBeStatic\n    private parseValue(value: string): string[] {\n        return value ? value.split(',') : [];\n    }\n\n    private extractItems(product: IProduct): IBaseFilterItem[] {\n        if (this.slug === 'brand') {\n            return product.brand ? [{\n                slug: product.brand.slug,\n                name: product.brand.name,\n                count: 0,\n            }] : [];\n        }\n\n        throw Error();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}