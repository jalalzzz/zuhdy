{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/prefer-default-export */\n// react\nimport { useMemo } from 'react'; // third-party\n\nimport { useRouter } from 'next/router';\n// application\nimport { getDefaultLocale } from '~/services/i18n/utils';\nimport { normalizeHref, normalizeLinkHref } from '~/components/shared/AppLink';\nimport { useLocale } from '~/services/i18n/hooks';\nexport function hrefToRouterArgs(linkHref) {\n  const {\n    href,\n    as,\n    shallow\n  } = normalizeLinkHref(linkHref);\n  return [href, as, {\n    shallow\n  }];\n}\n\nfunction normalizeRouterArgs(args, locale) {\n  const [url, as, options] = args;\n  const normalizedUrl = normalizeHref(url);\n  const normalizedAs = normalizeHref(as || url);\n  normalizedUrl.query = _objectSpread({}, normalizedUrl.query);\n  normalizedAs.pathname = locale === getDefaultLocale() ? normalizedAs.pathname : `/${locale}${normalizedAs.pathname}`;\n  return [normalizedUrl, normalizedAs, options];\n}\n\nexport function useOriginalRouter() {\n  return useRouter();\n}\nexport function useAppRouter() {\n  const original = useRouter();\n  const locale = useLocale();\n  const mimic = useMemo(() => ({\n    push(...args) {\n      return original.push(...normalizeRouterArgs(args, locale));\n    },\n\n    replace(...args) {\n      return original.replace(...normalizeRouterArgs(args, locale));\n    }\n\n  }), [original, locale]);\n  return useMemo(() => Object.setPrototypeOf(mimic, original), [mimic, original]);\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/services/router.ts"],"names":["useMemo","useRouter","getDefaultLocale","normalizeHref","normalizeLinkHref","useLocale","hrefToRouterArgs","linkHref","href","as","shallow","normalizeRouterArgs","args","locale","url","options","normalizedUrl","normalizedAs","query","pathname","useOriginalRouter","useAppRouter","original","mimic","push","replace","Object","setPrototypeOf"],"mappings":";;;;;;AAAA;AAEA;AACA,SAASA,OAAT,QAAwB,OAAxB,C,CACA;;AACA,SAAqBC,SAArB,QAAsC,aAAtC;AAEA;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAAuBC,aAAvB,EAAsCC,iBAAtC,QAA+D,6BAA/D;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAIA,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAA4D;AAC/D,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,EAAR;AAAYC,IAAAA;AAAZ,MAAwBN,iBAAiB,CAACG,QAAD,CAA/C;AAEA,SAAO,CAACC,IAAD,EAAOC,EAAP,EAAW;AAAEC,IAAAA;AAAF,GAAX,CAAP;AACH;;AAED,SAASC,mBAAT,CAA6BC,IAA7B,EAA6CC,MAA7C,EAAuE;AACnE,QAAM,CAACC,GAAD,EAAML,EAAN,EAAUM,OAAV,IAAqBH,IAA3B;AACA,QAAMI,aAAa,GAAGb,aAAa,CAACW,GAAD,CAAnC;AACA,QAAMG,YAAY,GAAGd,aAAa,CAACM,EAAE,IAAIK,GAAP,CAAlC;AAEAE,EAAAA,aAAa,CAACE,KAAd,qBACOF,aAAa,CAACE,KADrB;AAIAD,EAAAA,YAAY,CAACE,QAAb,GAAwBN,MAAM,KAAKX,gBAAgB,EAA3B,GAClBe,YAAY,CAACE,QADK,GAEjB,IAAGN,MAAO,GAAEI,YAAY,CAACE,QAAS,EAFzC;AAIA,SAAO,CAACH,aAAD,EAAgBC,YAAhB,EAA8BF,OAA9B,CAAP;AACH;;AAED,OAAO,SAASK,iBAAT,GAA6B;AAChC,SAAOnB,SAAS,EAAhB;AACH;AAED,OAAO,SAASoB,YAAT,GAAoC;AACvC,QAAMC,QAAQ,GAAGrB,SAAS,EAA1B;AACA,QAAMY,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAMkB,KAA+B,GAAGvB,OAAO,CAAC,OAAO;AACnDwB,IAAAA,IAAI,CAAC,GAAGZ,IAAJ,EAAsC;AACtC,aAAOU,QAAQ,CAACE,IAAT,CACH,GAAGb,mBAAmB,CAACC,IAAD,EAAOC,MAAP,CADnB,CAAP;AAGH,KALkD;;AAMnDY,IAAAA,OAAO,CAAC,GAAGb,IAAJ,EAAsC;AACzC,aAAOU,QAAQ,CAACG,OAAT,CACH,GAAGd,mBAAmB,CAACC,IAAD,EAAOC,MAAP,CADnB,CAAP;AAGH;;AAVkD,GAAP,CAAD,EAW3C,CAACS,QAAD,EAAWT,MAAX,CAX2C,CAA/C;AAaA,SAAOb,OAAO,CAAC,MAAM0B,MAAM,CAACC,cAAP,CAAsBJ,KAAtB,EAA6BD,QAA7B,CAAP,EAA+C,CAACC,KAAD,EAAQD,QAAR,CAA/C,CAAd;AACH","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\n// react\nimport { useMemo } from 'react';\n// third-party\nimport { NextRouter, useRouter } from 'next/router';\nimport { UrlObject } from 'url';\n// application\nimport { getDefaultLocale } from '~/services/i18n/utils';\nimport { IAppLinkHref, normalizeHref, normalizeLinkHref } from '~/components/shared/AppLink';\nimport { useLocale } from '~/services/i18n/hooks';\n\ntype PushArgs = [url: UrlObject, as?: UrlObject, options?: {}];\n\nexport function hrefToRouterArgs(linkHref: IAppLinkHref): PushArgs {\n    const { href, as, shallow } = normalizeLinkHref(linkHref);\n\n    return [href, as, { shallow }];\n}\n\nfunction normalizeRouterArgs(args: PushArgs, locale: string): PushArgs {\n    const [url, as, options] = args;\n    const normalizedUrl = normalizeHref(url);\n    const normalizedAs = normalizeHref(as || url);\n\n    normalizedUrl.query = {\n        ...normalizedUrl.query,\n    };\n\n    normalizedAs.pathname = locale === getDefaultLocale()\n        ? normalizedAs.pathname\n        : `/${locale}${normalizedAs.pathname}`;\n\n    return [normalizedUrl, normalizedAs, options];\n}\n\nexport function useOriginalRouter() {\n    return useRouter();\n}\n\nexport function useAppRouter(): NextRouter {\n    const original = useRouter();\n    const locale = useLocale();\n    const mimic: Partial<typeof original> = useMemo(() => ({\n        push(...args: PushArgs): Promise<boolean> {\n            return original.push(\n                ...normalizeRouterArgs(args, locale),\n            );\n        },\n        replace(...args: PushArgs): Promise<boolean> {\n            return original.replace(\n                ...normalizeRouterArgs(args, locale),\n            );\n        },\n    }), [original, locale]);\n\n    return useMemo(() => Object.setPrototypeOf(mimic, original), [mimic, original]);\n}\n"]},"metadata":{},"sourceType":"module"}