{"ast":null,"code":"// react\nimport { useMemo, useState } from 'react'; // third-party\n\nimport { useForm } from 'react-hook-form'; // application\n\nimport { useAsyncAction } from '~/store/hooks';\nimport { useUserSignIn } from '~/store/user/userHooks';\nexport function useSignInForm(options = {}) {\n  const signIn = useUserSignIn();\n  const {\n    onSuccess\n  } = options;\n  const {\n    0: serverError,\n    1: setServerError\n  } = useState(null);\n  const methods = useForm({\n    defaultValues: {\n      email: 'red-parts@example.com',\n      password: '123456',\n      remember: false\n    }\n  });\n  const {\n    handleSubmit\n  } = methods;\n  const [submit, submitInProgress] = useAsyncAction(data => {\n    setServerError(null);\n    return signIn(data.email, data.password).then(() => {\n      if (onSuccess) {\n        onSuccess();\n      }\n    }, error => {\n      setServerError(`ERROR_API_${error.message}`);\n    });\n  }, [signIn, setServerError, onSuccess]);\n  return {\n    submit: useMemo(() => handleSubmit(submit), [handleSubmit, submit]),\n    submitInProgress: submitInProgress || methods.formState.isSubmitting,\n    serverError,\n    errors: methods.errors,\n    register: methods.register,\n    watch: methods.watch\n  };\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/services/forms/sign-in.ts"],"names":["useMemo","useState","useForm","useAsyncAction","useUserSignIn","useSignInForm","options","signIn","onSuccess","serverError","setServerError","methods","defaultValues","email","password","remember","handleSubmit","submit","submitInProgress","data","then","error","message","formState","isSubmitting","errors","register","watch"],"mappings":"AAAA;AACA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC,C,CACA;;AACA,SAASC,OAAT,QAAwB,iBAAxB,C,CACA;;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAYA,OAAO,SAASC,aAAT,CAAuBC,OAA2B,GAAG,EAArD,EAAyD;AAC5D,QAAMC,MAAM,GAAGH,aAAa,EAA5B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAgBF,OAAtB;AACA,QAAM;AAAA,OAACG,WAAD;AAAA,OAAcC;AAAd,MAAgCT,QAAQ,CAAgB,IAAhB,CAA9C;AACA,QAAMU,OAAO,GAAGT,OAAO,CAAc;AACjCU,IAAAA,aAAa,EAAE;AACXC,MAAAA,KAAK,EAAE,uBADI;AAEXC,MAAAA,QAAQ,EAAE,QAFC;AAGXC,MAAAA,QAAQ,EAAE;AAHC;AADkB,GAAd,CAAvB;AAOA,QAAM;AAAEC,IAAAA;AAAF,MAAmBL,OAAzB;AACA,QAAM,CAACM,MAAD,EAASC,gBAAT,IAA6Bf,cAAc,CAAEgB,IAAD,IAAuB;AACrET,IAAAA,cAAc,CAAC,IAAD,CAAd;AAEA,WAAOH,MAAM,CAACY,IAAI,CAACN,KAAN,EAAaM,IAAI,CAACL,QAAlB,CAAN,CAAkCM,IAAlC,CACH,MAAM;AACF,UAAIZ,SAAJ,EAAe;AACXA,QAAAA,SAAS;AACZ;AACJ,KALE,EAMFa,KAAD,IAAkB;AACdX,MAAAA,cAAc,CAAE,aAAYW,KAAK,CAACC,OAAQ,EAA5B,CAAd;AACH,KARE,CAAP;AAUH,GAbgD,EAa9C,CAACf,MAAD,EAASG,cAAT,EAAyBF,SAAzB,CAb8C,CAAjD;AAeA,SAAO;AACHS,IAAAA,MAAM,EAAEjB,OAAO,CAAC,MAAMgB,YAAY,CAACC,MAAD,CAAnB,EAA6B,CAACD,YAAD,EAAeC,MAAf,CAA7B,CADZ;AAEHC,IAAAA,gBAAgB,EAAEA,gBAAgB,IAAIP,OAAO,CAACY,SAAR,CAAkBC,YAFrD;AAGHf,IAAAA,WAHG;AAIHgB,IAAAA,MAAM,EAAEd,OAAO,CAACc,MAJb;AAKHC,IAAAA,QAAQ,EAAEf,OAAO,CAACe,QALf;AAMHC,IAAAA,KAAK,EAAEhB,OAAO,CAACgB;AANZ,GAAP;AAQH","sourcesContent":["// react\nimport { useMemo, useState } from 'react';\n// third-party\nimport { useForm } from 'react-hook-form';\n// application\nimport { useAsyncAction } from '~/store/hooks';\nimport { useUserSignIn } from '~/store/user/userHooks';\n\ninterface ISignInFormOptions {\n    onSuccess?: () => void;\n}\n\nexport interface ISignInForm {\n    email: string;\n    password: string;\n    remember: boolean;\n}\n\nexport function useSignInForm(options: ISignInFormOptions = {}) {\n    const signIn = useUserSignIn();\n    const { onSuccess } = options;\n    const [serverError, setServerError] = useState<string | null>(null);\n    const methods = useForm<ISignInForm>({\n        defaultValues: {\n            email: 'red-parts@example.com',\n            password: '123456',\n            remember: false,\n        },\n    });\n    const { handleSubmit } = methods;\n    const [submit, submitInProgress] = useAsyncAction((data: ISignInForm) => {\n        setServerError(null);\n\n        return signIn(data.email, data.password).then(\n            () => {\n                if (onSuccess) {\n                    onSuccess();\n                }\n            },\n            (error: Error) => {\n                setServerError(`ERROR_API_${error.message}`);\n            },\n        );\n    }, [signIn, setServerError, onSuccess]);\n\n    return {\n        submit: useMemo(() => handleSubmit(submit), [handleSubmit, submit]),\n        submitInProgress: submitInProgress || methods.formState.isSubmitting,\n        serverError,\n        errors: methods.errors,\n        register: methods.register,\n        watch: methods.watch,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}