{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shbaita Studio\\\\Documents\\\\project\\\\new1\\\\themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template\\\\Sources\\\\src\\\\components\\\\filters\\\\FilterRange.tsx\";\nvar __jsx = React.createElement;\n// react\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'; // third-party\n\nimport InputRange from 'react-input-range'; // application\n\nimport CurrencyFormat from '~/components/shared/CurrencyFormat';\nimport { useDirection } from '~/services/i18n/hooks';\n\nfunction getFirstValidValue(...values) {\n  return values.reduce((acc, value) => acc === null && (value || value === 0) ? value : acc, null);\n}\n\nfunction FilterRange(props) {\n  const {\n    options,\n    value,\n    onChangeValue\n  } = props;\n  const [propsFrom, propsTo] = value || [];\n  const {\n    0: timer,\n    1: setTimer\n  } = useState();\n  const {\n    0: state,\n    1: setState\n  } = useState([propsFrom, propsTo]);\n  const [stateFrom, stateTo] = state;\n  const direction = useDirection();\n  let {\n    min,\n    max\n  } = options;\n  let from = Math.max(getFirstValidValue(stateFrom, propsFrom, min), min);\n  let to = Math.min(getFirstValidValue(stateTo, propsTo, max), max);\n  let fromLabel = from;\n  let toLabel = to; // since react-input-range does not support RTL direction,\n  // we just need to invert and swipe values\n\n  if (direction === 'rtl') {\n    [from, to] = [to * -1, from * -1];\n    [min, max] = [max * -1, min * -1];\n    [fromLabel, toLabel] = [from * -1, to * -1];\n  } // Update state from props.\n\n\n  useEffect(() => {\n    setState([propsFrom, propsTo]);\n  }, [propsFrom, propsTo]); // Clear previous timer.\n\n  useEffect(() => () => {\n    clearTimeout(timer);\n  }, [timer]);\n  const handleChange = useCallback(newValue => {\n    let {\n      min: newFrom,\n      max: newTo\n    } = newValue; // This is needed to fix a bug in react-input-range.\n\n    [newFrom, newTo] = [Math.max(newFrom, min), Math.min(newTo, max)]; // since react-input-range does not support RTL direction,\n    // we just need to invert and swipe values\n\n    if (direction === 'rtl') {\n      [newFrom, newTo] = [newTo * -1, newFrom * -1];\n    }\n\n    setState([newFrom, newTo]);\n\n    if (onChangeValue) {\n      setTimer(setTimeout(() => {\n        onChangeValue({\n          filter: options,\n          value: [newFrom, newTo]\n        });\n      }, 250));\n    }\n  }, [min, max, options, onChangeValue, direction, setTimer, setState]);\n  return useMemo(() => __jsx(\"div\", {\n    className: \"filter-range\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"filter-range__slider\",\n    dir: \"ltr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, __jsx(InputRange, {\n    minValue: min,\n    maxValue: max,\n    value: {\n      min: from,\n      max: to\n    },\n    step: 1,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    className: \"filter-range__title-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"filter-range__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, __jsx(\"span\", {\n    className: \"filter-range__min-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, __jsx(CurrencyFormat, {\n    value: fromLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 63\n    }\n  })), ' â€“ ', __jsx(\"span\", {\n    className: \"filter-range__max-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, __jsx(CurrencyFormat, {\n    value: toLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 63\n    }\n  }))))), [min, max, from, to, fromLabel, toLabel, handleChange]);\n}\n\nexport default FilterRange;","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/components/filters/FilterRange.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","InputRange","CurrencyFormat","useDirection","getFirstValidValue","values","reduce","acc","value","FilterRange","props","options","onChangeValue","propsFrom","propsTo","timer","setTimer","state","setState","stateFrom","stateTo","direction","min","max","from","Math","to","fromLabel","toLabel","clearTimeout","handleChange","newValue","newFrom","newTo","setTimeout","filter"],"mappings":"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","sourcesContent":["// react\nimport React, {\n    useCallback,\n    useEffect,\n    useMemo,\n    useState,\n} from 'react';\n// third-party\nimport InputRange from 'react-input-range';\n// application\nimport CurrencyFormat from '~/components/shared/CurrencyFormat';\nimport { IRangeFilter, IRangeFilterValue } from '~/interfaces/filter';\nimport { useDirection } from '~/services/i18n/hooks';\n\nfunction getFirstValidValue(...values: Array<number | null>): number | null {\n    return values.reduce((acc, value) => (\n        acc === null && (value || value === 0)\n            ? value\n            : acc\n    ), null);\n}\n\ninterface Props {\n    options: IRangeFilter;\n    value: IRangeFilterValue;\n    onChangeValue?: (event: { filter: IRangeFilter, value: IRangeFilterValue }) => void;\n}\n\nfunction FilterRange(props: Props) {\n    const { options, value, onChangeValue } = props;\n    const [propsFrom, propsTo] = value || [];\n    const [timer, setTimer] = useState<number>();\n    const [state, setState] = useState([propsFrom, propsTo]);\n    const [stateFrom, stateTo] = state;\n    const direction = useDirection();\n\n    let { min, max } = options;\n    let from = Math.max(getFirstValidValue(stateFrom, propsFrom, min)!, min);\n    let to = Math.min(getFirstValidValue(stateTo, propsTo, max)!, max);\n    let fromLabel = from;\n    let toLabel = to;\n\n    // since react-input-range does not support RTL direction,\n    // we just need to invert and swipe values\n    if (direction === 'rtl') {\n        [from, to] = [to * -1, from * -1];\n        [min, max] = [max * -1, min * -1];\n        [fromLabel, toLabel] = [from * -1, to * -1];\n    }\n\n    // Update state from props.\n    useEffect(() => {\n        setState([propsFrom, propsTo]);\n    }, [propsFrom, propsTo]);\n\n    // Clear previous timer.\n    useEffect(() => () => {\n        clearTimeout(timer);\n    }, [timer]);\n\n    const handleChange = useCallback((newValue) => {\n        let { min: newFrom, max: newTo } = newValue;\n\n        // This is needed to fix a bug in react-input-range.\n        [newFrom, newTo] = [Math.max(newFrom, min), Math.min(newTo, max)];\n\n        // since react-input-range does not support RTL direction,\n        // we just need to invert and swipe values\n        if (direction === 'rtl') {\n            [newFrom, newTo] = [newTo * -1, newFrom * -1];\n        }\n\n        setState([newFrom, newTo]);\n\n        if (onChangeValue) {\n            setTimer(setTimeout(() => {\n                onChangeValue({ filter: options, value: [newFrom, newTo] });\n            }, 250) as unknown as number);\n        }\n    }, [min, max, options, onChangeValue, direction, setTimer, setState]);\n\n    return useMemo(() => (\n        <div className=\"filter-range\">\n            <div className=\"filter-range__slider\" dir=\"ltr\">\n                <InputRange\n                    minValue={min}\n                    maxValue={max}\n                    value={{ min: from, max: to }}\n                    step={1}\n                    onChange={handleChange}\n                />\n            </div>\n            <div className=\"filter-range__title-button\">\n                <div className=\"filter-range__title\">\n                    <span className=\"filter-range__min-value\"><CurrencyFormat value={fromLabel} /></span>\n                    {' â€“ '}\n                    <span className=\"filter-range__max-value\"><CurrencyFormat value={toLabel} /></span>\n                </div>\n            </div>\n        </div>\n    ), [min, max, from, to, fromLabel, toLabel, handleChange]);\n}\n\nexport default FilterRange;\n"]},"metadata":{},"sourceType":"module"}