{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Shbaita Studio\\\\Documents\\\\project\\\\new1\\\\themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template\\\\Sources\\\\src\\\\components\\\\mobile\\\\MobileMenuConveyor.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// react\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'; // application\n\nimport { MobileMenuContext } from '~/services/mobile-menu';\n\nfunction MobileMenuConveyor(props) {\n  _s();\n\n  var controllerRef = props.controllerRef,\n      children = props.children;\n  var ref = useRef(null);\n  var lastPanelIdRef = useRef(0);\n\n  var _useState = useState({\n    stack: [],\n    bin: []\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var controller = useMemo(function () {\n    return {\n      reset: function reset() {\n        setState({\n          stack: [],\n          bin: []\n        });\n      }\n    };\n  }, []);\n  useEffect(function () {\n    if (controllerRef) {\n      if ('current' in controllerRef) {\n        controllerRef.current = controller;\n      } else {\n        controllerRef(controller);\n      }\n    }\n  }, [controller, controllerRef]);\n  var open = useCallback(function (id) {\n    setState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        stack: [].concat(_toConsumableArray(prevState.stack), [id])\n      });\n    });\n  }, []);\n  var close = useCallback(function () {\n    setState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        stack: _toConsumableArray(prevState.stack.slice(0, -1)),\n        bin: [].concat(_toConsumableArray(prevState.bin), _toConsumableArray(prevState.stack.slice(-1)))\n      });\n    });\n  }, []);\n\n  var onTransitionEnd = function onTransitionEnd(event) {\n    if (event.target === ref.current && event.propertyName === 'transform') {\n      setState(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          bin: []\n        });\n      });\n    }\n  };\n\n  var contextData = useMemo(function () {\n    return {\n      lastPanelIdRef: lastPanelIdRef,\n      containerRef: ref,\n      open: open,\n      close: close,\n      stack: state.stack,\n      bin: state.bin\n    };\n  }, [ref, open, close, state.stack, state.bin]);\n  return __jsx(\"div\", {\n    ref: ref,\n    className: \"mobile-menu__conveyor\",\n    style: {\n      transform: \"translateX(-\".concat(state.stack.length * 100, \"%)\")\n    },\n    onTransitionEnd: onTransitionEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, __jsx(MobileMenuContext.Provider, {\n    value: contextData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, children));\n}\n\n_s(MobileMenuConveyor, \"rRtjicoJ+iChe1TR0WvwEaJNI+o=\");\n\n_c = MobileMenuConveyor;\nexport default MobileMenuConveyor;\n\nvar _c;\n\n$RefreshReg$(_c, \"MobileMenuConveyor\");","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/components/mobile/MobileMenuConveyor.tsx"],"names":["React","useCallback","useEffect","useMemo","useRef","useState","MobileMenuContext","MobileMenuConveyor","props","controllerRef","children","ref","lastPanelIdRef","stack","bin","state","setState","controller","reset","current","open","id","prevState","close","slice","onTransitionEnd","event","target","propertyName","contextData","containerRef","transform","length"],"mappings":"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","sourcesContent":["// react\nimport React, {\n    PropsWithChildren,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\n// application\nimport { MobileMenuContext } from '~/services/mobile-menu';\n\nexport interface IMobileMenuConveyorController {\n    reset: () => void;\n}\n\ninterface Props extends PropsWithChildren<{}> {\n    controllerRef?: React.RefCallback<IMobileMenuConveyorController | null>\n        | React.MutableRefObject<IMobileMenuConveyorController | null>;\n}\n\nfunction MobileMenuConveyor(props: Props) {\n    const { controllerRef, children } = props;\n    const ref = useRef<HTMLDivElement>(null);\n    const lastPanelIdRef = useRef<number>(0);\n    const [state, setState] = useState<{ stack: number[]; bin: number[] }>({\n        stack: [],\n        bin: [],\n    });\n\n    const controller: IMobileMenuConveyorController = useMemo(() => ({\n        reset: () => {\n            setState(({\n                stack: [],\n                bin: [],\n            }));\n        },\n    }), []);\n\n    useEffect(() => {\n        if (controllerRef) {\n            if ('current' in controllerRef) {\n                controllerRef.current = controller;\n            } else {\n                controllerRef(controller);\n            }\n        }\n    }, [controller, controllerRef]);\n\n    const open = useCallback((id: number) => {\n        setState((prevState) => ({\n            ...prevState,\n            stack: [...prevState.stack, id],\n        }));\n    }, []);\n\n    const close = useCallback(() => {\n        setState((prevState) => ({\n            ...prevState,\n            stack: [...prevState.stack.slice(0, -1)],\n            bin: [...prevState.bin, ...prevState.stack.slice(-1)],\n        }));\n    }, []);\n\n    const onTransitionEnd = (event: React.TransitionEvent) => {\n        if (event.target === ref.current && event.propertyName === 'transform') {\n            setState((prevState) => ({\n                ...prevState,\n                bin: [],\n            }));\n        }\n    };\n\n    const contextData = useMemo(() => ({\n        lastPanelIdRef,\n        containerRef: ref,\n        open,\n        close,\n        stack: state.stack,\n        bin: state.bin,\n    }), [ref, open, close, state.stack, state.bin]);\n\n    return (\n        <div\n            ref={ref}\n            className=\"mobile-menu__conveyor\"\n            style={{\n                transform: `translateX(-${state.stack.length * 100}%)`,\n            }}\n            onTransitionEnd={onTransitionEnd}\n        >\n            <MobileMenuContext.Provider value={contextData}>\n                {children}\n            </MobileMenuContext.Provider>\n        </div>\n    );\n}\n\nexport default MobileMenuConveyor;\n"]},"metadata":{},"sourceType":"module"}