{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// application\nimport { CategoryFilterBuilder } from '~/fake-server/filters/category-filter-builder';\nimport { CheckFilterBuilder } from '~/fake-server/filters/check-filter-builder';\nimport { clone, delayResponse, error } from '~/fake-server/utils';\nimport { ColorFilterBuilder } from '~/fake-server/filters/color-filter-builder';\nimport { getNextReviewId, reviews } from '~/fake-server/database/reviews';\nimport { prepareCategory } from '~/fake-server/endpoints/categories';\nimport { products as dbProducts } from '~/fake-server/database/products';\nimport { RadioFilterBuilder } from '~/fake-server/filters/radio-filter-builder';\nimport { RangeFilterBuilder } from '~/fake-server/filters/range-filter-builder';\nimport { RatingFilterBuilder } from '~/fake-server/filters/rating-filter-builder';\nimport { shopCategoriesList } from '~/fake-server/database/categories';\nimport { VehicleFilterBuilder } from '~/fake-server/filters/vehicle-filter-builder';\n\nfunction getProducts(shift) {\n  var categorySlug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var shiftValue = shift;\n\n  switch (categorySlug) {\n    case 'tires-wheels':\n    case 'power-tools':\n      shiftValue += 5;\n      break;\n\n    case 'interior-parts':\n    case 'hand-tools':\n      shiftValue += 10;\n      break;\n\n    case 'engine-drivetrain':\n    case 'plumbing':\n      shiftValue += 15;\n      break;\n\n    default:\n  }\n\n  return [].concat(_toConsumableArray(dbProducts.slice(shiftValue)), _toConsumableArray(dbProducts.slice(0, shiftValue)));\n}\n\nexport function getProductsList() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var filterValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var filters = [new CategoryFilterBuilder('category', 'Categories'), new VehicleFilterBuilder('vehicle', 'Vehicle'), new RangeFilterBuilder('price', 'Price'), new CheckFilterBuilder('brand', 'Brand'), new RadioFilterBuilder('discount', 'With Discount'), new RatingFilterBuilder('rating', 'Rating'), new ColorFilterBuilder('color', 'Color')];\n  var products = dbProducts.slice(0);\n  filters.forEach(function (filter) {\n    return filter.makeItems(products, filterValues[filter.slug]);\n  }); // Calculate items count for filter values.\n\n  filters.forEach(function (filter) {\n    return filter.calc(filters);\n  }); // Apply filters to products list.\n\n  products = products.filter(function (product) {\n    return filters.reduce(function (mr, filter) {\n      return mr && filter.test(product);\n    }, true);\n  });\n  var page = (options === null || options === void 0 ? void 0 : options.page) || 1;\n  var limit = (options === null || options === void 0 ? void 0 : options.limit) || 16;\n  var sort = (options === null || options === void 0 ? void 0 : options.sort) || 'default';\n  var total = products.length;\n  var pages = Math.ceil(products.length / limit);\n  var from = (page - 1) * limit + 1;\n  var to = Math.min(page * limit, total); // Sort items array.\n\n  products = products.sort(function (a, b) {\n    if (['name_asc', 'name_desc'].includes(sort)) {\n      if (a.name === b.name) {\n        return 0;\n      }\n\n      return (a.name > b.name ? 1 : -1) * (sort === 'name_asc' ? 1 : -1);\n    }\n\n    return 0;\n  });\n  var items = products.slice(from - 1, to);\n  return delayResponse(Promise.resolve({\n    items: items,\n    page: page,\n    limit: limit,\n    sort: sort,\n    total: total,\n    pages: pages,\n    from: from,\n    to: to,\n    filters: filters.map(function (x) {\n      return x.build();\n    })\n  }), 350);\n}\nexport function getProductBySlug(slug) {\n  var product = dbProducts.find(function (x) {\n    return x.slug === slug;\n  });\n\n  if (!product) {\n    return error('Page Not Found');\n  }\n\n  return Promise.resolve(clone(product));\n}\nexport function getProductReviews(productId, options) {\n  var items = reviews.slice(0);\n  items.sort(function (a, b) {\n    if (a.date > b.date) {\n      return -1;\n    }\n\n    if (a.date < b.date) {\n      return 1;\n    }\n\n    return 0;\n  });\n  var page = (options === null || options === void 0 ? void 0 : options.page) || 1;\n  var limit = (options === null || options === void 0 ? void 0 : options.limit) || 8;\n  var sort = (options === null || options === void 0 ? void 0 : options.sort) || 'default';\n  var total = items.length;\n  var pages = Math.ceil(items.length / limit);\n  var from = (page - 1) * limit + 1;\n  var to = page * limit;\n  items = items.slice(from - 1, to);\n  return Promise.resolve({\n    items: items,\n    page: page,\n    limit: limit,\n    sort: sort,\n    total: total,\n    pages: pages,\n    from: from,\n    to: to\n  });\n}\nexport function addProductReview(productId, data) {\n  var review = {\n    id: getNextReviewId(),\n    date: new Date().toISOString().substr(0, 10),\n    author: data.author,\n    avatar: '/images/avatars/avatar-2.jpg',\n    rating: data.rating,\n    content: data.content\n  };\n  reviews.push(review);\n  return delayResponse(Promise.resolve(review));\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport function getProductAnalogs(productId) {\n  var slugs = ['sunset-brake-kit', 'specter-brake-kit', 'brake-kit'];\n  var analogs = dbProducts.filter(function (x) {\n    return slugs.includes(x.slug);\n  });\n  return Promise.resolve(clone(analogs));\n}\nexport function getRelatedProducts(productId, limit) {\n  return Promise.resolve(clone(dbProducts.slice(0, limit)));\n}\nexport function getFeaturedProducts(categorySlug, limit) {\n  return delayResponse(Promise.resolve(clone(getProducts(0, categorySlug).slice(0, limit))), 1000);\n}\nexport function getPopularProducts(categorySlug, limit) {\n  return delayResponse(Promise.resolve(clone(getProducts(6, categorySlug).slice(0, limit))), 1000);\n}\nexport function getTopRatedProducts(categorySlug, limit) {\n  return delayResponse(Promise.resolve(clone(getProducts(12, categorySlug).slice(0, limit))), 1000);\n}\nexport function getSpecialOffers(limit) {\n  return delayResponse(Promise.resolve(clone(getProducts(8).slice(0, limit))), 1000);\n}\nexport function getLatestProducts(limit) {\n  return Promise.resolve(clone(dbProducts.slice(0, limit)));\n}\nexport function getSearchSuggestions(query, options) {\n  var queryVal = query.toLowerCase();\n\n  var optionsVal = _objectSpread({\n    limitProducts: 4,\n    limitCategories: 4\n  }, options);\n\n  var resultProducts = dbProducts.filter(function (x) {\n    return x.name.toLowerCase().includes(queryVal);\n  });\n  var resultCategories = shopCategoriesList.filter(function (x) {\n    return x.name.toLowerCase().includes(queryVal);\n  });\n  return Promise.resolve({\n    products: resultProducts.slice(0, optionsVal.limitProducts),\n    categories: resultCategories.slice(0, optionsVal.limitCategories).map(function (x) {\n      return prepareCategory(x);\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}