{"ast":null,"code":"// application\nimport { error } from '~/fake-server/utils';\nimport { orders } from '~/fake-server/database/orders';\nexport function getOrdersList(options) {\n  var optionsValue = options || {};\n  var items = JSON.parse(JSON.stringify(orders));\n  var page = optionsValue.page || 1;\n  var limit = optionsValue.limit || 16;\n  var sort = optionsValue.sort || 'default';\n  var total = items.length;\n  var pages = Math.ceil(items.length / limit);\n  var from = (page - 1) * limit + 1;\n  var to = page * limit;\n  items = items.slice(from - 1, to);\n  return Promise.resolve({\n    page: page,\n    limit: limit,\n    sort: sort,\n    total: total,\n    pages: pages,\n    from: from,\n    to: to,\n    items: items\n  });\n}\nexport function getOrderById(id) {\n  var order = orders.find(function (x) {\n    return x.id === id;\n  });\n\n  if (order) {\n    return Promise.resolve(order);\n  }\n\n  return error('Page Not Found');\n}\nexport function getOrderByToken(token) {\n  var order = orders.find(function (x) {\n    return x.token === token;\n  });\n\n  if (order) {\n    return Promise.resolve(order);\n  }\n\n  return error('Page Not Found');\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/fake-server/endpoints/orders.ts"],"names":["error","orders","getOrdersList","options","optionsValue","items","JSON","parse","stringify","page","limit","sort","total","length","pages","Math","ceil","from","to","slice","Promise","resolve","getOrderById","id","order","find","x","getOrderByToken","token"],"mappings":"AAAA;AACA,SAASA,KAAT,QAAsB,qBAAtB;AAIA,SAASC,MAAT,QAAuB,+BAAvB;AAEA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAA8E;AACjF,MAAMC,YAAY,GAAGD,OAAO,IAAI,EAAhC;AAEA,MAAIE,KAAe,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,MAAf,CAAX,CAAtB;AAEA,MAAMQ,IAAI,GAAGL,YAAY,CAACK,IAAb,IAAqB,CAAlC;AACA,MAAMC,KAAK,GAAGN,YAAY,CAACM,KAAb,IAAsB,EAApC;AACA,MAAMC,IAAI,GAAGP,YAAY,CAACO,IAAb,IAAqB,SAAlC;AACA,MAAMC,KAAK,GAAGP,KAAK,CAACQ,MAApB;AACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUX,KAAK,CAACQ,MAAN,GAAeH,KAAzB,CAAd;AACA,MAAMO,IAAI,GAAG,CAACR,IAAI,GAAG,CAAR,IAAaC,KAAb,GAAqB,CAAlC;AACA,MAAMQ,EAAE,GAAGT,IAAI,GAAGC,KAAlB;AAEAL,EAAAA,KAAK,GAAGA,KAAK,CAACc,KAAN,CAAYF,IAAI,GAAG,CAAnB,EAAsBC,EAAtB,CAAR;AAEA,SAAOE,OAAO,CAACC,OAAR,CAAgB;AACnBZ,IAAAA,IAAI,EAAJA,IADmB;AAEnBC,IAAAA,KAAK,EAALA,KAFmB;AAGnBC,IAAAA,IAAI,EAAJA,IAHmB;AAInBC,IAAAA,KAAK,EAALA,KAJmB;AAKnBE,IAAAA,KAAK,EAALA,KALmB;AAMnBG,IAAAA,IAAI,EAAJA,IANmB;AAOnBC,IAAAA,EAAE,EAAFA,EAPmB;AAQnBb,IAAAA,KAAK,EAALA;AARmB,GAAhB,CAAP;AAUH;AAED,OAAO,SAASiB,YAAT,CAAsBC,EAAtB,EAAmD;AACtD,MAAMC,KAAK,GAAGvB,MAAM,CAACwB,IAAP,CAAY,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACH,EAAF,KAASA,EAAhB;AAAA,GAAZ,CAAd;;AAEA,MAAIC,KAAJ,EAAW;AACP,WAAOJ,OAAO,CAACC,OAAR,CAAgBG,KAAhB,CAAP;AACH;;AAED,SAAOxB,KAAK,CAAC,gBAAD,CAAZ;AACH;AAED,OAAO,SAAS2B,eAAT,CAAyBC,KAAzB,EAAyD;AAC5D,MAAMJ,KAAK,GAAGvB,MAAM,CAACwB,IAAP,CAAY,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACE,KAAF,KAAYA,KAAnB;AAAA,GAAZ,CAAd;;AAEA,MAAIJ,KAAJ,EAAW;AACP,WAAOJ,OAAO,CAACC,OAAR,CAAgBG,KAAhB,CAAP;AACH;;AAED,SAAOxB,KAAK,CAAC,gBAAD,CAAZ;AACH","sourcesContent":["// application\nimport { error } from '~/fake-server/utils';\nimport { IGetOrdersListOptions } from '~/api/base';\nimport { IOrder } from '~/interfaces/order';\nimport { IOrdersList } from '~/interfaces/list';\nimport { orders } from '~/fake-server/database/orders';\n\nexport function getOrdersList(options?: IGetOrdersListOptions): Promise<IOrdersList> {\n    const optionsValue = options || {};\n\n    let items: IOrder[] = JSON.parse(JSON.stringify(orders));\n\n    const page = optionsValue.page || 1;\n    const limit = optionsValue.limit || 16;\n    const sort = optionsValue.sort || 'default';\n    const total = items.length;\n    const pages = Math.ceil(items.length / limit);\n    const from = (page - 1) * limit + 1;\n    const to = page * limit;\n\n    items = items.slice(from - 1, to);\n\n    return Promise.resolve({\n        page,\n        limit,\n        sort,\n        total,\n        pages,\n        from,\n        to,\n        items,\n    });\n}\n\nexport function getOrderById(id: number): Promise<IOrder> {\n    const order = orders.find((x) => x.id === id);\n\n    if (order) {\n        return Promise.resolve(order);\n    }\n\n    return error('Page Not Found');\n}\n\nexport function getOrderByToken(token: string): Promise<IOrder> {\n    const order = orders.find((x) => x.token === token);\n\n    if (order) {\n        return Promise.resolve(order);\n    }\n\n    return error('Page Not Found');\n}\n"]},"metadata":{},"sourceType":"module"}