{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shbaita Studio\\\\Documents\\\\project\\\\new1\\\\themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template\\\\Sources\\\\src\\\\services\\\\sidebar.tsx\";\nvar __jsx = React.createElement;\n// react\nimport React, { useMemo, useState } from 'react';\nexport const SidebarContext = React.createContext([false, () => {}]);\nexport function SidebarProvider({\n  children\n}) {\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const value = useMemo(() => [isOpen, setIsOpen], [isOpen, setIsOpen]);\n  return __jsx(SidebarContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, children);\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/services/sidebar.tsx"],"names":["React","useMemo","useState","SidebarContext","createContext","SidebarProvider","children","isOpen","setIsOpen","value"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAmCC,OAAnC,EAA4CC,QAA5C,QAA4D,OAA5D;AAIA,OAAO,MAAMC,cAAc,GAAGH,KAAK,CAACI,aAAN,CAAiC,CAAC,KAAD,EAAQ,MAAM,CAAE,CAAhB,CAAjC,CAAvB;AAIP,OAAO,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAA8C;AACjD,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBN,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMO,KAAK,GAAGR,OAAO,CAAC,MAAM,CAACM,MAAD,EAASC,SAAT,CAAP,EAAqC,CAACD,MAAD,EAASC,SAAT,CAArC,CAArB;AAEA,SACI,MAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,QADL,CADJ;AAKH","sourcesContent":["// react\nimport React, { PropsWithChildren, useMemo, useState } from 'react';\n\ntype ContextData = readonly [boolean, (state: boolean) => void];\n\nexport const SidebarContext = React.createContext<ContextData>([false, () => {}]);\n\ninterface Props extends PropsWithChildren<{}> {}\n\nexport function SidebarProvider({ children }: Props) {\n    const [isOpen, setIsOpen] = useState(false);\n    const value = useMemo(() => [isOpen, setIsOpen] as const, [isOpen, setIsOpen]);\n\n    return (\n        <SidebarContext.Provider value={value}>\n            {children}\n        </SidebarContext.Provider>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}