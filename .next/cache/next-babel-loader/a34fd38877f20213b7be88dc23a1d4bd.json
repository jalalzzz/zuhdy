{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport React, { useEffect, useMemo, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useFormContext } from 'react-hook-form'; // application\n\nimport { countriesApi } from '~/api';\nimport { useDetachableForm } from '~/services/hooks';\nimport { validateEmail } from '~/services/validators';\nexport function getAddressFormDefaultValue(initialData = null) {\n  return _objectSpread({\n    firstName: '',\n    lastName: '',\n    company: '',\n    country: '',\n    address1: '',\n    address2: '',\n    city: '',\n    state: '',\n    postcode: '',\n    email: '',\n    phone: ''\n  }, initialData);\n}\n\nfunction AddressForm(props) {\n  var _errors$firstName, _errors$lastName, _errors$country, _errors$address, _errors$city, _errors$state, _errors$postcode, _errors$email, _errors$email2, _errors$phone;\n\n  const {\n    namespace,\n    disabled,\n    idPrefix\n  } = props;\n  const intl = useIntl();\n  const formMethods = useFormContext();\n  const {\n    errors: errorsProps\n  } = formMethods;\n  const errors = namespace ? errorsProps[namespace] : errorsProps;\n  const fieldId = idPrefix ? `${idPrefix}-` : '';\n  const ns = useMemo(() => namespace ? `${namespace}.` : '', [namespace]);\n  const {\n    0: countries,\n    1: setCountries\n  } = useState(null);\n  const register = useDetachableForm(formMethods, disabled || false); // Load countries.\n\n  useEffect(() => {\n    let canceled = false;\n    countriesApi.getCountries().then(result => {\n      if (canceled) {\n        return;\n      }\n\n      setCountries(result);\n    });\n    return () => {\n      canceled = true;\n    };\n  }, []);\n\n  if (countries === null) {\n    return null;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"form-row\"\n  }, __jsx(\"div\", {\n    className: \"form-group col-md-6\"\n  }, __jsx(\"label\", {\n    htmlFor: `${fieldId}first-name`\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_FIRST_NAME_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: `${fieldId}first-name`,\n    name: `${ns}firstName`,\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.firstName\n    }),\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_FIRST_NAME_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$firstName = errors.firstName) === null || _errors$firstName === void 0 ? void 0 : _errors$firstName.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group col-md-6\"\n  }, __jsx(\"label\", {\n    htmlFor: `${fieldId}last-name`\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_LAST_NAME_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: `${fieldId}last-name`,\n    name: `${ns}lastName`,\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.lastName\n    }),\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_LAST_NAME_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$lastName = errors.lastName) === null || _errors$lastName === void 0 ? void 0 : _errors$lastName.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  })))), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: `${fieldId}company-name`\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_COMPANY_LABEL\"\n  }), __jsx(\"span\", {\n    className: \"text-muted\"\n  }, ' (', __jsx(FormattedMessage, {\n    id: \"TEXT_OPTIONAL\"\n  }), \")\")), __jsx(\"input\", {\n    type: \"text\",\n    id: `${fieldId}company-name`,\n    name: `${ns}company`,\n    className: \"form-control\",\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_COMPANY_PLACEHOLDER'\n    }),\n    ref: register()\n  })), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: `${fieldId}country`\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_COUNTRY_LABEL\"\n  })), __jsx(\"select\", {\n    id: `${fieldId}country`,\n    name: `${ns}country`,\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.country\n    }),\n    disabled: disabled,\n    ref: register({\n      required: true\n    })\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, intl.formatMessage({\n    id: 'INPUT_COUNTRY_PLACEHOLDER'\n  })), countries && countries.map(country => __jsx(\"option\", {\n    key: country.code,\n    value: country.code\n  }, intl.formatMessage({\n    id: `COUNTRY_NAME_${country.code}`\n  })))), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$country = errors.country) === null || _errors$country === void 0 ? void 0 : _errors$country.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: `${fieldId}address1`\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_STREET_ADDRESS_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: `${fieldId}address1`,\n    name: `${ns}address1`,\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.address1\n    }),\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_STREET_ADDRESS_PLACEHOLDER_1'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$address = errors.address1) === null || _errors$address === void 0 ? void 0 : _errors$address.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  })), __jsx(\"label\", {\n    htmlFor: `${fieldId}address2`,\n    className: \"sr-only\"\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_STREET_ADDRESS_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: `${fieldId}address2`,\n    name: `${ns}address2`,\n    className: \"form-control mt-2\",\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_STREET_ADDRESS_PLACEHOLDER_2'\n    }),\n    ref: register()\n  })), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: `${fieldId}city`\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_CITY_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: `${fieldId}city`,\n    name: `${ns}city`,\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.city\n    }),\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_CITY_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$city = errors.city) === null || _errors$city === void 0 ? void 0 : _errors$city.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: `${fieldId}state`\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_STATE_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: `${fieldId}state`,\n    name: `${ns}state`,\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.state\n    }),\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_STATE_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$state = errors.state) === null || _errors$state === void 0 ? void 0 : _errors$state.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", {\n    htmlFor: `${fieldId}postcode`\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_POSTCODE_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: `${fieldId}postcode`,\n    name: `${ns}postcode`,\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.postcode\n    }),\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_POSTCODE_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$postcode = errors.postcode) === null || _errors$postcode === void 0 ? void 0 : _errors$postcode.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }))), __jsx(\"div\", {\n    className: \"form-row\"\n  }, __jsx(\"div\", {\n    className: \"form-group col-md-6 mb-0\"\n  }, __jsx(\"label\", {\n    htmlFor: `${fieldId}email`\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_EMAIL_ADDRESS_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"email\",\n    id: `${fieldId}email`,\n    name: `${ns}email`,\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.email\n    }),\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_EMAIL_ADDRESS_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true,\n      validate: {\n        email: validateEmail\n      }\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  }), (errors === null || errors === void 0 ? void 0 : (_errors$email2 = errors.email) === null || _errors$email2 === void 0 ? void 0 : _errors$email2.type) === 'email' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_INCORRECT_EMAIL\"\n  }))), __jsx(\"div\", {\n    className: \"form-group col-md-6 mb-0\"\n  }, __jsx(\"label\", {\n    htmlFor: `${fieldId}phone`\n  }, __jsx(FormattedMessage, {\n    id: \"INPUT_PHONE_NUMBER_LABEL\"\n  })), __jsx(\"input\", {\n    type: \"text\",\n    id: `${fieldId}phone`,\n    name: `${ns}phone`,\n    className: classNames('form-control', {\n      'is-invalid': errors === null || errors === void 0 ? void 0 : errors.phone\n    }),\n    disabled: disabled,\n    placeholder: intl.formatMessage({\n      id: 'INPUT_PHONE_NUMBER_PLACEHOLDER'\n    }),\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, (errors === null || errors === void 0 ? void 0 : (_errors$phone = errors.phone) === null || _errors$phone === void 0 ? void 0 : _errors$phone.type) === 'required' && __jsx(FormattedMessage, {\n    id: \"ERROR_FORM_REQUIRED\"\n  })))));\n}\n\nexport default AddressForm;","map":null,"metadata":{},"sourceType":"module"}