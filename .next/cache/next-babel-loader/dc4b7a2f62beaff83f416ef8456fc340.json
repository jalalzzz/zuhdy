{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// application\nimport { addresses, getNextAddressId } from '~/fake-server/database/addresses';\nimport { clone, delayResponse } from '~/fake-server/utils';\nexport function getDefaultAddress() {\n  return Promise.resolve(clone(addresses.find(x => x.default) || null));\n}\nexport function getAddress(addressId) {\n  return Promise.resolve(clone(addresses.find(x => x.id === addressId) || null));\n}\nexport function getAddresses() {\n  return Promise.resolve(clone(addresses));\n}\nexport function addAddress(data) {\n  const address = _objectSpread({\n    id: getNextAddressId(),\n    firstName: '',\n    lastName: '',\n    company: '',\n    country: '',\n    address1: '',\n    address2: '',\n    city: '',\n    state: '',\n    postcode: '',\n    email: '',\n    phone: '',\n    default: false\n  }, data);\n\n  if (addresses.length < 1) {\n    address.default = true;\n  }\n\n  if (address.default) {\n    for (let i = 0; i < addresses.length; i += 1) {\n      addresses[i].default = false;\n    }\n  }\n\n  addresses.push(address);\n  return delayResponse(Promise.resolve(address));\n} // noinspection DuplicatedCode\n\nexport function editAddress(addressId, data) {\n  const address = addresses.find(x => x.id === addressId);\n\n  if (!address) {\n    throw new Error('Address not found');\n  }\n\n  address.firstName = data.firstName;\n  address.lastName = data.lastName;\n  address.company = data.company;\n  address.country = data.country;\n  address.address1 = data.address1;\n  address.address2 = data.address2;\n  address.city = data.city;\n  address.state = data.state;\n  address.postcode = data.postcode;\n  address.email = data.email;\n  address.phone = data.phone;\n  address.default = data.default;\n\n  if (address.default) {\n    for (let i = 0; i < addresses.length; i += 1) {\n      addresses[i].default = addresses[i].id === addressId;\n    }\n  }\n\n  return delayResponse(Promise.resolve(address));\n}\nexport function delAddress(addressId) {\n  const index = addresses.findIndex(x => x.id === addressId);\n\n  if (index !== -1) {\n    const address = addresses.splice(index, 1)[0];\n\n    if (address.default && addresses.length > 0) {\n      addresses[0].default = true;\n    }\n  }\n\n  return delayResponse(Promise.resolve());\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/fake-server/endpoints/addresses.ts"],"names":["addresses","getNextAddressId","clone","delayResponse","getDefaultAddress","Promise","resolve","find","x","default","getAddress","addressId","id","getAddresses","addAddress","data","address","firstName","lastName","company","country","address1","address2","city","state","postcode","email","phone","length","i","push","editAddress","Error","delAddress","index","findIndex","splice"],"mappings":"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","sourcesContent":["// application\nimport { addresses, getNextAddressId } from '~/fake-server/database/addresses';\nimport { clone, delayResponse } from '~/fake-server/utils';\nimport { IAddress } from '~/interfaces/address';\nimport { IEditAddressData } from '~/api/base';\n\nexport function getDefaultAddress(): Promise<IAddress> {\n    return Promise.resolve(clone(addresses.find((x) => x.default) || null));\n}\n\nexport function getAddress(addressId: number): Promise<IAddress> {\n    return Promise.resolve(clone(addresses.find((x) => x.id === addressId) || null));\n}\n\nexport function getAddresses(): Promise<IAddress[]> {\n    return Promise.resolve(clone(addresses));\n}\n\nexport function addAddress(data: Partial<IEditAddressData>): Promise<IAddress> {\n    const address: IAddress = {\n        id: getNextAddressId(),\n        firstName: '',\n        lastName: '',\n        company: '',\n        country: '',\n        address1: '',\n        address2: '',\n        city: '',\n        state: '',\n        postcode: '',\n        email: '',\n        phone: '',\n        default: false,\n        ...data,\n    };\n\n    if (addresses.length < 1) {\n        address.default = true;\n    }\n\n    if (address.default) {\n        for (let i = 0; i < addresses.length; i += 1) {\n            addresses[i].default = false;\n        }\n    }\n\n    addresses.push(address);\n\n    return delayResponse(Promise.resolve(address));\n}\n\n// noinspection DuplicatedCode\nexport function editAddress(addressId: number, data: IEditAddressData): Promise<IAddress> {\n    const address = addresses.find((x) => x.id === addressId);\n\n    if (!address) {\n        throw new Error('Address not found');\n    }\n\n    address.firstName = data.firstName;\n    address.lastName = data.lastName;\n    address.company = data.company;\n    address.country = data.country;\n    address.address1 = data.address1;\n    address.address2 = data.address2;\n    address.city = data.city;\n    address.state = data.state;\n    address.postcode = data.postcode;\n    address.email = data.email;\n    address.phone = data.phone;\n    address.default = data.default;\n\n    if (address.default) {\n        for (let i = 0; i < addresses.length; i += 1) {\n            addresses[i].default = addresses[i].id === addressId;\n        }\n    }\n\n    return delayResponse(Promise.resolve(address));\n}\n\nexport function delAddress(addressId: number): Promise<void> {\n    const index = addresses.findIndex((x) => x.id === addressId);\n\n    if (index !== -1) {\n        const address = addresses.splice(index, 1)[0];\n\n        if (address.default && addresses.length > 0) {\n            addresses[0].default = true;\n        }\n    }\n\n    return delayResponse(Promise.resolve());\n}\n"]},"metadata":{},"sourceType":"module"}