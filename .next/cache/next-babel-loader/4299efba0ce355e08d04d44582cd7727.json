{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shbaita Studio\\\\Documents\\\\project\\\\new1\\\\themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template\\\\Sources\\\\src\\\\components\\\\header\\\\Dropdown.tsx\";\nvar __jsx = React.createElement;\n// react\nimport React, { useRef, useState } from 'react'; // third-party\n\nimport classNames from 'classnames'; // application\n\nimport AppImage from '~/components/shared/AppImage';\nimport { ArrowDownSm7x5Svg } from '~/svg';\nimport { useGlobalMousedown } from '~/services/hooks';\n\nfunction Dropdown(props) {\n  const {\n    label,\n    title,\n    items = [],\n    onItemClick\n  } = props;\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const rootRef = useRef(null);\n  const hasLabel = !!label;\n  const hasTitle = !!title;\n  const classes = classNames('topbar__item-button topbar__menu', {\n    'topbar__menu--open': isOpen\n  });\n\n  const handleButtonClick = () => {\n    setIsOpen(prev => !prev);\n  };\n\n  const handleItemClick = item => {\n    setIsOpen(false);\n\n    if (onItemClick) {\n      onItemClick(item);\n    }\n  };\n\n  useGlobalMousedown(event => {\n    if (rootRef.current && !rootRef.current.contains(event.target)) {\n      setIsOpen(false);\n    }\n  }, [setIsOpen, rootRef]);\n  return __jsx(\"div\", {\n    className: classes,\n    ref: rootRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, __jsx(\"button\", {\n    className: \"topbar__button topbar__button--has-arrow topbar__menu-button\",\n    type: \"button\",\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, hasLabel && __jsx(\"span\", {\n    className: \"topbar__button-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 30\n    }\n  }, label), hasTitle && __jsx(\"span\", {\n    className: \"topbar__button-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 30\n    }\n  }, title), __jsx(\"span\", {\n    className: \"topbar__button-arrow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, __jsx(ArrowDownSm7x5Svg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }))), __jsx(\"div\", {\n    className: \"topbar__menu-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, items.map((item, index) => __jsx(\"button\", {\n    key: index,\n    className: \"topbar__menu-item\",\n    type: \"button\",\n    onClick: () => handleItemClick(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, !!item.image && __jsx(AppImage, {\n    src: item.image,\n    alt: item.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }\n  }), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }, item.title)))));\n}\n\nexport default Dropdown;","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/components/header/Dropdown.tsx"],"names":["React","useRef","useState","classNames","AppImage","ArrowDownSm7x5Svg","useGlobalMousedown","Dropdown","props","label","title","items","onItemClick","isOpen","setIsOpen","rootRef","hasLabel","hasTitle","classes","handleButtonClick","prev","handleItemClick","item","event","current","contains","target","map","index","image"],"mappings":"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","sourcesContent":["// react\nimport React, { PropsWithChildren, useRef, useState } from 'react';\n// third-party\nimport classNames from 'classnames';\n// application\nimport AppImage from '~/components/shared/AppImage';\nimport { ArrowDownSm7x5Svg } from '~/svg';\nimport { useGlobalMousedown } from '~/services/hooks';\n\nexport interface IDropdownItem {\n    title: string;\n    image?: string;\n}\n\ninterface Props<T extends IDropdownItem> extends PropsWithChildren<{}> {\n    label?: React.ReactNode;\n    title?: React.ReactNode;\n    items?: T[];\n    onItemClick?: (item: T) => void;\n}\n\nfunction Dropdown<T extends IDropdownItem>(props: Props<T>) {\n    const {\n        label,\n        title,\n        items = [],\n        onItemClick,\n    } = props;\n    const [isOpen, setIsOpen] = useState(false);\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const hasLabel = !!label;\n    const hasTitle = !!title;\n\n    const classes = classNames('topbar__item-button topbar__menu', {\n        'topbar__menu--open': isOpen,\n    });\n\n    const handleButtonClick = () => {\n        setIsOpen((prev) => !prev);\n    };\n\n    const handleItemClick = (item: T) => {\n        setIsOpen(false);\n\n        if (onItemClick) {\n            onItemClick(item);\n        }\n    };\n\n    useGlobalMousedown((event) => {\n        if (rootRef.current && !rootRef.current.contains(event.target as HTMLElement)) {\n            setIsOpen(false);\n        }\n    }, [setIsOpen, rootRef]);\n\n    return (\n        <div className={classes} ref={rootRef}>\n            <button\n                className=\"topbar__button topbar__button--has-arrow topbar__menu-button\"\n                type=\"button\"\n                onClick={handleButtonClick}\n            >\n                {hasLabel && <span className=\"topbar__button-label\">{label}</span>}\n                {hasTitle && <span className=\"topbar__button-title\">{title}</span>}\n                <span className=\"topbar__button-arrow\">\n                    <ArrowDownSm7x5Svg />\n                </span>\n            </button>\n            <div className=\"topbar__menu-body\">\n                {items.map((item, index) => (\n                    <button\n                        key={index}\n                        className=\"topbar__menu-item\"\n                        type=\"button\"\n                        onClick={() => handleItemClick(item)}\n                    >\n                        {!!item.image && (\n                            <AppImage src={item.image} alt={item.title} />\n                        )}\n                        <span>{item.title}</span>\n                    </button>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}