{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// application\nimport { withClientState } from '~/store/client';\nimport { COMPARE_ADD_ITEM, COMPARE_CLEAR, COMPARE_REMOVE_ITEM } from '~/store/compare/compareActionTypes';\n\nfunction addItem(state, product) {\n  const itemIndex = state.items.findIndex(x => x.id === product.id);\n\n  if (itemIndex === -1) {\n    return {\n      items: [...state.items, JSON.parse(JSON.stringify(product))]\n    };\n  }\n\n  return state;\n}\n\nfunction removeItem(state, productId) {\n  return {\n    items: state.items.filter(x => x.id !== productId)\n  };\n}\n\nfunction clear(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    items: []\n  });\n}\n\nconst initialState = {\n  items: []\n};\nexport const COMPARE_NAMESPACE = 'compare';\n\nfunction compareBaseReducer(state = initialState, action) {\n  switch (action.type) {\n    case COMPARE_ADD_ITEM:\n      return addItem(state, action.product);\n\n    case COMPARE_REMOVE_ITEM:\n      return removeItem(state, action.productId);\n\n    case COMPARE_CLEAR:\n      return clear(state);\n\n    default:\n      return state;\n  }\n}\n\nconst compareReducer = withClientState(compareBaseReducer, COMPARE_NAMESPACE);\nexport default compareReducer;","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/store/compare/compareReducer.ts"],"names":["withClientState","COMPARE_ADD_ITEM","COMPARE_CLEAR","COMPARE_REMOVE_ITEM","addItem","state","product","itemIndex","items","findIndex","x","id","JSON","parse","stringify","removeItem","productId","filter","clear","initialState","COMPARE_NAMESPACE","compareBaseReducer","action","type","compareReducer"],"mappings":";;;;;;AAAA;AAGA,SAASA,eAAT,QAAgC,gBAAhC;AACA,SACIC,gBADJ,EAEIC,aAFJ,EAGIC,mBAHJ,QAKO,oCALP;;AAOA,SAASC,OAAT,CAAiBC,KAAjB,EAAuCC,OAAvC,EAAyE;AACrE,QAAMC,SAAS,GAAGF,KAAK,CAACG,KAAN,CAAYC,SAAZ,CAAuBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASL,OAAO,CAACK,EAA9C,CAAlB;;AAEA,MAAIJ,SAAS,KAAK,CAAC,CAAnB,EAAsB;AAClB,WAAO;AACHC,MAAAA,KAAK,EAAE,CACH,GAAGH,KAAK,CAACG,KADN,EAEHI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeR,OAAf,CAAX,CAFG;AADJ,KAAP;AAMH;;AAED,SAAOD,KAAP;AACH;;AAED,SAASU,UAAT,CAAoBV,KAApB,EAA0CW,SAA1C,EAA4E;AACxE,SAAO;AACHR,IAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYS,MAAZ,CAAoBP,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASK,SAAnC;AADJ,GAAP;AAGH;;AAED,SAASE,KAAT,CAAeb,KAAf,EAAoD;AAChD,yCACOA,KADP;AAEIG,IAAAA,KAAK,EAAE;AAFX;AAIH;;AAED,MAAMW,YAA2B,GAAG;AAChCX,EAAAA,KAAK,EAAE;AADyB,CAApC;AAIA,OAAO,MAAMY,iBAAiB,GAAG,SAA1B;;AAEP,SAASC,kBAAT,CAA4BhB,KAAK,GAAGc,YAApC,EAAkDG,MAAlD,EAAyE;AACrE,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKtB,gBAAL;AACI,aAAOG,OAAO,CAACC,KAAD,EAAQiB,MAAM,CAAChB,OAAf,CAAd;;AAEJ,SAAKH,mBAAL;AACI,aAAOY,UAAU,CAACV,KAAD,EAAQiB,MAAM,CAACN,SAAf,CAAjB;;AAEJ,SAAKd,aAAL;AACI,aAAOgB,KAAK,CAACb,KAAD,CAAZ;;AAEJ;AACI,aAAOA,KAAP;AAXJ;AAaH;;AAED,MAAMmB,cAAc,GAAGxB,eAAe,CAACqB,kBAAD,EAAqBD,iBAArB,CAAtC;AAEA,eAAeI,cAAf","sourcesContent":["// application\nimport { ICompareState } from '~/store/compare/compareTypes';\nimport { IProduct } from '~/interfaces/product';\nimport { withClientState } from '~/store/client';\nimport {\n    COMPARE_ADD_ITEM,\n    COMPARE_CLEAR,\n    COMPARE_REMOVE_ITEM,\n    CompareAction,\n} from '~/store/compare/compareActionTypes';\n\nfunction addItem(state: ICompareState, product: IProduct): ICompareState {\n    const itemIndex = state.items.findIndex((x) => x.id === product.id);\n\n    if (itemIndex === -1) {\n        return {\n            items: [\n                ...state.items,\n                JSON.parse(JSON.stringify(product)),\n            ],\n        };\n    }\n\n    return state;\n}\n\nfunction removeItem(state: ICompareState, productId: number): ICompareState {\n    return {\n        items: state.items.filter((x) => x.id !== productId),\n    };\n}\n\nfunction clear(state: ICompareState): ICompareState {\n    return {\n        ...state,\n        items: [],\n    };\n}\n\nconst initialState: ICompareState = {\n    items: [],\n};\n\nexport const COMPARE_NAMESPACE = 'compare';\n\nfunction compareBaseReducer(state = initialState, action: CompareAction) {\n    switch (action.type) {\n    case COMPARE_ADD_ITEM:\n        return addItem(state, action.product);\n\n    case COMPARE_REMOVE_ITEM:\n        return removeItem(state, action.productId);\n\n    case COMPARE_CLEAR:\n        return clear(state);\n\n    default:\n        return state;\n    }\n}\n\nconst compareReducer = withClientState(compareBaseReducer, COMPARE_NAMESPACE);\n\nexport default compareReducer;\n"]},"metadata":{},"sourceType":"module"}