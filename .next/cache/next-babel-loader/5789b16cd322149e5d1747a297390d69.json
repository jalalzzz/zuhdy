{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/prefer-default-export,class-methods-use-this */\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { products as dbProducts } from '~/fake-server/database/products';\nconst colors = [{\n  code: 'white',\n  color: '#fff'\n}, {\n  code: 'silver',\n  color: '#d9d9d9'\n}, {\n  code: 'light-gray',\n  color: '#b3b3b3'\n}, {\n  code: 'gray',\n  color: '#808080'\n}, {\n  code: 'dark-gray',\n  color: '#666'\n}, {\n  code: 'coal',\n  color: '#4d4d4d'\n}, {\n  code: 'black',\n  color: '#262626'\n}, {\n  code: 'red',\n  color: '#ff4040'\n}, {\n  code: 'orange',\n  color: '#ff8126'\n}, {\n  code: 'yellow',\n  color: '#ffd333'\n}, {\n  code: 'pear-green',\n  color: '#becc1f'\n}, {\n  code: 'green',\n  color: '#8fcc14'\n}, {\n  code: 'emerald',\n  color: '#47cc5e'\n}, {\n  code: 'shamrock',\n  color: '#47cca0'\n}, {\n  code: 'shakespeare',\n  color: '#47cccc'\n}, {\n  code: 'blue',\n  color: '#40bfff'\n}, {\n  code: 'dark-blue',\n  color: '#3d6dcc'\n}, {\n  code: 'violet',\n  color: '#7766cc'\n}, {\n  code: 'purple',\n  color: '#b852cc'\n}, {\n  code: 'cerise',\n  color: '#e53981'\n}];\nexport class ColorFilterBuilder extends AbstractFilterBuilder {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"value\", []);\n  }\n\n  test(product) {\n    if (this.value.length === 0) {\n      return true;\n    }\n\n    return this.value.reduce((result, value) => result || this.extractItems(product).map(x => x.slug).includes(value), false);\n  } // noinspection DuplicatedCode\n\n\n  makeItems(products, value) {\n    products.forEach(product => this.extractItems(product).forEach(item => {\n      if (!this.items.find(x => x.slug === item.slug)) {\n        this.items.push(item);\n      }\n    }));\n    this.value = this.parseValue(value);\n  } // noinspection DuplicatedCode\n\n\n  calc(filters) {\n    const products = dbProducts.filter(product => filters.reduce((isMatched, filter) => isMatched && (filter === this || filter.test(product)), true));\n    this.items = this.items.map(item => _objectSpread(_objectSpread({}, item), {}, {\n      count: products.reduce((acc, product) => acc + (this.extractItems(product).map(x => x.slug).includes(item.slug) ? 1 : 0), 0)\n    }));\n    this.items = this.items.sort((a, b) => colors.findIndex(x => x.code === a.slug) - colors.findIndex(x => x.code === b.slug));\n  }\n\n  build() {\n    return {\n      type: 'color',\n      slug: this.slug,\n      name: this.name,\n      items: this.items,\n      value: this.value\n    };\n  } // noinspection JSMethodCanBeStatic\n\n\n  parseValue(value) {\n    return value ? value.split(',') : [];\n  }\n\n  extractItems(product) {\n    const attribute = product.attributes.find(x => x.slug === this.slug);\n\n    if (!attribute) {\n      return [];\n    }\n\n    return attribute.values.map(value => ({\n      slug: value.slug,\n      name: value.name,\n      color: this.getColorCode(value.slug),\n      count: 0\n    }));\n  }\n\n  getColorCode(slug) {\n    var _colors$find;\n\n    return ((_colors$find = colors.find(x => x.code === slug)) === null || _colors$find === void 0 ? void 0 : _colors$find.color) || '#000';\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/fake-server/filters/color-filter-builder.ts"],"names":["AbstractFilterBuilder","products","dbProducts","colors","code","color","ColorFilterBuilder","test","product","value","length","reduce","result","extractItems","map","x","slug","includes","makeItems","forEach","item","items","find","push","parseValue","calc","filters","filter","isMatched","count","acc","sort","a","b","findIndex","build","type","name","split","attribute","attributes","values","getColorCode"],"mappings":"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","sourcesContent":["/* eslint-disable import/prefer-default-export,class-methods-use-this */\n\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { IColorFilter, IColorFilterItem } from '~/interfaces/filter';\nimport { IProduct } from '~/interfaces/product';\nimport { products as dbProducts } from '~/fake-server/database/products';\n\nconst colors = [\n    { code: 'white', color: '#fff' },\n    { code: 'silver', color: '#d9d9d9' },\n    { code: 'light-gray', color: '#b3b3b3' },\n    { code: 'gray', color: '#808080' },\n    { code: 'dark-gray', color: '#666' },\n    { code: 'coal', color: '#4d4d4d' },\n    { code: 'black', color: '#262626' },\n    { code: 'red', color: '#ff4040' },\n    { code: 'orange', color: '#ff8126' },\n    { code: 'yellow', color: '#ffd333' },\n    { code: 'pear-green', color: '#becc1f' },\n    { code: 'green', color: '#8fcc14' },\n    { code: 'emerald', color: '#47cc5e' },\n    { code: 'shamrock', color: '#47cca0' },\n    { code: 'shakespeare', color: '#47cccc' },\n    { code: 'blue', color: '#40bfff' },\n    { code: 'dark-blue', color: '#3d6dcc' },\n    { code: 'violet', color: '#7766cc' },\n    { code: 'purple', color: '#b852cc' },\n    { code: 'cerise', color: '#e53981' },\n];\n\nexport class ColorFilterBuilder extends AbstractFilterBuilder {\n    private items: IColorFilterItem[] = [];\n\n    private value: string[] = [];\n\n    test(product: IProduct): boolean {\n        if (this.value.length === 0) {\n            return true;\n        }\n\n        return this.value.reduce<boolean>((result, value) => (\n            result || this.extractItems(product).map((x) => x.slug).includes(value)\n        ), false);\n    }\n\n    // noinspection DuplicatedCode\n    makeItems(products: IProduct[], value: string): void {\n        products.forEach((product) => this.extractItems(product).forEach((item) => {\n            if (!this.items.find((x) => x.slug === item.slug)) {\n                this.items.push(item);\n            }\n        }));\n\n        this.value = this.parseValue(value);\n    }\n\n    // noinspection DuplicatedCode\n    calc(filters: AbstractFilterBuilder[]): void {\n        const products = dbProducts.filter(\n            (product) => filters.reduce<boolean>(\n                (isMatched, filter) => (\n                    isMatched && (filter === this || filter.test(product))\n                ),\n                true,\n            ),\n        );\n\n        this.items = this.items.map((item) => ({\n            ...item,\n            count: products.reduce((acc, product) => (\n                acc + (this.extractItems(product).map((x) => x.slug).includes(item.slug) ? 1 : 0)\n            ), 0),\n        }));\n        this.items = this.items.sort((a, b) => (\n            colors.findIndex((x) => x.code === a.slug) - colors.findIndex((x) => x.code === b.slug)\n        ));\n    }\n\n    build(): IColorFilter {\n        return {\n            type: 'color',\n            slug: this.slug,\n            name: this.name,\n            items: this.items,\n            value: this.value,\n        };\n    }\n\n    // noinspection JSMethodCanBeStatic\n    private parseValue(value: string): string[] {\n        return value ? value.split(',') : [];\n    }\n\n    private extractItems(product: IProduct): IColorFilterItem[] {\n        const attribute = product.attributes.find((x) => x.slug === this.slug);\n\n        if (!attribute) {\n            return [];\n        }\n\n        return attribute.values.map((value) => ({\n            slug: value.slug,\n            name: value.name,\n            color: this.getColorCode(value.slug),\n            count: 0,\n        }));\n    }\n\n    private getColorCode(slug: string): string {\n        return colors.find((x) => x.code === slug)?.color || '#000';\n    }\n}\n"]},"metadata":{},"sourceType":"module"}