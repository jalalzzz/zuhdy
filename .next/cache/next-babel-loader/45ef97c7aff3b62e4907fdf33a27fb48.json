{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shbaita Studio\\\\Documents\\\\project\\\\new1\\\\themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template\\\\Sources\\\\src\\\\components\\\\mobile\\\\MobileMenuConveyor.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'; // application\n\nimport { MobileMenuContext } from '~/services/mobile-menu';\n\nfunction MobileMenuConveyor(props) {\n  const {\n    controllerRef,\n    children\n  } = props;\n  const ref = useRef(null);\n  const lastPanelIdRef = useRef(0);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    stack: [],\n    bin: []\n  });\n  const controller = useMemo(() => ({\n    reset: () => {\n      setState({\n        stack: [],\n        bin: []\n      });\n    }\n  }), []);\n  useEffect(() => {\n    if (controllerRef) {\n      if ('current' in controllerRef) {\n        controllerRef.current = controller;\n      } else {\n        controllerRef(controller);\n      }\n    }\n  }, [controller, controllerRef]);\n  const open = useCallback(id => {\n    setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      stack: [...prevState.stack, id]\n    }));\n  }, []);\n  const close = useCallback(() => {\n    setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      stack: [...prevState.stack.slice(0, -1)],\n      bin: [...prevState.bin, ...prevState.stack.slice(-1)]\n    }));\n  }, []);\n\n  const onTransitionEnd = event => {\n    if (event.target === ref.current && event.propertyName === 'transform') {\n      setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n        bin: []\n      }));\n    }\n  };\n\n  const contextData = useMemo(() => ({\n    lastPanelIdRef,\n    containerRef: ref,\n    open,\n    close,\n    stack: state.stack,\n    bin: state.bin\n  }), [ref, open, close, state.stack, state.bin]);\n  return __jsx(\"div\", {\n    ref: ref,\n    className: \"mobile-menu__conveyor\",\n    style: {\n      transform: `translateX(-${state.stack.length * 100}%)`\n    },\n    onTransitionEnd: onTransitionEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, __jsx(MobileMenuContext.Provider, {\n    value: contextData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, children));\n}\n\nexport default MobileMenuConveyor;","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/components/mobile/MobileMenuConveyor.tsx"],"names":["React","useCallback","useEffect","useMemo","useRef","useState","MobileMenuContext","MobileMenuConveyor","props","controllerRef","children","ref","lastPanelIdRef","state","setState","stack","bin","controller","reset","current","open","id","prevState","close","slice","onTransitionEnd","event","target","propertyName","contextData","containerRef","transform","length"],"mappings":"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","sourcesContent":["// react\nimport React, {\n    PropsWithChildren,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\n// application\nimport { MobileMenuContext } from '~/services/mobile-menu';\n\nexport interface IMobileMenuConveyorController {\n    reset: () => void;\n}\n\ninterface Props extends PropsWithChildren<{}> {\n    controllerRef?: React.RefCallback<IMobileMenuConveyorController | null>\n        | React.MutableRefObject<IMobileMenuConveyorController | null>;\n}\n\nfunction MobileMenuConveyor(props: Props) {\n    const { controllerRef, children } = props;\n    const ref = useRef<HTMLDivElement>(null);\n    const lastPanelIdRef = useRef<number>(0);\n    const [state, setState] = useState<{ stack: number[]; bin: number[] }>({\n        stack: [],\n        bin: [],\n    });\n\n    const controller: IMobileMenuConveyorController = useMemo(() => ({\n        reset: () => {\n            setState(({\n                stack: [],\n                bin: [],\n            }));\n        },\n    }), []);\n\n    useEffect(() => {\n        if (controllerRef) {\n            if ('current' in controllerRef) {\n                controllerRef.current = controller;\n            } else {\n                controllerRef(controller);\n            }\n        }\n    }, [controller, controllerRef]);\n\n    const open = useCallback((id: number) => {\n        setState((prevState) => ({\n            ...prevState,\n            stack: [...prevState.stack, id],\n        }));\n    }, []);\n\n    const close = useCallback(() => {\n        setState((prevState) => ({\n            ...prevState,\n            stack: [...prevState.stack.slice(0, -1)],\n            bin: [...prevState.bin, ...prevState.stack.slice(-1)],\n        }));\n    }, []);\n\n    const onTransitionEnd = (event: React.TransitionEvent) => {\n        if (event.target === ref.current && event.propertyName === 'transform') {\n            setState((prevState) => ({\n                ...prevState,\n                bin: [],\n            }));\n        }\n    };\n\n    const contextData = useMemo(() => ({\n        lastPanelIdRef,\n        containerRef: ref,\n        open,\n        close,\n        stack: state.stack,\n        bin: state.bin,\n    }), [ref, open, close, state.stack, state.bin]);\n\n    return (\n        <div\n            ref={ref}\n            className=\"mobile-menu__conveyor\"\n            style={{\n                transform: `translateX(-${state.stack.length * 100}%)`,\n            }}\n            onTransitionEnd={onTransitionEnd}\n        >\n            <MobileMenuContext.Provider value={contextData}>\n                {children}\n            </MobileMenuContext.Provider>\n        </div>\n    );\n}\n\nexport default MobileMenuConveyor;\n"]},"metadata":{},"sourceType":"module"}