{"ast":null,"code":"/**\n * https://medium.muz.li/the-science-of-color-contrast-an-expert-designers-guide-33e84c41d156\n * https://www.w3.org/TR/WCAG20-TECHS/G17.html\n * https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\nexport function hexToRgb(hex) {\n  if (!/^#(([A-Fa-f0-9]{3}){1,2})$/.test(hex)) {\n    throw Error('Invalid color');\n  }\n\n  var color = hex.substr(1);\n  var rgb;\n\n  if (color.length === 3) {\n    var mr = color.match(/./g);\n\n    if (!mr) {\n      throw Error('Invalid color');\n    }\n\n    rgb = mr.map(function (x) {\n      return x + x;\n    });\n  } else {\n    var _mr = color.match(/.{2}/g);\n\n    if (!_mr) {\n      throw Error('Invalid color');\n    }\n\n    rgb = _mr;\n  }\n\n  return rgb.map(function (x) {\n    return parseInt(x, 16);\n  });\n}\nexport function luminance(color) {\n  var rgb = hexToRgb(color);\n  rgb = rgb.map(function (x) {\n    return x / 255;\n  }).map(function (x) {\n    if (x <= 0.03928) {\n      return x / 12.92;\n    }\n\n    return Math.pow((x + 0.055) / 1.055, 2.4);\n  });\n  return 0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2];\n}\nexport function contrast(color1, color2) {\n  var l1 = luminance(color1);\n  var l2 = luminance(color2);\n  return (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05);\n}\nvar cache = {};\nexport function colorType(color) {\n  if (color in cache) {\n    return cache[color];\n  }\n\n  var whiteContras = contrast(color, '#fff');\n  var blackContras = contrast(color, '#000');\n  var result;\n\n  if (whiteContras === 1 && blackContras === 21) {\n    result = 'white';\n  } else if (whiteContras === 21 && blackContras === 1) {\n    result = 'black';\n  } else if (whiteContras >= 3 && blackContras < 10) {\n    result = 'dark';\n  } else {\n    result = 'light';\n  }\n\n  cache[color] = result;\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/services/color.ts"],"names":["hexToRgb","hex","test","Error","color","substr","rgb","length","mr","match","map","x","parseInt","luminance","contrast","color1","color2","l1","l2","Math","max","min","cache","colorType","whiteContras","blackContras","result"],"mappings":"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","sourcesContent":["/**\n * https://medium.muz.li/the-science-of-color-contrast-an-expert-designers-guide-33e84c41d156\n * https://www.w3.org/TR/WCAG20-TECHS/G17.html\n * https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\n\ntype RGB = [number, number, number];\n\ntype ColorType = 'white' | 'black' | 'light' | 'dark';\n\ninterface Cache {\n    [color: string]: ColorType;\n}\n\nexport function hexToRgb(hex: string): RGB {\n    if (!/^#(([A-Fa-f0-9]{3}){1,2})$/.test(hex)) {\n        throw Error('Invalid color');\n    }\n\n    const color = hex.substr(1);\n    let rgb: string[];\n\n    if (color.length === 3) {\n        const mr = color.match(/./g);\n\n        if (!mr) {\n            throw Error('Invalid color');\n        }\n\n        rgb = mr.map((x) => x + x);\n    } else {\n        const mr = color.match(/.{2}/g);\n\n        if (!mr) {\n            throw Error('Invalid color');\n        }\n\n        rgb = mr;\n    }\n\n    return rgb.map((x) => parseInt(x, 16)) as RGB;\n}\n\nexport function luminance(color: string) {\n    let rgb = hexToRgb(color);\n\n    rgb = rgb.map((x) => x / 255).map((x) => {\n        if (x <= 0.03928) {\n            return x / 12.92;\n        }\n\n        return ((x + 0.055) / 1.055) ** 2.4;\n    }) as RGB;\n\n    return 0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2];\n}\n\nexport function contrast(color1: string, color2: string) {\n    const l1 = luminance(color1);\n    const l2 = luminance(color2);\n\n    return (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05);\n}\n\nconst cache: Cache = {};\n\nexport function colorType(color: string): ColorType {\n    if (color in cache) {\n        return cache[color];\n    }\n\n    const whiteContras = contrast(color, '#fff');\n    const blackContras = contrast(color, '#000');\n    let result: ColorType;\n\n    if (whiteContras === 1 && blackContras === 21) {\n        result = 'white';\n    } else if (whiteContras === 21 && blackContras === 1) {\n        result = 'black';\n    } else if (whiteContras >= 3 && blackContras < 10) {\n        result = 'dark';\n    } else {\n        result = 'light';\n    }\n\n    cache[color] = result;\n\n    return result;\n}\n"]},"metadata":{},"sourceType":"module"}