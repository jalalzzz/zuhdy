{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shbaita Studio\\\\Documents\\\\project\\\\new1\\\\themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template\\\\Sources\\\\src\\\\components\\\\header\\\\Indicator.tsx\";\nvar __jsx = React.createElement;\n// react\nimport React, { useMemo, useRef, useState } from 'react'; // third-party\n\nimport classNames from 'classnames'; // application\n\nimport AppLink from '~/components/shared/AppLink';\nimport { useGlobalMousedown } from '~/services/hooks';\n\nfunction Indicator(props) {\n  const {\n    icon,\n    href,\n    label,\n    value,\n    counter,\n    trigger = 'none',\n    children,\n    controllerRef\n  } = props;\n  const hasLabel = label !== undefined && label !== null;\n  const hasValue = value !== undefined && value !== null;\n  const buttonType = href !== undefined ? 'link' : 'button';\n  const showCounter = counter !== undefined && counter !== null;\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const rootRef = useRef(null);\n  const controller = useMemo(() => ({\n    close: () => setIsOpen(false)\n  }), [setIsOpen]);\n\n  if (controllerRef) {\n    controllerRef.current = controller;\n  }\n\n  useGlobalMousedown(event => {\n    if (rootRef.current && !rootRef.current.contains(event.target)) {\n      setIsOpen(false);\n    }\n  }, [setIsOpen, rootRef]);\n\n  const handleButtonClick = event => {\n    if (trigger === 'click') {\n      event.preventDefault();\n      setIsOpen(prevState => !prevState);\n    }\n  };\n\n  const buttonContent = __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    className: \"indicator__icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, icon, showCounter && __jsx(\"span\", {\n    className: \"indicator__counter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 33\n    }\n  }, counter)), hasLabel && __jsx(\"span\", {\n    className: \"indicator__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 26\n    }\n  }, label), hasValue && __jsx(\"span\", {\n    className: \"indicator__value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 26\n    }\n  }, value));\n\n  const rootClasses = classNames('indicator', `indicator--trigger--${trigger}`, {\n    'indicator--open': isOpen\n  });\n  return __jsx(\"div\", {\n    className: rootClasses,\n    ref: rootRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, buttonType === 'button' && __jsx(\"button\", {\n    className: \"indicator__button\",\n    type: \"button\",\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, buttonContent), buttonType === 'link' && __jsx(AppLink, {\n    href: href,\n    className: \"indicator__button\",\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, buttonContent), __jsx(\"div\", {\n    className: \"indicator__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, children));\n}\n\nexport default Indicator;","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/components/header/Indicator.tsx"],"names":["React","useMemo","useRef","useState","classNames","AppLink","useGlobalMousedown","Indicator","props","icon","href","label","value","counter","trigger","children","controllerRef","hasLabel","undefined","hasValue","buttonType","showCounter","isOpen","setIsOpen","rootRef","controller","close","current","event","contains","target","handleButtonClick","preventDefault","prevState","buttonContent","rootClasses"],"mappings":"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","sourcesContent":["// react\nimport React, {\n    PropsWithChildren,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\n// third-party\nimport classNames from 'classnames';\n// application\nimport AppLink, { IAppLinkHref } from '~/components/shared/AppLink';\nimport { useGlobalMousedown } from '~/services/hooks';\n\ntype Trigger = 'none' | 'click' | 'hover';\n\nexport interface IIndicatorController {\n    close: () => void;\n}\n\ninterface Props extends PropsWithChildren<{}> {\n    icon: React.ReactNode;\n    href?: IAppLinkHref;\n    label?: React.ReactNode;\n    value?: React.ReactNode;\n    counter?: number;\n    trigger?: Trigger;\n    controllerRef?: React.MutableRefObject<IIndicatorController | null>;\n}\n\nfunction Indicator(props: Props) {\n    const {\n        icon,\n        href,\n        label,\n        value,\n        counter,\n        trigger = 'none',\n        children,\n        controllerRef,\n    } = props;\n    const hasLabel = label !== undefined && label !== null;\n    const hasValue = value !== undefined && value !== null;\n    const buttonType = href !== undefined ? 'link' : 'button';\n    const showCounter = counter !== undefined && counter !== null;\n    const [isOpen, setIsOpen] = useState(false);\n    const rootRef = useRef<HTMLDivElement>(null);\n\n    const controller = useMemo<IIndicatorController>(() => ({\n        close: () => setIsOpen(false),\n    }), [setIsOpen]);\n\n    if (controllerRef) {\n        controllerRef.current = controller;\n    }\n\n    useGlobalMousedown((event) => {\n        if (rootRef.current && !rootRef.current.contains(event.target as HTMLElement)) {\n            setIsOpen(false);\n        }\n    }, [setIsOpen, rootRef]);\n\n    const handleButtonClick = (event: React.MouseEvent) => {\n        if (trigger === 'click') {\n            event.preventDefault();\n\n            setIsOpen((prevState) => !prevState);\n        }\n    };\n\n    const buttonContent = (\n        <React.Fragment>\n            <span className=\"indicator__icon\">\n                {icon}\n                {showCounter && <span className=\"indicator__counter\">{counter}</span>}\n            </span>\n\n            {hasLabel && <span className=\"indicator__title\">{label}</span>}\n            {hasValue && <span className=\"indicator__value\">{value}</span>}\n        </React.Fragment>\n    );\n\n    const rootClasses = classNames('indicator', `indicator--trigger--${trigger}`, {\n        'indicator--open': isOpen,\n    });\n\n    return (\n        <div className={rootClasses} ref={rootRef}>\n            {buttonType === 'button' && (\n                <button className=\"indicator__button\" type=\"button\" onClick={handleButtonClick}>\n                    {buttonContent}\n                </button>\n            )}\n            {buttonType === 'link' && (\n                <AppLink href={href} className=\"indicator__button\" onClick={handleButtonClick}>\n                    {buttonContent}\n                </AppLink>\n            )}\n            <div className=\"indicator__content\">\n                {children}\n            </div>\n        </div>\n    );\n}\n\nexport default Indicator;\n"]},"metadata":{},"sourceType":"module"}