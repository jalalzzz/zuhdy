{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/prefer-default-export,class-methods-use-this */\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { vehicles as dbVehicles } from '~/fake-server/database/vehicles';\nexport class VehicleFilterBuilder extends AbstractFilterBuilder {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"value\", null);\n\n    _defineProperty(this, \"vehicle\", null);\n  }\n\n  static testCompatibility(vehicle, product) {\n    if (product.compatibility === 'all') {\n      return true;\n    }\n\n    if (product.compatibility === 'unknown') {\n      return false;\n    }\n\n    return product.compatibility.includes(vehicle.id);\n  }\n\n  test(product) {\n    if (this.value) {\n      return this.vehicle !== null && VehicleFilterBuilder.testCompatibility(this.vehicle, product);\n    }\n\n    return true;\n  }\n\n  makeItems(products, value) {\n    this.vehicle = dbVehicles.find(x => x.id === parseFloat(value)) || null;\n    this.value = this.vehicle ? this.vehicle.id : null;\n  }\n\n  calc() {}\n\n  build() {\n    return {\n      type: 'vehicle',\n      slug: this.slug,\n      name: this.name,\n      value: this.value,\n      vehicle: this.vehicle\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/fake-server/filters/vehicle-filter-builder.ts"],"names":["AbstractFilterBuilder","vehicles","dbVehicles","VehicleFilterBuilder","testCompatibility","vehicle","product","compatibility","includes","id","test","value","makeItems","products","find","x","parseFloat","calc","build","type","slug","name"],"mappings":";;AAAA;AAEA;AACA,SAASA,qBAAT,QAAsC,+CAAtC;AAIA,SAASC,QAAQ,IAAIC,UAArB,QAAuC,iCAAvC;AAEA,OAAO,MAAMC,oBAAN,SAAmCH,qBAAnC,CAAyD;AAAA;AAAA;;AAAA,mCACvB,IADuB;;AAAA,qCAGzB,IAHyB;AAAA;;AAK5B,SAAjBI,iBAAiB,CAACC,OAAD,EAAoBC,OAApB,EAAgD;AAC5E,QAAIA,OAAO,CAACC,aAAR,KAA0B,KAA9B,EAAqC;AACjC,aAAO,IAAP;AACH;;AACD,QAAID,OAAO,CAACC,aAAR,KAA0B,SAA9B,EAAyC;AACrC,aAAO,KAAP;AACH;;AAED,WAAOD,OAAO,CAACC,aAAR,CAAsBC,QAAtB,CAA+BH,OAAO,CAACI,EAAvC,CAAP;AACH;;AAEDC,EAAAA,IAAI,CAACJ,OAAD,EAA6B;AAC7B,QAAI,KAAKK,KAAT,EAAgB;AACZ,aAAO,KAAKN,OAAL,KAAiB,IAAjB,IAAyBF,oBAAoB,CAACC,iBAArB,CAAuC,KAAKC,OAA5C,EAAqDC,OAArD,CAAhC;AACH;;AAED,WAAO,IAAP;AACH;;AAEDM,EAAAA,SAAS,CAACC,QAAD,EAAuBF,KAAvB,EAA4C;AACjD,SAAKN,OAAL,GAAeH,UAAU,CAACY,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACN,EAAF,KAASO,UAAU,CAACL,KAAD,CAA1C,KAAsD,IAArE;AACA,SAAKA,KAAL,GAAa,KAAKN,OAAL,GAAe,KAAKA,OAAL,CAAaI,EAA5B,GAAiC,IAA9C;AACH;;AAEDQ,EAAAA,IAAI,GAAS,CAAG;;AAEhBC,EAAAA,KAAK,GAAmB;AACpB,WAAO;AACHC,MAAAA,IAAI,EAAE,SADH;AAEHC,MAAAA,IAAI,EAAE,KAAKA,IAFR;AAGHC,MAAAA,IAAI,EAAE,KAAKA,IAHR;AAIHV,MAAAA,KAAK,EAAE,KAAKA,KAJT;AAKHN,MAAAA,OAAO,EAAE,KAAKA;AALX,KAAP;AAOH;;AAvC2D","sourcesContent":["/* eslint-disable import/prefer-default-export,class-methods-use-this */\n\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { IProduct } from '~/interfaces/product';\nimport { IVehicle } from '~/interfaces/vehicle';\nimport { IVehicleFilter, IVehicleFilterValue } from '~/interfaces/filter';\nimport { vehicles as dbVehicles } from '~/fake-server/database/vehicles';\n\nexport class VehicleFilterBuilder extends AbstractFilterBuilder {\n    private value: IVehicleFilterValue = null;\n\n    private vehicle: IVehicle | null = null;\n\n    private static testCompatibility(vehicle: IVehicle, product: IProduct): boolean {\n        if (product.compatibility === 'all') {\n            return true;\n        }\n        if (product.compatibility === 'unknown') {\n            return false;\n        }\n\n        return product.compatibility.includes(vehicle.id);\n    }\n\n    test(product: IProduct): boolean {\n        if (this.value) {\n            return this.vehicle !== null && VehicleFilterBuilder.testCompatibility(this.vehicle, product);\n        }\n\n        return true;\n    }\n\n    makeItems(products: IProduct[], value: string): void {\n        this.vehicle = dbVehicles.find((x) => x.id === parseFloat(value)) || null;\n        this.value = this.vehicle ? this.vehicle.id : null;\n    }\n\n    calc(): void { }\n\n    build(): IVehicleFilter {\n        return {\n            type: 'vehicle',\n            slug: this.slug,\n            name: this.name,\n            value: this.value,\n            vehicle: this.vehicle,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}