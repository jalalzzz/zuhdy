{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable import/prefer-default-export,class-methods-use-this */\n// application\nimport { AccountApi } from '~/api/base';\nimport { accountChangePassword, accountEditProfile, accountSignIn, accountSignOut, accountSignUp, addAddress as _addAddress, delAddress as _delAddress, editAddress as _editAddress, getAddress as _getAddress, getAddresses as _getAddresses, getDefaultAddress as _getDefaultAddress, getOrderById as _getOrderById, getOrderByToken as _getOrderByToken, getOrdersList as _getOrdersList } from '~/fake-server/endpoints';\nexport var FakeAccountApi = /*#__PURE__*/function (_AccountApi) {\n  _inherits(FakeAccountApi, _AccountApi);\n\n  var _super = _createSuper(FakeAccountApi);\n\n  function FakeAccountApi() {\n    _classCallCheck(this, FakeAccountApi);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FakeAccountApi, [{\n    key: \"signIn\",\n    value: function signIn(email, password) {\n      return accountSignIn(email, password);\n    }\n  }, {\n    key: \"signUp\",\n    value: function signUp(email, password) {\n      return accountSignUp(email, password);\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      return accountSignOut();\n    }\n  }, {\n    key: \"editProfile\",\n    value: function editProfile(data) {\n      return accountEditProfile(data);\n    }\n  }, {\n    key: \"changePassword\",\n    value: function changePassword(oldPassword, newPassword) {\n      return accountChangePassword(oldPassword, newPassword);\n    }\n  }, {\n    key: \"addAddress\",\n    value: function addAddress(data) {\n      return _addAddress(data);\n    }\n  }, {\n    key: \"editAddress\",\n    value: function editAddress(addressId, data) {\n      return _editAddress(addressId, data);\n    }\n  }, {\n    key: \"delAddress\",\n    value: function delAddress(addressId) {\n      return _delAddress(addressId);\n    }\n  }, {\n    key: \"getDefaultAddress\",\n    value: function getDefaultAddress() {\n      return _getDefaultAddress();\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(addressId) {\n      return _getAddress(addressId);\n    }\n  }, {\n    key: \"getAddresses\",\n    value: function getAddresses() {\n      return _getAddresses();\n    }\n  }, {\n    key: \"getOrdersList\",\n    value: function getOrdersList(options) {\n      return _getOrdersList(options);\n    }\n  }, {\n    key: \"getOrderById\",\n    value: function getOrderById(id) {\n      return _getOrderById(id);\n    }\n  }, {\n    key: \"getOrderByToken\",\n    value: function getOrderByToken(token) {\n      return _getOrderByToken(token);\n    }\n  }]);\n\n  return FakeAccountApi;\n}(AccountApi);","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/api/fake-api/fake-account.api.ts"],"names":["AccountApi","accountChangePassword","accountEditProfile","accountSignIn","accountSignOut","accountSignUp","addAddress","delAddress","editAddress","getAddress","getAddresses","getDefaultAddress","getOrderById","getOrderByToken","getOrdersList","FakeAccountApi","email","password","data","oldPassword","newPassword","addressId","options","id","token"],"mappings":";;;;;;;;;;AAAA;AAEA;AAKA,SACIA,UADJ,QAKO,YALP;AAMA,SACIC,qBADJ,EAEIC,kBAFJ,EAGIC,aAHJ,EAIIC,cAJJ,EAKIC,aALJ,EAMIC,UAAU,IAAVA,WANJ,EAOIC,UAAU,IAAVA,WAPJ,EAQIC,WAAW,IAAXA,YARJ,EASIC,UAAU,IAAVA,WATJ,EAUIC,YAAY,IAAZA,aAVJ,EAWIC,iBAAiB,IAAjBA,kBAXJ,EAYIC,YAAY,IAAZA,aAZJ,EAaIC,eAAe,IAAfA,gBAbJ,EAcIC,aAAa,IAAbA,cAdJ,QAeO,yBAfP;AAiBA,WAAaC,cAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACI,gBAAOC,KAAP,EAAsBC,QAAtB,EAAwD;AACpD,aAAOd,aAAa,CAACa,KAAD,EAAQC,QAAR,CAApB;AACH;AAHL;AAAA;AAAA,WAKI,gBAAOD,KAAP,EAAsBC,QAAtB,EAAwD;AACpD,aAAOZ,aAAa,CAACW,KAAD,EAAQC,QAAR,CAApB;AACH;AAPL;AAAA;AAAA,WASI,mBAAyB;AACrB,aAAOb,cAAc,EAArB;AACH;AAXL;AAAA;AAAA,WAaI,qBAAYc,IAAZ,EAAoD;AAChD,aAAOhB,kBAAkB,CAACgB,IAAD,CAAzB;AACH;AAfL;AAAA;AAAA,WAiBI,wBAAeC,WAAf,EAAoCC,WAApC,EAAwE;AACpE,aAAOnB,qBAAqB,CAACkB,WAAD,EAAcC,WAAd,CAA5B;AACH;AAnBL;AAAA;AAAA,WAqBI,oBAAWF,IAAX,EAAsD;AAClD,aAAOZ,WAAU,CAACY,IAAD,CAAjB;AACH;AAvBL;AAAA;AAAA,WAyBI,qBAAYG,SAAZ,EAA+BH,IAA/B,EAA0E;AACtE,aAAOV,YAAW,CAACa,SAAD,EAAYH,IAAZ,CAAlB;AACH;AA3BL;AAAA;AAAA,WA6BI,oBAAWG,SAAX,EAA6C;AACzC,aAAOd,WAAU,CAACc,SAAD,CAAjB;AACH;AA/BL;AAAA;AAAA,WAiCI,6BAA8C;AAC1C,aAAOV,kBAAiB,EAAxB;AACH;AAnCL;AAAA;AAAA,WAqCI,oBAAWU,SAAX,EAAiD;AAC7C,aAAOZ,WAAU,CAACY,SAAD,CAAjB;AACH;AAvCL;AAAA;AAAA,WAyCI,wBAAoC;AAChC,aAAOX,aAAY,EAAnB;AACH;AA3CL;AAAA;AAAA,WA6CI,uBAAcY,OAAd,EAAqE;AACjE,aAAOR,cAAa,CAACQ,OAAD,CAApB;AACH;AA/CL;AAAA;AAAA,WAiDI,sBAAaC,EAAb,EAA0C;AACtC,aAAOX,aAAY,CAACW,EAAD,CAAnB;AACH;AAnDL;AAAA;AAAA,WAqDI,yBAAgBC,KAAhB,EAAgD;AAC5C,aAAOX,gBAAe,CAACW,KAAD,CAAtB;AACH;AAvDL;;AAAA;AAAA,EAAoCxB,UAApC","sourcesContent":["/* eslint-disable import/prefer-default-export,class-methods-use-this */\n\n// application\nimport { IAddress } from '~/interfaces/address';\nimport { IOrder } from '~/interfaces/order';\nimport { IOrdersList } from '~/interfaces/list';\nimport { IUser } from '~/interfaces/user';\nimport {\n    AccountApi,\n    IEditAddressData,\n    IEditProfileData,\n    IGetOrdersListOptions,\n} from '~/api/base';\nimport {\n    accountChangePassword,\n    accountEditProfile,\n    accountSignIn,\n    accountSignOut,\n    accountSignUp,\n    addAddress,\n    delAddress,\n    editAddress,\n    getAddress,\n    getAddresses,\n    getDefaultAddress,\n    getOrderById,\n    getOrderByToken,\n    getOrdersList,\n} from '~/fake-server/endpoints';\n\nexport class FakeAccountApi extends AccountApi {\n    signIn(email: string, password: string): Promise<IUser> {\n        return accountSignIn(email, password);\n    }\n\n    signUp(email: string, password: string): Promise<IUser> {\n        return accountSignUp(email, password);\n    }\n\n    signOut(): Promise<void> {\n        return accountSignOut();\n    }\n\n    editProfile(data: IEditProfileData): Promise<IUser> {\n        return accountEditProfile(data);\n    }\n\n    changePassword(oldPassword: string, newPassword: string): Promise<void> {\n        return accountChangePassword(oldPassword, newPassword);\n    }\n\n    addAddress(data: IEditAddressData): Promise<IAddress> {\n        return addAddress(data);\n    }\n\n    editAddress(addressId: number, data: IEditAddressData): Promise<IAddress> {\n        return editAddress(addressId, data);\n    }\n\n    delAddress(addressId: number): Promise<void> {\n        return delAddress(addressId);\n    }\n\n    getDefaultAddress(): Promise<IAddress | null> {\n        return getDefaultAddress();\n    }\n\n    getAddress(addressId: number): Promise<IAddress> {\n        return getAddress(addressId);\n    }\n\n    getAddresses(): Promise<IAddress[]> {\n        return getAddresses();\n    }\n\n    getOrdersList(options?: IGetOrdersListOptions): Promise<IOrdersList> {\n        return getOrdersList(options);\n    }\n\n    getOrderById(id: number): Promise<IOrder> {\n        return getOrderById(id);\n    }\n\n    getOrderByToken(token: string): Promise<IOrder> {\n        return getOrderByToken(token);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}