{"ast":null,"code":"/* eslint-disable import/prefer-default-export */\n// application\nimport { delayResponse } from '~/fake-server/utils';\nimport { products } from '~/fake-server/database/products';\nimport { getNextOrderId, getNextOrderNumber, getOrderToken, orders } from '~/fake-server/database/orders';\nexport function checkout(data) {\n  const id = getNextOrderId();\n  const items = data.items.map(x => {\n    const product = products.find(p => p.id === x.productId);\n\n    if (!product) {\n      throw new Error('Product not found');\n    }\n\n    return {\n      product,\n      options: x.options,\n      price: product.price,\n      quantity: x.quantity,\n      total: product.price * x.quantity\n    };\n  });\n  const quantity = items.reduce((acc, x) => acc + x.quantity, 0);\n  const subtotal = items.reduce((acc, x) => acc + x.total, 0);\n  const totals = [{\n    title: 'SHIPPING',\n    price: 25\n  }, {\n    title: 'TAX',\n    price: subtotal * 0.20\n  }];\n  const total = subtotal + totals.reduce((acc, x) => acc + x.price, 0);\n  const date = new Date();\n\n  const pad = v => `00${v}`.substr(-2);\n\n  const createdAt = `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;\n  const order = {\n    id,\n    token: getOrderToken(id),\n    number: getNextOrderNumber(),\n    createdAt,\n    payment: data.payment,\n    status: 'PENDING',\n    items,\n    quantity,\n    subtotal,\n    totals,\n    total,\n    billingAddress: data.billingAddress,\n    shippingAddress: data.shippingAddress\n  };\n  orders.unshift(order);\n  return delayResponse(Promise.resolve(order));\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/fake-server/endpoints/checkout.ts"],"names":["delayResponse","products","getNextOrderId","getNextOrderNumber","getOrderToken","orders","checkout","data","id","items","map","x","product","find","p","productId","Error","options","price","quantity","total","reduce","acc","subtotal","totals","title","date","Date","pad","v","substr","createdAt","getFullYear","getMonth","getDate","order","token","number","payment","status","billingAddress","shippingAddress","unshift","Promise","resolve"],"mappings":"AAAA;AAEA;AACA,SAASA,aAAT,QAA8B,qBAA9B;AAGA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SACIC,cADJ,EAEIC,kBAFJ,EAGIC,aAHJ,EAIIC,MAJJ,QAKO,+BALP;AAOA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwD;AAC3D,QAAMC,EAAE,GAAGN,cAAc,EAAzB;AACA,QAAMO,KAAmB,GAAGF,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAgBC,CAAD,IAAO;AAC9C,UAAMC,OAAO,GAAGX,QAAQ,CAACY,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAACN,EAAF,KAASG,CAAC,CAACI,SAAhC,CAAhB;;AAEA,QAAI,CAACH,OAAL,EAAc;AACV,YAAM,IAAII,KAAJ,CAAU,mBAAV,CAAN;AACH;;AAED,WAAO;AACHJ,MAAAA,OADG;AAEHK,MAAAA,OAAO,EAAEN,CAAC,CAACM,OAFR;AAGHC,MAAAA,KAAK,EAAEN,OAAO,CAACM,KAHZ;AAIHC,MAAAA,QAAQ,EAAER,CAAC,CAACQ,QAJT;AAKHC,MAAAA,KAAK,EAAER,OAAO,CAACM,KAAR,GAAgBP,CAAC,CAACQ;AALtB,KAAP;AAOH,GAd2B,CAA5B;AAeA,QAAMA,QAAQ,GAAGV,KAAK,CAACY,MAAN,CAAa,CAACC,GAAD,EAAMX,CAAN,KAAYW,GAAG,GAAGX,CAAC,CAACQ,QAAjC,EAA2C,CAA3C,CAAjB;AACA,QAAMI,QAAQ,GAAGd,KAAK,CAACY,MAAN,CAAa,CAACC,GAAD,EAAMX,CAAN,KAAYW,GAAG,GAAGX,CAAC,CAACS,KAAjC,EAAwC,CAAxC,CAAjB;AACA,QAAMI,MAAqB,GAAG,CAC1B;AACIC,IAAAA,KAAK,EAAE,UADX;AAEIP,IAAAA,KAAK,EAAE;AAFX,GAD0B,EAK1B;AACIO,IAAAA,KAAK,EAAE,KADX;AAEIP,IAAAA,KAAK,EAAEK,QAAQ,GAAG;AAFtB,GAL0B,CAA9B;AAUA,QAAMH,KAAK,GAAGG,QAAQ,GAAGC,MAAM,CAACH,MAAP,CAAc,CAACC,GAAD,EAAMX,CAAN,KAAYW,GAAG,GAAGX,CAAC,CAACO,KAAlC,EAAyC,CAAzC,CAAzB;AAEA,QAAMQ,IAAI,GAAG,IAAIC,IAAJ,EAAb;;AACA,QAAMC,GAAG,GAAIC,CAAD,IAAiB,KAAIA,CAAE,EAAR,CAAWC,MAAX,CAAkB,CAAC,CAAnB,CAA3B;;AACA,QAAMC,SAAS,GAAI,GAAEL,IAAI,CAACM,WAAL,EAAmB,IAAGJ,GAAG,CAACF,IAAI,CAACO,QAAL,KAAkB,CAAnB,CAAsB,IAAGL,GAAG,CAACF,IAAI,CAACQ,OAAL,EAAD,CAAiB,EAA3F;AAEA,QAAMC,KAAa,GAAG;AAClB3B,IAAAA,EADkB;AAElB4B,IAAAA,KAAK,EAAEhC,aAAa,CAACI,EAAD,CAFF;AAGlB6B,IAAAA,MAAM,EAAElC,kBAAkB,EAHR;AAIlB4B,IAAAA,SAJkB;AAKlBO,IAAAA,OAAO,EAAE/B,IAAI,CAAC+B,OALI;AAMlBC,IAAAA,MAAM,EAAE,SANU;AAOlB9B,IAAAA,KAPkB;AAQlBU,IAAAA,QARkB;AASlBI,IAAAA,QATkB;AAUlBC,IAAAA,MAVkB;AAWlBJ,IAAAA,KAXkB;AAYlBoB,IAAAA,cAAc,EAAEjC,IAAI,CAACiC,cAZH;AAalBC,IAAAA,eAAe,EAAElC,IAAI,CAACkC;AAbJ,GAAtB;AAgBApC,EAAAA,MAAM,CAACqC,OAAP,CAAeP,KAAf;AAEA,SAAOnC,aAAa,CAAC2C,OAAO,CAACC,OAAR,CAAgBT,KAAhB,CAAD,CAApB;AACH","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\n// application\nimport { delayResponse } from '~/fake-server/utils';\nimport { ICheckoutData } from '~/api/base';\nimport { IOrder, IOrderItem, IOrderTotal } from '~/interfaces/order';\nimport { products } from '~/fake-server/database/products';\nimport {\n    getNextOrderId,\n    getNextOrderNumber,\n    getOrderToken,\n    orders,\n} from '~/fake-server/database/orders';\n\nexport function checkout(data: ICheckoutData): Promise<IOrder> {\n    const id = getNextOrderId();\n    const items: IOrderItem[] = data.items.map((x) => {\n        const product = products.find((p) => p.id === x.productId);\n\n        if (!product) {\n            throw new Error('Product not found');\n        }\n\n        return {\n            product,\n            options: x.options,\n            price: product.price,\n            quantity: x.quantity,\n            total: product.price * x.quantity,\n        };\n    });\n    const quantity = items.reduce((acc, x) => acc + x.quantity, 0);\n    const subtotal = items.reduce((acc, x) => acc + x.total, 0);\n    const totals: IOrderTotal[] = [\n        {\n            title: 'SHIPPING',\n            price: 25,\n        },\n        {\n            title: 'TAX',\n            price: subtotal * 0.20,\n        },\n    ];\n    const total = subtotal + totals.reduce((acc, x) => acc + x.price, 0);\n\n    const date = new Date();\n    const pad = (v: number) => (`00${v}`).substr(-2);\n    const createdAt = `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;\n\n    const order: IOrder = {\n        id,\n        token: getOrderToken(id),\n        number: getNextOrderNumber(),\n        createdAt,\n        payment: data.payment,\n        status: 'PENDING',\n        items,\n        quantity,\n        subtotal,\n        totals,\n        total,\n        billingAddress: data.billingAddress,\n        shippingAddress: data.shippingAddress,\n    };\n\n    orders.unshift(order);\n\n    return delayResponse(Promise.resolve(order));\n}\n"]},"metadata":{},"sourceType":"module"}