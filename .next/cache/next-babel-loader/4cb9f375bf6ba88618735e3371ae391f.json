{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\n// application\nexport var ShopApi = function ShopApi() {\n  _classCallCheck(this, ShopApi);\n};","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/api/base/shop.api.ts"],"names":["ShopApi"],"mappings":";AAAA;AA2DA,WAAsBA,OAAtB;AAAA;AAAA","sourcesContent":["// application\nimport { IAddressData } from '~/interfaces/address';\nimport { IBrand } from '~/interfaces/brand';\nimport { IFilterValues, IListOptions, IReviewsList } from '~/interfaces/list';\nimport { IOrder } from '~/interfaces/order';\nimport { IProduct, IProductsList } from '~/interfaces/product';\nimport { IReview } from '~/interfaces/review';\nimport { IShopCategory } from '~/interfaces/category';\n\nexport interface IGetCategoryBySlugOptions {\n    depth?: number;\n}\n\nexport interface IGetCategoriesOptions {\n    parent?: Partial<IShopCategory>;\n    slugs?: string[];\n    depth?: number;\n}\n\nexport interface IGetBrandsOptions {\n    limit?: number;\n}\n\nexport interface IAddProductReviewData {\n    rating: number;\n    author: string;\n    email: string;\n    content: string;\n}\n\nexport interface IGetSearchSuggestionsOptions {\n    limitProducts?: number;\n    limitCategories?: number;\n}\n\nexport interface IGetSearchSuggestionsResult {\n    products: IProduct[];\n    categories: IShopCategory[];\n}\n\nexport interface ICheckoutItemOptionData {\n    name: string;\n    value: string;\n}\n\nexport interface ICheckoutItemData {\n    productId: number;\n    options: ICheckoutItemOptionData[];\n    quantity: number;\n}\n\nexport interface ICheckoutData {\n    payment: string;\n    items: ICheckoutItemData[];\n    billingAddress: IAddressData;\n    shippingAddress: IAddressData;\n    comment: string;\n}\n\nexport abstract class ShopApi {\n    abstract getCategoryBySlug(slug: string, options?: IGetCategoryBySlugOptions): Promise<IShopCategory>;\n\n    abstract getCategories(options?: IGetCategoriesOptions): Promise<IShopCategory[]>;\n\n    abstract getBrands(options?: IGetBrandsOptions): Promise<IBrand[]>;\n\n    abstract getProductsList(options?: IListOptions, filters?: IFilterValues): Promise<IProductsList>;\n\n    abstract getProductBySlug(slug: string): Promise<IProduct>;\n\n    abstract getProductReviews(productId: number, options?: IListOptions): Promise<IReviewsList>;\n\n    abstract addProductReview(productId: number, data: IAddProductReviewData): Promise<IReview>;\n\n    abstract getProductAnalogs(productId: number): Promise<IProduct[]>;\n\n    abstract getRelatedProducts(productId: number, limit: number): Promise<IProduct[]>;\n\n    abstract getFeaturedProducts(categorySlug: string | null, limit: number): Promise<IProduct[]>;\n\n    abstract getPopularProducts(categorySlug: string | null, limit: number): Promise<IProduct[]>;\n\n    abstract getTopRatedProducts(categorySlug: string | null, limit: number): Promise<IProduct[]>;\n\n    abstract getSpecialOffers(limit: number): Promise<IProduct[]>;\n\n    abstract getLatestProducts(limit: number): Promise<IProduct[]>;\n\n    abstract getSearchSuggestions(\n        query: string,\n        options?: IGetSearchSuggestionsOptions,\n    ): Promise<IGetSearchSuggestionsResult>;\n\n    abstract checkout(data: ICheckoutData): Promise<IOrder>;\n}\n"]},"metadata":{},"sourceType":"module"}