{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/prefer-default-export,class-methods-use-this */\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { products as dbProducts } from '~/fake-server/database/products';\nexport class RadioFilterBuilder extends AbstractFilterBuilder {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"value\", null);\n  }\n\n  test(product) {\n    return this.value !== null && this.extractItems(product).map(x => x.slug).includes(this.value);\n  }\n\n  makeItems(products, value) {\n    products.forEach(product => this.extractItems(product).forEach(item => {\n      if (!this.items.find(x => x.slug === item.slug)) {\n        this.items.push(item);\n      }\n    }));\n    this.value = value || this.items[0].slug;\n  }\n\n  calc(filters) {\n    const products = dbProducts.filter(product => filters.reduce((isMatched, filter) => isMatched && (filter === this || filter.test(product)), true));\n    this.items = this.items.map(item => _objectSpread(_objectSpread({}, item), {}, {\n      count: products.reduce((acc, product) => acc + (this.extractItems(product).map(x => x.slug).includes(item.slug) ? 1 : 0), 0)\n    }));\n  }\n\n  build() {\n    return {\n      type: 'radio',\n      slug: this.slug,\n      name: this.name,\n      items: this.items,\n      value: this.value\n    };\n  }\n\n  extractItems(product) {\n    if (this.slug === 'discount') {\n      const items = [{\n        slug: 'any',\n        name: 'Any',\n        count: 0\n      }];\n\n      if (product.compareAtPrice) {\n        items.push({\n          slug: 'yes',\n          name: 'Yes',\n          count: 0\n        });\n      } else {\n        items.push({\n          slug: 'no',\n          name: 'No',\n          count: 0\n        });\n      }\n\n      return items;\n    }\n\n    throw Error();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/fake-server/filters/radio-filter-builder.ts"],"names":["AbstractFilterBuilder","products","dbProducts","RadioFilterBuilder","test","product","value","extractItems","map","x","slug","includes","makeItems","forEach","item","items","find","push","calc","filters","filter","reduce","isMatched","count","acc","build","type","name","compareAtPrice","Error"],"mappings":"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","sourcesContent":["/* eslint-disable import/prefer-default-export,class-methods-use-this */\n\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { IBaseFilterItem, IRadioFilter } from '~/interfaces/filter';\nimport { IProduct } from '~/interfaces/product';\nimport { products as dbProducts } from '~/fake-server/database/products';\n\nexport class RadioFilterBuilder extends AbstractFilterBuilder {\n    private items: IBaseFilterItem[] = [];\n\n    private value: string | null = null;\n\n    test(product: IProduct): boolean {\n        return this.value !== null && this.extractItems(product).map((x) => x.slug).includes(this.value);\n    }\n\n    makeItems(products: IProduct[], value: string): void {\n        products.forEach((product) => this.extractItems(product).forEach((item) => {\n            if (!this.items.find((x) => x.slug === item.slug)) {\n                this.items.push(item);\n            }\n        }));\n\n        this.value = value || this.items[0].slug;\n    }\n\n    calc(filters: AbstractFilterBuilder[]): void {\n        const products = dbProducts.filter(\n            (product) => filters.reduce<boolean>(\n                (isMatched, filter) => isMatched && (filter === this || filter.test(product)),\n                true,\n            ),\n        );\n\n        this.items = this.items.map((item) => ({\n            ...item,\n            count: products.reduce((acc, product) => (\n                acc + (this.extractItems(product).map((x) => x.slug).includes(item.slug) ? 1 : 0)\n            ), 0),\n        }));\n    }\n\n    build(): IRadioFilter {\n        return {\n            type: 'radio',\n            slug: this.slug,\n            name: this.name,\n            items: this.items,\n            value: this.value,\n        };\n    }\n\n    private extractItems(product: IProduct): IBaseFilterItem[] {\n        if (this.slug === 'discount') {\n            const items: IBaseFilterItem[] = [\n                { slug: 'any', name: 'Any', count: 0 },\n            ];\n\n            if (product.compareAtPrice) {\n                items.push({ slug: 'yes', name: 'Yes', count: 0 });\n            } else {\n                items.push({ slug: 'no', name: 'No', count: 0 });\n            }\n\n            return items;\n        }\n\n        throw Error();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}