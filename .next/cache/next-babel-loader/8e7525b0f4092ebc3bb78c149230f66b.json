{"ast":null,"code":"// react\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'; // third-party\n\nimport { useDispatch, useSelector } from 'react-redux'; // application\n\nexport function useAppAction(action) {\n  const dispatch = useDispatch();\n  return useCallback((...args) => dispatch(action(...args)), []);\n}\nexport function useAppSelector(selector) {\n  return useSelector(selector);\n}\nexport function useMedia(query) {\n  if (!false) {\n    return false;\n  }\n\n  const media = useMemo(() => window.matchMedia(query), [query]);\n  const {\n    0: state,\n    1: setState\n  } = useState(media.matches);\n  useEffect(() => {\n    const onChangeMedia = () => {\n      setState(media.matches);\n    };\n\n    if (media.addEventListener) {\n      media.addEventListener('change', onChangeMedia);\n    } else {\n      // noinspection JSDeprecatedSymbols\n      media.addListener(onChangeMedia);\n    }\n\n    return () => {\n      if (media.removeEventListener) {\n        media.removeEventListener('change', onChangeMedia);\n      } else {\n        // noinspection JSDeprecatedSymbols\n        media.removeListener(onChangeMedia);\n      }\n    };\n  }, [media]);\n  return state;\n}\nexport function useAsyncAction(action, deps = []) {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const run = useMemo(() => (...args) => {\n    if (loading) {\n      return;\n    }\n\n    setLoading(true);\n    action(...args).then(() => {\n      setLoading(false);\n    });\n  }, [loading, setLoading, ...deps]);\n  return useMemo(() => [run, loading], [run, loading]);\n}\nexport function useIsUnmountedRef() {\n  const isUnmountedRef = useRef(false);\n  useEffect(() => {\n    isUnmountedRef.current = false;\n    return () => {\n      isUnmountedRef.current = true;\n    };\n  }, []);\n  return isUnmountedRef;\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/store/hooks.ts"],"names":["useCallback","useEffect","useMemo","useRef","useState","useDispatch","useSelector","useAppAction","action","dispatch","args","useAppSelector","selector","useMedia","query","media","window","matchMedia","state","setState","matches","onChangeMedia","addEventListener","addListener","removeEventListener","removeListener","useAsyncAction","deps","loading","setLoading","run","then","useIsUnmountedRef","isUnmountedRef","current"],"mappings":"AAAA;AACA,SACIA,WADJ,EAEIC,SAFJ,EAGIC,OAHJ,EAGaC,MAHb,EAIIC,QAJJ,QAKO,OALP,C,CAMA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;;AAIA,OAAO,SAASC,YAAT,CAAoCC,MAApC,EAEL;AACE,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AAEA,SAAOL,WAAW,CAAC,CAAC,GAAGU,IAAJ,KACfD,QAAQ,CAACD,MAAM,CAAC,GAAGE,IAAJ,CAAP,CADM,EAEf,EAFe,CAAlB;AAGH;AAED,OAAO,SAASC,cAAT,CAA6DC,QAA7D,EAAyF;AAC5F,SAAON,WAAW,CAACM,QAAD,CAAlB;AACH;AAED,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAiC;AACpC,MAAI,MAAJ,EAAsB;AAClB,WAAO,KAAP;AACH;;AAED,QAAMC,KAAK,GAAGb,OAAO,CAAC,MAAMc,MAAM,CAACC,UAAP,CAAkBH,KAAlB,CAAP,EAAiC,CAACA,KAAD,CAAjC,CAArB;AACA,QAAM;AAAA,OAACI,KAAD;AAAA,OAAQC;AAAR,MAAoBf,QAAQ,CAACW,KAAK,CAACK,OAAP,CAAlC;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMoB,aAAa,GAAG,MAAM;AACxBF,MAAAA,QAAQ,CAACJ,KAAK,CAACK,OAAP,CAAR;AACH,KAFD;;AAIA,QAAIL,KAAK,CAACO,gBAAV,EAA4B;AACxBP,MAAAA,KAAK,CAACO,gBAAN,CAAuB,QAAvB,EAAiCD,aAAjC;AACH,KAFD,MAEO;AACH;AACAN,MAAAA,KAAK,CAACQ,WAAN,CAAkBF,aAAlB;AACH;;AAED,WAAO,MAAM;AACT,UAAIN,KAAK,CAACS,mBAAV,EAA+B;AAC3BT,QAAAA,KAAK,CAACS,mBAAN,CAA0B,QAA1B,EAAoCH,aAApC;AACH,OAFD,MAEO;AACH;AACAN,QAAAA,KAAK,CAACU,cAAN,CAAqBJ,aAArB;AACH;AACJ,KAPD;AAQH,GApBQ,EAoBN,CAACN,KAAD,CApBM,CAAT;AAsBA,SAAOG,KAAP;AACH;AAID,OAAO,SAASQ,cAAT,CACHlB,MADG,EAEHmB,IAAW,GAAG,EAFX,EAGwC;AAC3C,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBzB,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM0B,GAAG,GAAG5B,OAAO,CAAC,MAAM,CAAC,GAAGQ,IAAJ,KAA4B;AAClD,QAAIkB,OAAJ,EAAa;AACT;AACH;;AAEDC,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEArB,IAAAA,MAAM,CAAC,GAAGE,IAAJ,CAAN,CAAgBqB,IAAhB,CAAqB,MAAM;AACvBF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAFD;AAGH,GAVkB,EAUhB,CAACD,OAAD,EAAUC,UAAV,EAAsB,GAAGF,IAAzB,CAVgB,CAAnB;AAYA,SAAOzB,OAAO,CAAC,MAAM,CAAC4B,GAAD,EAAMF,OAAN,CAAP,EAAuB,CAACE,GAAD,EAAMF,OAAN,CAAvB,CAAd;AACH;AAED,OAAO,SAASI,iBAAT,GAA6B;AAChC,QAAMC,cAAc,GAAG9B,MAAM,CAAU,KAAV,CAA7B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZgC,IAAAA,cAAc,CAACC,OAAf,GAAyB,KAAzB;AAEA,WAAO,MAAM;AACTD,MAAAA,cAAc,CAACC,OAAf,GAAyB,IAAzB;AACH,KAFD;AAGH,GANQ,EAMN,EANM,CAAT;AAQA,SAAOD,cAAP;AACH","sourcesContent":["// react\nimport {\n    useCallback,\n    useEffect,\n    useMemo, useRef,\n    useState,\n} from 'react';\n// third-party\nimport { useDispatch, useSelector } from 'react-redux';\n// application\nimport { Fn, ThunkActionFn, ThunkReturnType } from '~/store/types';\nimport { IRootState } from '~/store/root/rootTypes';\n\nexport function useAppAction<T extends Fn>(action: T): (...args: Parameters<T>) => (\n    T extends ThunkActionFn ? ThunkReturnType<T> : ReturnType<T>\n) {\n    const dispatch = useDispatch();\n\n    return useCallback((...args: Parameters<T>) => (\n        dispatch(action(...args))\n    ), []);\n}\n\nexport function useAppSelector<T extends(state: IRootState) => any>(selector: T): ReturnType<T> {\n    return useSelector(selector);\n}\n\nexport function useMedia(query: string) {\n    if (!process.browser) {\n        return false;\n    }\n\n    const media = useMemo(() => window.matchMedia(query), [query]);\n    const [state, setState] = useState(media.matches);\n\n    useEffect(() => {\n        const onChangeMedia = () => {\n            setState(media.matches);\n        };\n\n        if (media.addEventListener) {\n            media.addEventListener('change', onChangeMedia);\n        } else {\n            // noinspection JSDeprecatedSymbols\n            media.addListener(onChangeMedia);\n        }\n\n        return () => {\n            if (media.removeEventListener) {\n                media.removeEventListener('change', onChangeMedia);\n            } else {\n                // noinspection JSDeprecatedSymbols\n                media.removeListener(onChangeMedia);\n            }\n        };\n    }, [media]);\n\n    return state;\n}\n\ntype AsyncActionFn = (...args: any[]) => Promise<any>;\n\nexport function useAsyncAction<T extends AsyncActionFn>(\n    action: T,\n    deps: any[] = [],\n): [(...args: Parameters<T>) => void, boolean] {\n    const [loading, setLoading] = useState(false);\n\n    const run = useMemo(() => (...args: Parameters<T>) => {\n        if (loading) {\n            return;\n        }\n\n        setLoading(true);\n\n        action(...args).then(() => {\n            setLoading(false);\n        });\n    }, [loading, setLoading, ...deps]);\n\n    return useMemo(() => [run, loading], [run, loading]);\n}\n\nexport function useIsUnmountedRef() {\n    const isUnmountedRef = useRef<boolean>(false);\n\n    useEffect(() => {\n        isUnmountedRef.current = false;\n\n        return () => {\n            isUnmountedRef.current = true;\n        };\n    }, []);\n\n    return isUnmountedRef;\n}\n"]},"metadata":{},"sourceType":"module"}