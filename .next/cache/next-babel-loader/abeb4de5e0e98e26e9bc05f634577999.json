{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shbaita Studio\\\\Documents\\\\project\\\\new1\\\\themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template\\\\Sources\\\\src\\\\components\\\\shared\\\\AppLink.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport React from 'react'; // third-party\n\nimport Link from 'next/link';\nimport { format as formatUrl, parse as parseUrl } from 'url'; // application\n\nimport { getDefaultLocale } from '~/services/i18n/utils';\nimport { useLocale } from '~/services/i18n/hooks';\nimport { baseUrl } from '~/services/utils';\nexport function normalizeHref(href) {\n  const result = _objectSpread({}, parseUrl(typeof href === 'string' ? href : formatUrl(href), true));\n\n  delete result.host;\n  delete result.href;\n  delete result.path;\n  delete result.search;\n  result.query = result.query || {};\n  return result;\n}\nexport function normalizeLinkHref(data) {\n  const result = typeof data === 'string' ? {\n    href: data\n  } : data;\n  return _objectSpread(_objectSpread({}, result), {}, {\n    href: normalizeHref(result.href),\n    as: normalizeHref(result.as || result.href)\n  });\n}\n\nfunction addLocale(url, locale) {\n  return _objectSpread(_objectSpread({}, url), {}, {\n    pathname: !url.pathname || locale === getDefaultLocale() ? url.pathname : `/${locale}${url.pathname}`\n  });\n}\n\nfunction AppLink(props) {\n  const {\n    href,\n    children,\n    anchor = false\n  } = props,\n        anchorProps = _objectWithoutProperties(props, [\"href\", \"children\", \"anchor\"]);\n\n  const locale = useLocale();\n  const data = normalizeLinkHref(href || '');\n  const isExternal = !!data.href.hostname;\n  const hasPath = !!data.href.pathname;\n  const onlyHash = formatUrl(data.href).startsWith('#');\n\n  if (isExternal || anchor || onlyHash) {\n    let anchorHref;\n\n    if (!isExternal && hasPath) {\n      data.href = addLocale(data.href, locale);\n      anchorHref = baseUrl(formatUrl(data.href));\n    } else {\n      anchorHref = formatUrl(data.href);\n    }\n\n    return __jsx(\"a\", _extends({\n      href: anchorHref\n    }, anchorProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 16\n      }\n    }), children);\n  }\n\n  data.href.query = _objectSpread(_objectSpread({}, data.href.query), {}, {\n    lang: locale\n  });\n  data.as = addLocale(data.as, locale);\n  return __jsx(Link, _extends({}, data, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), __jsx(\"a\", _extends({}, anchorProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }), children));\n}\n\nexport default AppLink;","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/components/shared/AppLink.tsx"],"names":["React","Link","format","formatUrl","parse","parseUrl","getDefaultLocale","useLocale","baseUrl","normalizeHref","href","result","host","path","search","query","normalizeLinkHref","data","as","addLocale","url","locale","pathname","AppLink","props","children","anchor","anchorProps","isExternal","hostname","hasPath","onlyHash","startsWith","anchorHref","lang"],"mappings":"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","sourcesContent":["// react\nimport React, { PropsWithChildren } from 'react';\n// third-party\nimport Link, { LinkProps } from 'next/link';\nimport { ParsedUrlQuery, ParsedUrlQueryInput } from 'querystring';\nimport {\n    format as formatUrl,\n    parse as parseUrl,\n    Url,\n    UrlObject,\n} from 'url';\n// application\nimport { getDefaultLocale } from '~/services/i18n/utils';\nimport { useLocale } from '~/services/i18n/hooks';\nimport { baseUrl } from '~/services/utils';\n\nexport type IAppLinkHref = string | LinkProps;\n\ntype INormalizedUrlObject = Omit<UrlObject, 'query'> & {\n    query: ParsedUrlQueryInput;\n};\n\ntype INormalizedLinkProps = Omit<LinkProps, 'href' | 'as'> & {\n    href: INormalizedUrlObject;\n    as: INormalizedUrlObject;\n};\n\nexport function normalizeHref(href: string | UrlObject): INormalizedUrlObject {\n    const result = {\n        ...(parseUrl(typeof href === 'string' ? href : formatUrl(href), true)),\n    } as (Partial<Url> & { query: ParsedUrlQuery });\n\n    delete result.host;\n    delete result.href;\n    delete result.path;\n    delete result.search;\n\n    result.query = result.query || {};\n\n    return result;\n}\n\nexport function normalizeLinkHref(data: IAppLinkHref): INormalizedLinkProps {\n    const result = typeof data === 'string' ? { href: data } : data;\n\n    return {\n        ...result,\n        href: normalizeHref(result.href),\n        as: normalizeHref(result.as || result.href),\n    };\n}\n\nfunction addLocale(url: INormalizedUrlObject, locale: string): INormalizedUrlObject {\n    return {\n        ...url,\n        pathname: !url.pathname || locale === getDefaultLocale()\n            ? url.pathname\n            : `/${locale}${url.pathname}`,\n    };\n}\n\ntype AnchorProps = Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'href'>;\n\ninterface Props extends PropsWithChildren<AnchorProps> {\n    href?: IAppLinkHref;\n    anchor?: boolean;\n}\n\nfunction AppLink(props: Props) {\n    const {\n        href,\n        children,\n        anchor = false,\n        ...anchorProps\n    } = props;\n    const locale = useLocale();\n    const data = normalizeLinkHref(href || '');\n    const isExternal = !!data.href.hostname;\n    const hasPath = !!data.href.pathname;\n    const onlyHash = formatUrl(data.href).startsWith('#');\n\n    if (isExternal || anchor || onlyHash) {\n        let anchorHref;\n\n        if (!isExternal && hasPath) {\n            data.href = addLocale(data.href, locale);\n\n            anchorHref = baseUrl(formatUrl(data.href));\n        } else {\n            anchorHref = formatUrl(data.href);\n        }\n\n        return <a href={anchorHref} {...anchorProps}>{children}</a>;\n    }\n\n    data.href.query = {\n        ...data.href.query,\n        lang: locale,\n    };\n\n    data.as = addLocale(data.as, locale);\n\n    return (\n        <Link {...data}>\n            <a {...anchorProps}>{children}</a>\n        </Link>\n    );\n}\n\nexport default AppLink;\n"]},"metadata":{},"sourceType":"module"}