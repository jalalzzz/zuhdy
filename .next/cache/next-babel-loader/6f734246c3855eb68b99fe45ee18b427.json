{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/prefer-default-export,class-methods-use-this */\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { products as dbProducts } from '~/fake-server/database/products';\nexport class RangeFilterBuilder extends AbstractFilterBuilder {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"min\", void 0);\n\n    _defineProperty(this, \"max\", void 0);\n\n    _defineProperty(this, \"value\", void 0);\n  }\n\n  test(product) {\n    const value = this.extractValue(product);\n    return value >= this.value[0] && value <= this.value[1];\n  }\n\n  parseValue(value) {\n    return value.split('-').map(x => parseFloat(x));\n  }\n\n  makeItems(products, value) {\n    this.max = dbProducts.reduce((acc, product) => Math.max(acc, this.extractValue(product)), 0);\n    this.min = dbProducts.reduce((acc, product) => Math.min(acc, this.extractValue(product)), this.max);\n    /** Calculates the number of digits for rounding. */\n\n    let digit = Math.max(Math.ceil(this.max).toString().length - 2, 1);\n    digit = 10 ** digit;\n    this.max = Math.ceil(this.max / digit) * digit;\n    this.min = Math.floor(this.min / digit) * digit;\n    this.value = [this.min, this.max];\n\n    if (value) {\n      this.value = this.parseValue(value);\n    }\n  }\n\n  calc() {}\n\n  extractValue(product) {\n    if (this.slug === 'price') {\n      return product.price;\n    }\n\n    throw Error();\n  }\n\n  build() {\n    return {\n      type: 'range',\n      slug: this.slug,\n      name: this.name,\n      min: this.min,\n      max: this.max,\n      value: this.value\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/fake-server/filters/range-filter-builder.ts"],"names":["AbstractFilterBuilder","products","dbProducts","RangeFilterBuilder","test","product","value","extractValue","parseValue","split","map","x","parseFloat","makeItems","max","reduce","acc","Math","min","digit","ceil","toString","length","floor","calc","slug","price","Error","build","type","name"],"mappings":";;AAAA;AAEA;AACA,SAASA,qBAAT,QAAsC,+CAAtC;AAGA,SAASC,QAAQ,IAAIC,UAArB,QAAuC,iCAAvC;AAEA,OAAO,MAAMC,kBAAN,SAAiCH,qBAAjC,CAAuD;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAO1DI,EAAAA,IAAI,CAACC,OAAD,EAA6B;AAC7B,UAAMC,KAAK,GAAG,KAAKC,YAAL,CAAkBF,OAAlB,CAAd;AAEA,WAAOC,KAAK,IAAI,KAAKA,KAAL,CAAW,CAAX,CAAT,IAA0BA,KAAK,IAAI,KAAKA,KAAL,CAAW,CAAX,CAA1C;AACH;;AAEDE,EAAAA,UAAU,CAACF,KAAD,EAAkC;AACxC,WAAOA,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAsBC,CAAD,IAAOC,UAAU,CAACD,CAAD,CAAtC,CAAP;AACH;;AAEDE,EAAAA,SAAS,CAACZ,QAAD,EAAuBK,KAAvB,EAA4C;AACjD,SAAKQ,GAAL,GAAWZ,UAAU,CAACa,MAAX,CAAkB,CAACC,GAAD,EAAMX,OAAN,KAAkBY,IAAI,CAACH,GAAL,CAASE,GAAT,EAAc,KAAKT,YAAL,CAAkBF,OAAlB,CAAd,CAApC,EAA+E,CAA/E,CAAX;AACA,SAAKa,GAAL,GAAWhB,UAAU,CAACa,MAAX,CAAkB,CAACC,GAAD,EAAMX,OAAN,KAAkBY,IAAI,CAACC,GAAL,CAASF,GAAT,EAAc,KAAKT,YAAL,CAAkBF,OAAlB,CAAd,CAApC,EAA+E,KAAKS,GAApF,CAAX;AAEA;;AACA,QAAIK,KAAK,GAAGF,IAAI,CAACH,GAAL,CAASG,IAAI,CAACG,IAAL,CAAU,KAAKN,GAAf,EAAoBO,QAApB,GAA+BC,MAA/B,GAAwC,CAAjD,EAAoD,CAApD,CAAZ;AAEAH,IAAAA,KAAK,GAAG,MAAMA,KAAd;AAEA,SAAKL,GAAL,GAAWG,IAAI,CAACG,IAAL,CAAU,KAAKN,GAAL,GAAWK,KAArB,IAA8BA,KAAzC;AACA,SAAKD,GAAL,GAAWD,IAAI,CAACM,KAAL,CAAW,KAAKL,GAAL,GAAWC,KAAtB,IAA+BA,KAA1C;AACA,SAAKb,KAAL,GAAa,CAAC,KAAKY,GAAN,EAAW,KAAKJ,GAAhB,CAAb;;AAEA,QAAIR,KAAJ,EAAW;AACP,WAAKA,KAAL,GAAa,KAAKE,UAAL,CAAgBF,KAAhB,CAAb;AACH;AACJ;;AAEDkB,EAAAA,IAAI,GAAS,CAAG;;AAEhBjB,EAAAA,YAAY,CAACF,OAAD,EAA4B;AACpC,QAAI,KAAKoB,IAAL,KAAc,OAAlB,EAA2B;AACvB,aAAOpB,OAAO,CAACqB,KAAf;AACH;;AAED,UAAMC,KAAK,EAAX;AACH;;AAEDC,EAAAA,KAAK,GAAiB;AAClB,WAAO;AACHC,MAAAA,IAAI,EAAE,OADH;AAEHJ,MAAAA,IAAI,EAAE,KAAKA,IAFR;AAGHK,MAAAA,IAAI,EAAE,KAAKA,IAHR;AAIHZ,MAAAA,GAAG,EAAE,KAAKA,GAJP;AAKHJ,MAAAA,GAAG,EAAE,KAAKA,GALP;AAMHR,MAAAA,KAAK,EAAE,KAAKA;AANT,KAAP;AAQH;;AAtDyD","sourcesContent":["/* eslint-disable import/prefer-default-export,class-methods-use-this */\n\n// application\nimport { AbstractFilterBuilder } from '~/fake-server/filters/abstract-filter-builder';\nimport { IProduct } from '~/interfaces/product';\nimport { IRangeFilter } from '~/interfaces/filter';\nimport { products as dbProducts } from '~/fake-server/database/products';\n\nexport class RangeFilterBuilder extends AbstractFilterBuilder {\n    private min!: number;\n\n    private max!: number;\n\n    private value!: [number, number];\n\n    test(product: IProduct): boolean {\n        const value = this.extractValue(product);\n\n        return value >= this.value[0] && value <= this.value[1];\n    }\n\n    parseValue(value: string): [number, number] {\n        return value.split('-').map((x) => parseFloat(x)) as [number, number];\n    }\n\n    makeItems(products: IProduct[], value: string): void {\n        this.max = dbProducts.reduce((acc, product) => Math.max(acc, this.extractValue(product)), 0);\n        this.min = dbProducts.reduce((acc, product) => Math.min(acc, this.extractValue(product)), this.max);\n\n        /** Calculates the number of digits for rounding. */\n        let digit = Math.max(Math.ceil(this.max).toString().length - 2, 1);\n\n        digit = 10 ** digit;\n\n        this.max = Math.ceil(this.max / digit) * digit;\n        this.min = Math.floor(this.min / digit) * digit;\n        this.value = [this.min, this.max];\n\n        if (value) {\n            this.value = this.parseValue(value);\n        }\n    }\n\n    calc(): void { }\n\n    extractValue(product: IProduct): number {\n        if (this.slug === 'price') {\n            return product.price;\n        }\n\n        throw Error();\n    }\n\n    build(): IRangeFilter {\n        return {\n            type: 'range',\n            slug: this.slug,\n            name: this.name,\n            min: this.min,\n            max: this.max,\n            value: this.value,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}