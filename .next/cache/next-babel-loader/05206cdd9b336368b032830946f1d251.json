{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shbaita Studio\\\\Documents\\\\project\\\\new1\\\\themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template\\\\Sources\\\\src\\\\services\\\\i18n\\\\provider.tsx\";\nvar __jsx = React.createElement;\n// react\nimport React, { useCallback, useEffect, useMemo } from 'react'; // third-party\n\nimport { IntlProvider } from 'react-intl'; // application\n\nimport GlobalIntlProvider from '~/services/i18n/global-intl';\nimport { LanguageLocaleContext, LanguageSetLocaleContext } from '~/services/i18n/context';\nimport { useOriginalRouter } from '~/services/router';\nimport { getDefaultLanguage, getDefaultLocale, getLanguageByPath, loadMessages } from '~/services/i18n/utils';\nconst cache = {};\nexport async function getLanguageInitialProps(language) {\n  const locale = language ? language.locale : getDefaultLocale();\n\n  if (false) {\n    if (!cache[locale]) {\n      cache[locale] = loadMessages(locale);\n    }\n\n    return {\n      messages: await cache[locale]\n    };\n  }\n\n  return {\n    messages: await loadMessages(locale)\n  };\n}\n\nfunction LanguageProvider(props) {\n  const {\n    children,\n    messages\n  } = props;\n  const router = useOriginalRouter();\n  const language = useMemo(() => getLanguageByPath(router.asPath) || getDefaultLanguage(), [router.asPath]);\n  const {\n    locale\n  } = language; // Puts the initial translation into the cache.\n\n  useEffect(() => {\n    if (!cache[locale]) {\n      cache[locale] = Promise.resolve(messages);\n    }\n  }, [locale, messages]);\n  const setLocale = useCallback(newLocale => {\n    setTimeout(() => {\n      const language = getLanguageByPath(router.asPath);\n      let path = router.asPath;\n\n      if (language) {\n        path = `/${router.asPath.substr(language.locale.length + 2)}`;\n      }\n\n      const {\n        query\n      } = router;\n      const newPath = newLocale === getDefaultLocale() ? path : `/${newLocale}${path}`;\n\n      if (newLocale !== getDefaultLocale()) {\n        query.lang = newLocale;\n      } else {\n        delete query.lang;\n      }\n\n      router.push({\n        pathname: router.pathname,\n        query\n      }, newPath).then();\n    }, 0);\n  }, [router]);\n  useEffect(() => {\n    document.documentElement.lang = language.locale;\n    document.documentElement.dir = language.direction;\n  }, [language]);\n  return __jsx(LanguageLocaleContext.Provider, {\n    value: locale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, __jsx(LanguageSetLocaleContext.Provider, {\n    value: setLocale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, __jsx(IntlProvider, {\n    locale: locale,\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, __jsx(GlobalIntlProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, children))));\n}\n\nexport default LanguageProvider;","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/services/i18n/provider.tsx"],"names":["React","useCallback","useEffect","useMemo","IntlProvider","GlobalIntlProvider","LanguageLocaleContext","LanguageSetLocaleContext","useOriginalRouter","getDefaultLanguage","getDefaultLocale","getLanguageByPath","loadMessages","cache","getLanguageInitialProps","language","locale","messages","LanguageProvider","props","children","router","asPath","Promise","resolve","setLocale","newLocale","setTimeout","path","substr","length","query","newPath","lang","push","pathname","then","document","documentElement","dir","direction"],"mappings":"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","sourcesContent":["// react\nimport React, {\n    PropsWithChildren,\n    useCallback,\n    useEffect,\n    useMemo,\n} from 'react';\n// third-party\nimport { IntlProvider } from 'react-intl';\n// application\nimport GlobalIntlProvider from '~/services/i18n/global-intl';\nimport { ILanguage } from '~/interfaces/language';\nimport { LanguageLocaleContext, LanguageSetLocaleContext } from '~/services/i18n/context';\nimport { useOriginalRouter } from '~/services/router';\nimport {\n    getDefaultLanguage,\n    getDefaultLocale,\n    getLanguageByPath,\n    loadMessages,\n} from '~/services/i18n/utils';\n\nexport interface ILanguageProviderProps {\n    messages: Record<string, string>;\n}\n\nconst cache: Record<string, Promise<Record<string, string>>> = {};\n\nexport async function getLanguageInitialProps(language: ILanguage | null): Promise<ILanguageProviderProps> {\n    const locale = language ? language.locale : getDefaultLocale();\n\n    if (process.browser) {\n        if (!cache[locale]) {\n            cache[locale] = loadMessages(locale);\n        }\n\n        return { messages: await cache[locale] };\n    }\n\n    return {\n        messages: await loadMessages(locale),\n    };\n}\n\nfunction LanguageProvider(props: PropsWithChildren<ILanguageProviderProps>) {\n    const { children, messages } = props;\n    const router = useOriginalRouter();\n    const language = useMemo(() => getLanguageByPath(router.asPath) || getDefaultLanguage(), [router.asPath]);\n    const { locale } = language;\n\n    // Puts the initial translation into the cache.\n    useEffect(() => {\n        if (!cache[locale]) {\n            cache[locale] = Promise.resolve(messages);\n        }\n    }, [locale, messages]);\n\n    const setLocale = useCallback((newLocale: string) => {\n        setTimeout(() => {\n            const language = getLanguageByPath(router.asPath);\n            let path = router.asPath;\n\n            if (language) {\n                path = `/${router.asPath.substr(language.locale.length + 2)}`;\n            }\n\n            const { query } = router;\n            const newPath = newLocale === getDefaultLocale() ? path : `/${newLocale}${path}`;\n\n            if (newLocale !== getDefaultLocale()) {\n                query.lang = newLocale;\n            } else {\n                delete query.lang;\n            }\n\n            router.push(\n                {\n                    pathname: router.pathname,\n                    query,\n                },\n                newPath,\n            ).then();\n        }, 0);\n    }, [router]);\n\n    useEffect(() => {\n        document.documentElement.lang = language.locale;\n        document.documentElement.dir = language.direction;\n    }, [language]);\n\n    return (\n        <LanguageLocaleContext.Provider value={locale}>\n            <LanguageSetLocaleContext.Provider value={setLocale}>\n                <IntlProvider locale={locale} messages={messages}>\n                    <GlobalIntlProvider>\n                        {children}\n                    </GlobalIntlProvider>\n                </IntlProvider>\n            </LanguageSetLocaleContext.Provider>\n        </LanguageLocaleContext.Provider>\n    );\n}\n\nexport default LanguageProvider;\n"]},"metadata":{},"sourceType":"module"}