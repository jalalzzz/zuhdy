{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\n/* eslint-disable no-alert */\n// react\nimport { useEffect, useMemo, useRef } from 'react'; // third-party\n\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl'; // application\n\nimport { useAsyncAction } from '~/store/hooks';\nimport { useCartAddItem } from '~/store/cart/cartHooks';\nexport function useProductForm(product) {\n  _s();\n\n  var intl = useIntl();\n  var cartAddItem = useCartAddItem();\n  var methods = useForm({\n    defaultValues: {\n      quantity: 1\n    }\n  });\n  var handleSubmit = methods.handleSubmit;\n  var submitCount = methods.formState.submitCount;\n  var prevSubmitCount = useRef(0);\n  useEffect(function () {\n    if (prevSubmitCount.current !== submitCount && Object.keys(methods.errors).length > 0) {\n      if (methods.errors.quantity) {\n        alert(intl.formatMessage({\n          id: 'ERROR_ADD_TO_CART_QUANTITY'\n        }));\n      } else if (methods.errors.options) {\n        alert(intl.formatMessage({\n          id: 'ERROR_ADD_TO_CART_OPTIONS'\n        }));\n      }\n    }\n\n    prevSubmitCount.current = submitCount;\n  }, [intl, submitCount, methods.errors]);\n\n  var _useAsyncAction = useAsyncAction( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var options;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (product) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", null);\n\n            case 2:\n              options = [];\n              Object.keys(data.options).forEach(function (optionSlug) {\n                var option = product.options.find(function (x) {\n                  return x.slug === optionSlug;\n                });\n\n                if (!option) {\n                  return;\n                }\n\n                var value = option.values.find(function (x) {\n                  return x.slug === data.options[optionSlug];\n                });\n\n                if (!value) {\n                  return;\n                }\n\n                options.push({\n                  name: option.name,\n                  value: value.name\n                });\n              });\n              return _context.abrupt(\"return\", cartAddItem(product, options, typeof data.quantity === 'number' ? data.quantity : 1));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [product, cartAddItem]),\n      _useAsyncAction2 = _slicedToArray(_useAsyncAction, 2),\n      submit = _useAsyncAction2[0],\n      submitInProgress = _useAsyncAction2[1];\n\n  return {\n    submit: useMemo(function () {\n      return handleSubmit(submit);\n    }, [handleSubmit, submit]),\n    submitInProgress: submitInProgress || methods.formState.isSubmitting,\n    errors: methods.errors,\n    register: methods.register,\n    watch: methods.watch,\n    methods: methods\n  };\n}\n\n_s(useProductForm, \"OmraMmY8Tzjgm+YdHBhlf5pvYsI=\", false, function () {\n  return [useIntl, useCartAddItem, useForm, useAsyncAction];\n});","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/services/forms/product.ts"],"names":["useEffect","useMemo","useRef","useForm","useIntl","useAsyncAction","useCartAddItem","useProductForm","product","intl","cartAddItem","methods","defaultValues","quantity","handleSubmit","submitCount","formState","prevSubmitCount","current","Object","keys","errors","length","alert","formatMessage","id","options","data","forEach","optionSlug","option","find","x","slug","value","values","push","name","submit","submitInProgress","isSubmitting","register","watch"],"mappings":"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","sourcesContent":["/* eslint-disable no-alert */\n\n// react\nimport { useEffect, useMemo, useRef } from 'react';\n// third-party\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\n// application\nimport { ICartItemOption } from '~/store/cart/cartTypes';\nimport { IProduct } from '~/interfaces/product';\nimport { useAsyncAction } from '~/store/hooks';\nimport { useCartAddItem } from '~/store/cart/cartHooks';\n\nexport interface IProductForm {\n    options: Record<string, any>;\n    quantity: number | string;\n}\n\nexport function useProductForm(product: IProduct | null) {\n    const intl = useIntl();\n    const cartAddItem = useCartAddItem();\n    const methods = useForm<IProductForm>({\n        defaultValues: {\n            quantity: 1,\n        },\n    });\n    const { handleSubmit } = methods;\n    const { submitCount } = methods.formState;\n    const prevSubmitCount = useRef(0);\n\n    useEffect(() => {\n        if (prevSubmitCount.current !== submitCount && Object.keys(methods.errors).length > 0) {\n            if (methods.errors.quantity) {\n                alert(intl.formatMessage({ id: 'ERROR_ADD_TO_CART_QUANTITY' }));\n            } else if (methods.errors.options) {\n                alert(intl.formatMessage({ id: 'ERROR_ADD_TO_CART_OPTIONS' }));\n            }\n        }\n\n        prevSubmitCount.current = submitCount;\n    }, [intl, submitCount, methods.errors]);\n\n    const [submit, submitInProgress] = useAsyncAction(async (data: IProductForm) => {\n        if (!product) {\n            return null;\n        }\n\n        const options: ICartItemOption[] = [];\n\n        Object.keys(data.options).forEach((optionSlug) => {\n            const option = product.options.find((x) => x.slug === optionSlug);\n\n            if (!option) {\n                return;\n            }\n\n            const value = option.values.find((x) => x.slug === data.options[optionSlug]);\n\n            if (!value) {\n                return;\n            }\n\n            options.push({ name: option.name, value: value.name });\n        });\n\n        return cartAddItem(product, options, typeof data.quantity === 'number' ? data.quantity : 1);\n    }, [product, cartAddItem]);\n\n    return {\n        submit: useMemo(() => handleSubmit(submit), [handleSubmit, submit]),\n        submitInProgress: submitInProgress || methods.formState.isSubmitting,\n        errors: methods.errors,\n        register: methods.register,\n        watch: methods.watch,\n        methods,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}