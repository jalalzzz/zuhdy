{"ast":null,"code":"/* eslint-disable no-alert */\n// react\nimport { useEffect, useMemo, useRef } from 'react'; // third-party\n\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl'; // application\n\nimport { useAsyncAction } from '~/store/hooks';\nimport { useCartAddItem } from '~/store/cart/cartHooks';\nexport function useProductForm(product) {\n  const intl = useIntl();\n  const cartAddItem = useCartAddItem();\n  const methods = useForm({\n    defaultValues: {\n      quantity: 1\n    }\n  });\n  const {\n    handleSubmit\n  } = methods;\n  const {\n    submitCount\n  } = methods.formState;\n  const prevSubmitCount = useRef(0);\n  useEffect(() => {\n    if (prevSubmitCount.current !== submitCount && Object.keys(methods.errors).length > 0) {\n      if (methods.errors.quantity) {\n        alert(intl.formatMessage({\n          id: 'ERROR_ADD_TO_CART_QUANTITY'\n        }));\n      } else if (methods.errors.options) {\n        alert(intl.formatMessage({\n          id: 'ERROR_ADD_TO_CART_OPTIONS'\n        }));\n      }\n    }\n\n    prevSubmitCount.current = submitCount;\n  }, [intl, submitCount, methods.errors]);\n  const [submit, submitInProgress] = useAsyncAction(async data => {\n    if (!product) {\n      return null;\n    }\n\n    const options = [];\n    Object.keys(data.options).forEach(optionSlug => {\n      const option = product.options.find(x => x.slug === optionSlug);\n\n      if (!option) {\n        return;\n      }\n\n      const value = option.values.find(x => x.slug === data.options[optionSlug]);\n\n      if (!value) {\n        return;\n      }\n\n      options.push({\n        name: option.name,\n        value: value.name\n      });\n    });\n    return cartAddItem(product, options, typeof data.quantity === 'number' ? data.quantity : 1);\n  }, [product, cartAddItem]);\n  return {\n    submit: useMemo(() => handleSubmit(submit), [handleSubmit, submit]),\n    submitInProgress: submitInProgress || methods.formState.isSubmitting,\n    errors: methods.errors,\n    register: methods.register,\n    watch: methods.watch,\n    methods\n  };\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/services/forms/product.ts"],"names":["useEffect","useMemo","useRef","useForm","useIntl","useAsyncAction","useCartAddItem","useProductForm","product","intl","cartAddItem","methods","defaultValues","quantity","handleSubmit","submitCount","formState","prevSubmitCount","current","Object","keys","errors","length","alert","formatMessage","id","options","submit","submitInProgress","data","forEach","optionSlug","option","find","x","slug","value","values","push","name","isSubmitting","register","watch"],"mappings":"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","sourcesContent":["/* eslint-disable no-alert */\n\n// react\nimport { useEffect, useMemo, useRef } from 'react';\n// third-party\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\n// application\nimport { ICartItemOption } from '~/store/cart/cartTypes';\nimport { IProduct } from '~/interfaces/product';\nimport { useAsyncAction } from '~/store/hooks';\nimport { useCartAddItem } from '~/store/cart/cartHooks';\n\nexport interface IProductForm {\n    options: Record<string, any>;\n    quantity: number | string;\n}\n\nexport function useProductForm(product: IProduct | null) {\n    const intl = useIntl();\n    const cartAddItem = useCartAddItem();\n    const methods = useForm<IProductForm>({\n        defaultValues: {\n            quantity: 1,\n        },\n    });\n    const { handleSubmit } = methods;\n    const { submitCount } = methods.formState;\n    const prevSubmitCount = useRef(0);\n\n    useEffect(() => {\n        if (prevSubmitCount.current !== submitCount && Object.keys(methods.errors).length > 0) {\n            if (methods.errors.quantity) {\n                alert(intl.formatMessage({ id: 'ERROR_ADD_TO_CART_QUANTITY' }));\n            } else if (methods.errors.options) {\n                alert(intl.formatMessage({ id: 'ERROR_ADD_TO_CART_OPTIONS' }));\n            }\n        }\n\n        prevSubmitCount.current = submitCount;\n    }, [intl, submitCount, methods.errors]);\n\n    const [submit, submitInProgress] = useAsyncAction(async (data: IProductForm) => {\n        if (!product) {\n            return null;\n        }\n\n        const options: ICartItemOption[] = [];\n\n        Object.keys(data.options).forEach((optionSlug) => {\n            const option = product.options.find((x) => x.slug === optionSlug);\n\n            if (!option) {\n                return;\n            }\n\n            const value = option.values.find((x) => x.slug === data.options[optionSlug]);\n\n            if (!value) {\n                return;\n            }\n\n            options.push({ name: option.name, value: value.name });\n        });\n\n        return cartAddItem(product, options, typeof data.quantity === 'number' ? data.quantity : 1);\n    }, [product, cartAddItem]);\n\n    return {\n        submit: useMemo(() => handleSubmit(submit), [handleSubmit, submit]),\n        submitInProgress: submitInProgress || methods.formState.isSubmitting,\n        errors: methods.errors,\n        register: methods.register,\n        watch: methods.watch,\n        methods,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}