{"ast":null,"code":"// third-party\nimport { toast } from 'react-toastify'; // application\n\nimport { globalIntl } from '~/services/i18n/global-intl';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_UPDATE_QUANTITIES } from '~/store/cart/cartActionTypes';\nexport function cartAddItemSuccess(product) {\n  var _globalIntl;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var quantity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  toast.success((_globalIntl = globalIntl()) === null || _globalIntl === void 0 ? void 0 : _globalIntl.formatMessage({\n    id: 'TEXT_TOAST_PRODUCT_ADDED_TO_CART'\n  }, {\n    productName: product.name\n  }));\n  return {\n    type: CART_ADD_ITEM,\n    product: product,\n    options: options,\n    quantity: quantity\n  };\n}\nexport function cartRemoveItemSuccess(itemId) {\n  return {\n    type: CART_REMOVE_ITEM,\n    itemId: itemId\n  };\n}\nexport function cartUpdateQuantitiesSuccess(quantities) {\n  return {\n    type: CART_UPDATE_QUANTITIES,\n    quantities: quantities\n  };\n}\nexport function cartAddItem(product) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var quantity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  // sending request to server, timeout is used as a stub\n  return function (dispatch) {\n    return new Promise(function (resolve) {\n      setTimeout(function () {\n        dispatch(cartAddItemSuccess(product, options, quantity));\n        resolve();\n      }, 250);\n    });\n  };\n}\nexport function cartRemoveItem(itemId) {\n  // sending request to server, timeout is used as a stub\n  return function (dispatch) {\n    return new Promise(function (resolve) {\n      setTimeout(function () {\n        dispatch(cartRemoveItemSuccess(itemId));\n        resolve();\n      }, 250);\n    });\n  };\n}\nexport function cartUpdateQuantities(quantities) {\n  // sending request to server, timeout is used as a stub\n  return function (dispatch) {\n    return new Promise(function (resolve) {\n      setTimeout(function () {\n        dispatch(cartUpdateQuantitiesSuccess(quantities));\n        resolve();\n      }, 250);\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/store/cart/cartActions.ts"],"names":["toast","globalIntl","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_UPDATE_QUANTITIES","cartAddItemSuccess","product","options","quantity","success","formatMessage","id","productName","name","type","cartRemoveItemSuccess","itemId","cartUpdateQuantitiesSuccess","quantities","cartAddItem","dispatch","Promise","resolve","setTimeout","cartRemoveItem","cartUpdateQuantities"],"mappings":"AAAA;AACA,SAASA,KAAT,QAAsB,gBAAtB,C,CACA;;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAGA,SACIC,aADJ,EAEIC,gBAFJ,EAGIC,sBAHJ,QASO,8BATP;AAWA,OAAO,SAASC,kBAAT,CACHC,OADG,EAIc;AAAA;;AAAA,MAFjBC,OAEiB,uEAFY,EAEZ;AAAA,MADjBC,QACiB,uEADN,CACM;AACjBR,EAAAA,KAAK,CAACS,OAAN,gBAAcR,UAAU,EAAxB,gDAAc,YAAcS,aAAd,CACV;AAAEC,IAAAA,EAAE,EAAE;AAAN,GADU,EAEV;AAAEC,IAAAA,WAAW,EAAEN,OAAO,CAACO;AAAvB,GAFU,CAAd;AAKA,SAAO;AACHC,IAAAA,IAAI,EAAEZ,aADH;AAEHI,IAAAA,OAAO,EAAPA,OAFG;AAGHC,IAAAA,OAAO,EAAPA,OAHG;AAIHC,IAAAA,QAAQ,EAARA;AAJG,GAAP;AAMH;AAED,OAAO,SAASO,qBAAT,CAA+BC,MAA/B,EAAqE;AACxE,SAAO;AACHF,IAAAA,IAAI,EAAEX,gBADH;AAEHa,IAAAA,MAAM,EAANA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,2BAAT,CAAqCC,UAArC,EAAiG;AACpG,SAAO;AACHJ,IAAAA,IAAI,EAAEV,sBADH;AAEHc,IAAAA,UAAU,EAAVA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,WAAT,CACHb,OADG,EAI2B;AAAA,MAF9BC,OAE8B,uEAFD,EAEC;AAAA,MAD9BC,QAC8B,uEADnB,CACmB;AAC9B;AACA,SAAO,UAACY,QAAD;AAAA,WACH,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACrBC,MAAAA,UAAU,CAAC,YAAM;AACbH,QAAAA,QAAQ,CAACf,kBAAkB,CAACC,OAAD,EAAUC,OAAV,EAAmBC,QAAnB,CAAnB,CAAR;AACAc,QAAAA,OAAO;AACV,OAHS,EAGP,GAHO,CAAV;AAIH,KALD,CADG;AAAA,GAAP;AAQH;AAED,OAAO,SAASE,cAAT,CAAwBR,MAAxB,EAAwE;AAC3E;AACA,SAAO,UAACI,QAAD;AAAA,WACH,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACrBC,MAAAA,UAAU,CAAC,YAAM;AACbH,QAAAA,QAAQ,CAACL,qBAAqB,CAACC,MAAD,CAAtB,CAAR;AACAM,QAAAA,OAAO;AACV,OAHS,EAGP,GAHO,CAAV;AAIH,KALD,CADG;AAAA,GAAP;AAQH;AAED,OAAO,SAASG,oBAAT,CAA8BP,UAA9B,EAA8F;AACjG;AACA,SAAO,UAACE,QAAD;AAAA,WACH,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACrBC,MAAAA,UAAU,CAAC,YAAM;AACbH,QAAAA,QAAQ,CAACH,2BAA2B,CAACC,UAAD,CAA5B,CAAR;AACAI,QAAAA,OAAO;AACV,OAHS,EAGP,GAHO,CAAV;AAIH,KALD,CADG;AAAA,GAAP;AAQH","sourcesContent":["// third-party\nimport { toast } from 'react-toastify';\n// application\nimport { globalIntl } from '~/services/i18n/global-intl';\nimport { ICartItemOption } from '~/store/cart/cartTypes';\nimport { IProduct } from '~/interfaces/product';\nimport {\n    CART_ADD_ITEM,\n    CART_REMOVE_ITEM,\n    CART_UPDATE_QUANTITIES,\n    CartAddItemAction,\n    CartItemQuantity,\n    CartRemoveItemAction,\n    CartThunkAction,\n    CartUpdateQuantitiesAction,\n} from '~/store/cart/cartActionTypes';\n\nexport function cartAddItemSuccess(\n    product: IProduct,\n    options: ICartItemOption[] = [],\n    quantity = 1,\n): CartAddItemAction {\n    toast.success(globalIntl()?.formatMessage(\n        { id: 'TEXT_TOAST_PRODUCT_ADDED_TO_CART' },\n        { productName: product.name },\n    ));\n\n    return {\n        type: CART_ADD_ITEM,\n        product,\n        options,\n        quantity,\n    };\n}\n\nexport function cartRemoveItemSuccess(itemId: number): CartRemoveItemAction {\n    return {\n        type: CART_REMOVE_ITEM,\n        itemId,\n    };\n}\n\nexport function cartUpdateQuantitiesSuccess(quantities: CartItemQuantity[]): CartUpdateQuantitiesAction {\n    return {\n        type: CART_UPDATE_QUANTITIES,\n        quantities,\n    };\n}\n\nexport function cartAddItem(\n    product: IProduct,\n    options: ICartItemOption[] = [],\n    quantity = 1,\n): CartThunkAction<Promise<void>> {\n    // sending request to server, timeout is used as a stub\n    return (dispatch) => (\n        new Promise((resolve) => {\n            setTimeout(() => {\n                dispatch(cartAddItemSuccess(product, options, quantity));\n                resolve();\n            }, 250);\n        })\n    );\n}\n\nexport function cartRemoveItem(itemId: number): CartThunkAction<Promise<void>> {\n    // sending request to server, timeout is used as a stub\n    return (dispatch) => (\n        new Promise((resolve) => {\n            setTimeout(() => {\n                dispatch(cartRemoveItemSuccess(itemId));\n                resolve();\n            }, 250);\n        })\n    );\n}\n\nexport function cartUpdateQuantities(quantities: CartItemQuantity[]): CartThunkAction<Promise<void>> {\n    // sending request to server, timeout is used as a stub\n    return (dispatch) => (\n        new Promise((resolve) => {\n            setTimeout(() => {\n                dispatch(cartUpdateQuantitiesSuccess(quantities));\n                resolve();\n            }, 250);\n        })\n    );\n}\n"]},"metadata":{},"sourceType":"module"}