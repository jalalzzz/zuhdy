{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// react\nimport React, { useMemo } from 'react'; // application\n\nimport { baseUrl } from '~/services/utils';\nconst AppImage = React.forwardRef((props, ref) => {\n  const {\n    src\n  } = props,\n        otherProps = _objectWithoutProperties(props, [\"src\"]);\n\n  const normalizedSrc = useMemo(() => src ? baseUrl(src) : src, [src]);\n  return __jsx(\"img\", _extends({\n    alt: \"\"\n  }, otherProps, {\n    src: normalizedSrc,\n    ref: ref\n  }));\n});\nexport default AppImage;","map":null,"metadata":{},"sourceType":"module"}