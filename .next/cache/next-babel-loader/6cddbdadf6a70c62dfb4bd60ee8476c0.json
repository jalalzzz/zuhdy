{"ast":null,"code":"// react\nimport { useContext, useMemo } from 'react'; // application\n\nimport { getAllLanguages } from '~/services/i18n/utils';\nimport { LanguageLocaleContext, LanguageSetLocaleContext } from '~/services/i18n/context';\nexport function useLocale() {\n  return useContext(LanguageLocaleContext);\n}\nexport function useSetLocale() {\n  return useContext(LanguageSetLocaleContext);\n}\nexport function useLanguage() {\n  const locale = useLocale();\n  return useMemo(() => getAllLanguages().find(language => language.locale === locale), [locale]);\n}\nexport function useDirection() {\n  const {\n    direction\n  } = useLanguage();\n  return direction;\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/services/i18n/hooks.ts"],"names":["useContext","useMemo","getAllLanguages","LanguageLocaleContext","LanguageSetLocaleContext","useLocale","useSetLocale","useLanguage","locale","find","language","useDirection","direction"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC,C,CACA;;AACA,SAASC,eAAT,QAAgC,uBAAhC;AAEA,SAASC,qBAAT,EAAgCC,wBAAhC,QAAgE,yBAAhE;AAEA,OAAO,SAASC,SAAT,GAAqB;AACxB,SAAOL,UAAU,CAACG,qBAAD,CAAjB;AACH;AAED,OAAO,SAASG,YAAT,GAAwB;AAC3B,SAAON,UAAU,CAACI,wBAAD,CAAjB;AACH;AAED,OAAO,SAASG,WAAT,GAAkC;AACrC,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AAEA,SAAOJ,OAAO,CAAC,MAAMC,eAAe,GAAGO,IAAlB,CAAwBC,QAAD,IAAcA,QAAQ,CAACF,MAAT,KAAoBA,MAAzD,CAAP,EAA0E,CAACA,MAAD,CAA1E,CAAd;AACH;AAED,OAAO,SAASG,YAAT,GAAoC;AACvC,QAAM;AAAEC,IAAAA;AAAF,MAAgBL,WAAW,EAAjC;AAEA,SAAOK,SAAP;AACH","sourcesContent":["// react\nimport { useContext, useMemo } from 'react';\n// application\nimport { getAllLanguages } from '~/services/i18n/utils';\nimport { IDirection, ILanguage } from '~/interfaces/language';\nimport { LanguageLocaleContext, LanguageSetLocaleContext } from '~/services/i18n/context';\n\nexport function useLocale() {\n    return useContext(LanguageLocaleContext);\n}\n\nexport function useSetLocale() {\n    return useContext(LanguageSetLocaleContext);\n}\n\nexport function useLanguage(): ILanguage {\n    const locale = useLocale();\n\n    return useMemo(() => getAllLanguages().find((language) => language.locale === locale)!, [locale]);\n}\n\nexport function useDirection(): IDirection {\n    const { direction } = useLanguage();\n\n    return direction;\n}\n"]},"metadata":{},"sourceType":"module"}