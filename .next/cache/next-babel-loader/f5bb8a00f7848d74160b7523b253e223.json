{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n// third-party\nimport queryString from 'query-string'; // application\n\nimport { shopInitThunk } from '~/store/shop/shopActions';\nexport function parseQueryOptions(query) {\n  var queryObject = queryString.parse(query);\n  var optionValues = {};\n\n  if (typeof queryObject.page === 'string') {\n    optionValues.page = parseFloat(queryObject.page);\n  }\n\n  if (typeof queryObject.limit === 'string') {\n    optionValues.limit = parseFloat(queryObject.limit);\n  }\n\n  if (typeof queryObject.sort === 'string') {\n    optionValues.sort = queryObject.sort;\n  }\n\n  return optionValues;\n}\nexport function parseQueryFilters(query) {\n  var queryObject = queryString.parse(query);\n  var filterValues = {};\n  Object.keys(queryObject).forEach(function (param) {\n    var value = queryObject[param];\n    var mr = param.match(/^filter_([-_A-Za-z0-9]+)$/);\n\n    if (!mr || typeof value !== 'string') {\n      return;\n    }\n\n    var filterSlug = mr[1];\n    filterValues[filterSlug] = value;\n  });\n  return filterValues;\n}\nexport function buildQuery(options, filters) {\n  var params = {};\n\n  if (options.page !== 1) {\n    params.page = options.page;\n  }\n\n  if (options.limit !== 12) {\n    params.limit = options.limit;\n  }\n\n  if (options.sort !== 'default') {\n    params.sort = options.sort;\n  }\n\n  Object.keys(filters).filter(function (x) {\n    return x !== 'category' && !!filters[x];\n  }).forEach(function (filterSlug) {\n    params[\"filter_\".concat(filterSlug)] = filters[filterSlug];\n  });\n  return queryString.stringify(params, {\n    encode: false\n  });\n}\nexport default function getShopPageData(_x, _x2) {\n  return _getShopPageData.apply(this, arguments);\n}\n\nfunction _getShopPageData() {\n  _getShopPageData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, slug) {\n    var _context$params;\n\n    var categorySlug, query, options, filters, dispatch;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            categorySlug = slug || (typeof ((_context$params = context.params) === null || _context$params === void 0 ? void 0 : _context$params.slug) === 'string' ? context.params.slug : null);\n\n            if (!(typeof context.req.url === 'string')) {\n              _context.next = 8;\n              break;\n            }\n\n            query = queryString.stringify(queryString.parseUrl(context.req.url).query);\n            options = parseQueryOptions(query);\n            filters = parseQueryFilters(query);\n            dispatch = context.store.dispatch;\n            _context.next = 8;\n            return dispatch(shopInitThunk(categorySlug, options, filters));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getShopPageData.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/store/shop/shopHelpers.ts"],"names":["queryString","shopInitThunk","parseQueryOptions","query","queryObject","parse","optionValues","page","parseFloat","limit","sort","parseQueryFilters","filterValues","Object","keys","forEach","param","value","mr","match","filterSlug","buildQuery","options","filters","params","filter","x","stringify","encode","getShopPageData","context","slug","categorySlug","req","url","parseUrl","dispatch","store"],"mappings":"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","sourcesContent":["// third-party\nimport queryString from 'query-string';\n// application\nimport { AppDispatch } from '~/store/types';\nimport { GetServerSidePropsContext } from '~/store/store';\nimport { IFilterValues, IListOptions } from '~/interfaces/list';\nimport { shopInitThunk } from '~/store/shop/shopActions';\n\nexport function parseQueryOptions(query: string) {\n    const queryObject = queryString.parse(query);\n    const optionValues: IListOptions = {};\n\n    if (typeof queryObject.page === 'string') {\n        optionValues.page = parseFloat(queryObject.page);\n    }\n    if (typeof queryObject.limit === 'string') {\n        optionValues.limit = parseFloat(queryObject.limit);\n    }\n    if (typeof queryObject.sort === 'string') {\n        optionValues.sort = queryObject.sort;\n    }\n\n    return optionValues;\n}\n\nexport function parseQueryFilters(query: string) {\n    const queryObject = queryString.parse(query);\n    const filterValues: IFilterValues = {};\n\n    Object.keys(queryObject).forEach((param) => {\n        const value = queryObject[param];\n        const mr = param.match(/^filter_([-_A-Za-z0-9]+)$/);\n\n        if (!mr || typeof value !== 'string') {\n            return;\n        }\n\n        const filterSlug = mr[1];\n\n        filterValues[filterSlug] = value;\n    });\n\n    return filterValues;\n}\n\nexport function buildQuery(options: IListOptions, filters: IFilterValues) {\n    const params: { [key: string]: any } = {};\n\n    if (options.page !== 1) {\n        params.page = options.page;\n    }\n\n    if (options.limit !== 12) {\n        params.limit = options.limit;\n    }\n\n    if (options.sort !== 'default') {\n        params.sort = options.sort;\n    }\n\n    Object.keys(filters).filter((x) => x !== 'category' && !!filters[x]).forEach((filterSlug) => {\n        params[`filter_${filterSlug}`] = filters[filterSlug];\n    });\n\n    return queryString.stringify(params, { encode: false });\n}\n\nexport default async function getShopPageData(context: GetServerSidePropsContext, slug?: string): Promise<void> {\n    const categorySlug = slug || (typeof context.params?.slug === 'string' ? context.params.slug : null);\n\n    if (typeof context.req.url === 'string') {\n        const query = queryString.stringify(queryString.parseUrl(context.req.url).query);\n        const options = parseQueryOptions(query);\n        const filters = parseQueryFilters(query);\n        const dispatch = context.store.dispatch as AppDispatch;\n\n        await dispatch(shopInitThunk(categorySlug, options, filters));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}