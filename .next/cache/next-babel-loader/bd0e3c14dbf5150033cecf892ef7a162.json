{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Shbaita Studio\\\\Documents\\\\project\\\\new1\\\\themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template\\\\Sources\\\\src\\\\components\\\\filters\\\\FilterRange.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n// react\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'; // third-party\n\nimport InputRange from 'react-input-range'; // application\n\nimport CurrencyFormat from '~/components/shared/CurrencyFormat';\nimport { useDirection } from '~/services/i18n/hooks';\n\nfunction getFirstValidValue() {\n  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n\n  return values.reduce(function (acc, value) {\n    return acc === null && (value || value === 0) ? value : acc;\n  }, null);\n}\n\nfunction FilterRange(props) {\n  _s();\n\n  var _this = this;\n\n  var options = props.options,\n      value = props.value,\n      onChangeValue = props.onChangeValue;\n\n  var _ref = value || [],\n      _ref2 = _slicedToArray(_ref, 2),\n      propsFrom = _ref2[0],\n      propsTo = _ref2[1];\n\n  var _useState = useState(),\n      timer = _useState[0],\n      setTimer = _useState[1];\n\n  var _useState2 = useState([propsFrom, propsTo]),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _state = _slicedToArray(state, 2),\n      stateFrom = _state[0],\n      stateTo = _state[1];\n\n  var direction = useDirection();\n  var min = options.min,\n      max = options.max;\n  var from = Math.max(getFirstValidValue(stateFrom, propsFrom, min), min);\n  var to = Math.min(getFirstValidValue(stateTo, propsTo, max), max);\n  var fromLabel = from;\n  var toLabel = to; // since react-input-range does not support RTL direction,\n  // we just need to invert and swipe values\n\n  if (direction === 'rtl') {\n    var _ref3 = [to * -1, from * -1];\n    from = _ref3[0];\n    to = _ref3[1];\n    var _ref4 = [max * -1, min * -1];\n    min = _ref4[0];\n    max = _ref4[1];\n    fromLabel = from * -1;\n    toLabel = to * -1;\n  } // Update state from props.\n\n\n  useEffect(function () {\n    setState([propsFrom, propsTo]);\n  }, [propsFrom, propsTo]); // Clear previous timer.\n\n  useEffect(function () {\n    return function () {\n      clearTimeout(timer);\n    };\n  }, [timer]);\n  var handleChange = useCallback(function (newValue) {\n    var newFrom = newValue.min,\n        newTo = newValue.max; // This is needed to fix a bug in react-input-range.\n\n    var _ref5 = [Math.max(newFrom, min), Math.min(newTo, max)];\n    newFrom = _ref5[0];\n    newTo = _ref5[1];\n\n    // since react-input-range does not support RTL direction,\n    // we just need to invert and swipe values\n    if (direction === 'rtl') {\n      var _ref6 = [newTo * -1, newFrom * -1];\n      newFrom = _ref6[0];\n      newTo = _ref6[1];\n    }\n\n    setState([newFrom, newTo]);\n\n    if (onChangeValue) {\n      setTimer(setTimeout(function () {\n        onChangeValue({\n          filter: options,\n          value: [newFrom, newTo]\n        });\n      }, 250));\n    }\n  }, [min, max, options, onChangeValue, direction, setTimer, setState]);\n  return useMemo(function () {\n    return __jsx(\"div\", {\n      className: \"filter-range\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"filter-range__slider\",\n      dir: \"ltr\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, __jsx(InputRange, {\n      minValue: min,\n      maxValue: max,\n      value: {\n        min: from,\n        max: to\n      },\n      step: 1,\n      onChange: handleChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    })), __jsx(\"div\", {\n      className: \"filter-range__title-button\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"filter-range__title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, __jsx(\"span\", {\n      className: \"filter-range__min-value\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, __jsx(CurrencyFormat, {\n      value: fromLabel,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 63\n      }\n    })), ' â€“ ', __jsx(\"span\", {\n      className: \"filter-range__max-value\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, __jsx(CurrencyFormat, {\n      value: toLabel,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 63\n      }\n    })))));\n  }, [min, max, from, to, fromLabel, toLabel, handleChange]);\n}\n\n_s(FilterRange, \"a/VNvHyf6T2u7YNPhMjJFRy+SM0=\", false, function () {\n  return [useDirection];\n});\n\n_c = FilterRange;\nexport default FilterRange;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterRange\");","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/components/filters/FilterRange.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","InputRange","CurrencyFormat","useDirection","getFirstValidValue","values","reduce","acc","value","FilterRange","props","options","onChangeValue","propsFrom","propsTo","timer","setTimer","state","setState","stateFrom","stateTo","direction","min","max","from","Math","to","fromLabel","toLabel","clearTimeout","handleChange","newValue","newFrom","newTo","setTimeout","filter"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IACIC,WADJ,EAEIC,SAFJ,EAGIC,OAHJ,EAIIC,QAJJ,QAKO,OALP,C,CAMA;;AACA,OAAOC,UAAP,MAAuB,mBAAvB,C,CACA;;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,SAASC,YAAT,QAA6B,uBAA7B;;AAEA,SAASC,kBAAT,GAA4E;AAAA,oCAA7CC,MAA6C;AAA7CA,IAAAA,MAA6C;AAAA;;AACxE,SAAOA,MAAM,CAACC,MAAP,CAAc,UAACC,GAAD,EAAMC,KAAN;AAAA,WACjBD,GAAG,KAAK,IAAR,KAAiBC,KAAK,IAAIA,KAAK,KAAK,CAApC,IACMA,KADN,GAEMD,GAHW;AAAA,GAAd,EAIJ,IAJI,CAAP;AAKH;;AAQD,SAASE,WAAT,CAAqBC,KAArB,EAAmC;AAAA;;AAAA;;AAAA,MACvBC,OADuB,GACWD,KADX,CACvBC,OADuB;AAAA,MACdH,KADc,GACWE,KADX,CACdF,KADc;AAAA,MACPI,aADO,GACWF,KADX,CACPE,aADO;;AAAA,aAEFJ,KAAK,IAAI,EAFP;AAAA;AAAA,MAExBK,SAFwB;AAAA,MAEbC,OAFa;;AAAA,kBAGLd,QAAQ,EAHH;AAAA,MAGxBe,KAHwB;AAAA,MAGjBC,QAHiB;;AAAA,mBAILhB,QAAQ,CAAC,CAACa,SAAD,EAAYC,OAAZ,CAAD,CAJH;AAAA,MAIxBG,KAJwB;AAAA,MAIjBC,QAJiB;;AAAA,8BAKFD,KALE;AAAA,MAKxBE,SALwB;AAAA,MAKbC,OALa;;AAM/B,MAAMC,SAAS,GAAGlB,YAAY,EAA9B;AAN+B,MAQzBmB,GARyB,GAQZX,OARY,CAQzBW,GARyB;AAAA,MAQpBC,GARoB,GAQZZ,OARY,CAQpBY,GARoB;AAS/B,MAAIC,IAAI,GAAGC,IAAI,CAACF,GAAL,CAASnB,kBAAkB,CAACe,SAAD,EAAYN,SAAZ,EAAuBS,GAAvB,CAA3B,EAAyDA,GAAzD,CAAX;AACA,MAAII,EAAE,GAAGD,IAAI,CAACH,GAAL,CAASlB,kBAAkB,CAACgB,OAAD,EAAUN,OAAV,EAAmBS,GAAnB,CAA3B,EAAqDA,GAArD,CAAT;AACA,MAAII,SAAS,GAAGH,IAAhB;AACA,MAAII,OAAO,GAAGF,EAAd,CAZ+B,CAc/B;AACA;;AACA,MAAIL,SAAS,KAAK,KAAlB,EAAyB;AAAA,gBACR,CAACK,EAAE,GAAG,CAAC,CAAP,EAAUF,IAAI,GAAG,CAAC,CAAlB,CADQ;AACpBA,IAAAA,IADoB;AACdE,IAAAA,EADc;AAAA,gBAER,CAACH,GAAG,GAAG,CAAC,CAAR,EAAWD,GAAG,GAAG,CAAC,CAAlB,CAFQ;AAEpBA,IAAAA,GAFoB;AAEfC,IAAAA,GAFe;AAGpBI,IAAAA,SAHoB,GAGGH,IAAI,GAAG,CAAC,CAHX;AAGTI,IAAAA,OAHS,GAGcF,EAAE,GAAG,CAAC,CAHpB;AAIxB,GApB8B,CAsB/B;;;AACA5B,EAAAA,SAAS,CAAC,YAAM;AACZoB,IAAAA,QAAQ,CAAC,CAACL,SAAD,EAAYC,OAAZ,CAAD,CAAR;AACH,GAFQ,EAEN,CAACD,SAAD,EAAYC,OAAZ,CAFM,CAAT,CAvB+B,CA2B/B;;AACAhB,EAAAA,SAAS,CAAC;AAAA,WAAM,YAAM;AAClB+B,MAAAA,YAAY,CAACd,KAAD,CAAZ;AACH,KAFS;AAAA,GAAD,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,MAAMe,YAAY,GAAGjC,WAAW,CAAC,UAACkC,QAAD,EAAc;AAAA,QAChCC,OADgC,GACRD,QADQ,CACrCT,GADqC;AAAA,QAClBW,KADkB,GACRF,QADQ,CACvBR,GADuB,EAG3C;;AAH2C,gBAIxB,CAACE,IAAI,CAACF,GAAL,CAASS,OAAT,EAAkBV,GAAlB,CAAD,EAAyBG,IAAI,CAACH,GAAL,CAASW,KAAT,EAAgBV,GAAhB,CAAzB,CAJwB;AAI1CS,IAAAA,OAJ0C;AAIjCC,IAAAA,KAJiC;;AAM3C;AACA;AACA,QAAIZ,SAAS,KAAK,KAAlB,EAAyB;AAAA,kBACF,CAACY,KAAK,GAAG,CAAC,CAAV,EAAaD,OAAO,GAAG,CAAC,CAAxB,CADE;AACpBA,MAAAA,OADoB;AACXC,MAAAA,KADW;AAExB;;AAEDf,IAAAA,QAAQ,CAAC,CAACc,OAAD,EAAUC,KAAV,CAAD,CAAR;;AAEA,QAAIrB,aAAJ,EAAmB;AACfI,MAAAA,QAAQ,CAACkB,UAAU,CAAC,YAAM;AACtBtB,QAAAA,aAAa,CAAC;AAAEuB,UAAAA,MAAM,EAAExB,OAAV;AAAmBH,UAAAA,KAAK,EAAE,CAACwB,OAAD,EAAUC,KAAV;AAA1B,SAAD,CAAb;AACH,OAFkB,EAEhB,GAFgB,CAAX,CAAR;AAGH;AACJ,GAnB+B,EAmB7B,CAACX,GAAD,EAAMC,GAAN,EAAWZ,OAAX,EAAoBC,aAApB,EAAmCS,SAAnC,EAA8CL,QAA9C,EAAwDE,QAAxD,CAnB6B,CAAhC;AAqBA,SAAOnB,OAAO,CAAC;AAAA,WACX;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAsC,MAAA,GAAG,EAAC,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,UAAD;AACI,MAAA,QAAQ,EAAEuB,GADd;AAEI,MAAA,QAAQ,EAAEC,GAFd;AAGI,MAAA,KAAK,EAAE;AAAED,QAAAA,GAAG,EAAEE,IAAP;AAAaD,QAAAA,GAAG,EAAEG;AAAlB,OAHX;AAII,MAAA,IAAI,EAAE,CAJV;AAKI,MAAA,QAAQ,EAAEI,YALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAUI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,yBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0C,MAAC,cAAD;AAAgB,MAAA,KAAK,EAAEH,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA1C,CADJ,EAEK,KAFL,EAGI;AAAM,MAAA,SAAS,EAAC,yBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0C,MAAC,cAAD;AAAgB,MAAA,KAAK,EAAEC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA1C,CAHJ,CADJ,CAVJ,CADW;AAAA,GAAD,EAmBX,CAACN,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBE,EAAjB,EAAqBC,SAArB,EAAgCC,OAAhC,EAAyCE,YAAzC,CAnBW,CAAd;AAoBH;;GAzEQrB,W;UAMaN,Y;;;KANbM,W;AA2ET,eAAeA,WAAf","sourcesContent":["// react\nimport React, {\n    useCallback,\n    useEffect,\n    useMemo,\n    useState,\n} from 'react';\n// third-party\nimport InputRange from 'react-input-range';\n// application\nimport CurrencyFormat from '~/components/shared/CurrencyFormat';\nimport { IRangeFilter, IRangeFilterValue } from '~/interfaces/filter';\nimport { useDirection } from '~/services/i18n/hooks';\n\nfunction getFirstValidValue(...values: Array<number | null>): number | null {\n    return values.reduce((acc, value) => (\n        acc === null && (value || value === 0)\n            ? value\n            : acc\n    ), null);\n}\n\ninterface Props {\n    options: IRangeFilter;\n    value: IRangeFilterValue;\n    onChangeValue?: (event: { filter: IRangeFilter, value: IRangeFilterValue }) => void;\n}\n\nfunction FilterRange(props: Props) {\n    const { options, value, onChangeValue } = props;\n    const [propsFrom, propsTo] = value || [];\n    const [timer, setTimer] = useState<number>();\n    const [state, setState] = useState([propsFrom, propsTo]);\n    const [stateFrom, stateTo] = state;\n    const direction = useDirection();\n\n    let { min, max } = options;\n    let from = Math.max(getFirstValidValue(stateFrom, propsFrom, min)!, min);\n    let to = Math.min(getFirstValidValue(stateTo, propsTo, max)!, max);\n    let fromLabel = from;\n    let toLabel = to;\n\n    // since react-input-range does not support RTL direction,\n    // we just need to invert and swipe values\n    if (direction === 'rtl') {\n        [from, to] = [to * -1, from * -1];\n        [min, max] = [max * -1, min * -1];\n        [fromLabel, toLabel] = [from * -1, to * -1];\n    }\n\n    // Update state from props.\n    useEffect(() => {\n        setState([propsFrom, propsTo]);\n    }, [propsFrom, propsTo]);\n\n    // Clear previous timer.\n    useEffect(() => () => {\n        clearTimeout(timer);\n    }, [timer]);\n\n    const handleChange = useCallback((newValue) => {\n        let { min: newFrom, max: newTo } = newValue;\n\n        // This is needed to fix a bug in react-input-range.\n        [newFrom, newTo] = [Math.max(newFrom, min), Math.min(newTo, max)];\n\n        // since react-input-range does not support RTL direction,\n        // we just need to invert and swipe values\n        if (direction === 'rtl') {\n            [newFrom, newTo] = [newTo * -1, newFrom * -1];\n        }\n\n        setState([newFrom, newTo]);\n\n        if (onChangeValue) {\n            setTimer(setTimeout(() => {\n                onChangeValue({ filter: options, value: [newFrom, newTo] });\n            }, 250) as unknown as number);\n        }\n    }, [min, max, options, onChangeValue, direction, setTimer, setState]);\n\n    return useMemo(() => (\n        <div className=\"filter-range\">\n            <div className=\"filter-range__slider\" dir=\"ltr\">\n                <InputRange\n                    minValue={min}\n                    maxValue={max}\n                    value={{ min: from, max: to }}\n                    step={1}\n                    onChange={handleChange}\n                />\n            </div>\n            <div className=\"filter-range__title-button\">\n                <div className=\"filter-range__title\">\n                    <span className=\"filter-range__min-value\"><CurrencyFormat value={fromLabel} /></span>\n                    {' â€“ '}\n                    <span className=\"filter-range__max-value\"><CurrencyFormat value={toLabel} /></span>\n                </div>\n            </div>\n        </div>\n    ), [min, max, from, to, fromLabel, toLabel, handleChange]);\n}\n\nexport default FilterRange;\n"]},"metadata":{},"sourceType":"module"}