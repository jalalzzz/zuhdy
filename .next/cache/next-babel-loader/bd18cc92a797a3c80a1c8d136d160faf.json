{"ast":null,"code":"// third-party\nimport { toast } from 'react-toastify'; // application\n\nimport { globalIntl } from '~/services/i18n/global-intl';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_UPDATE_QUANTITIES } from '~/store/cart/cartActionTypes';\nexport function cartAddItemSuccess(product, options = [], quantity = 1) {\n  var _globalIntl;\n\n  toast.success((_globalIntl = globalIntl()) === null || _globalIntl === void 0 ? void 0 : _globalIntl.formatMessage({\n    id: 'TEXT_TOAST_PRODUCT_ADDED_TO_CART'\n  }, {\n    productName: product.name\n  }));\n  return {\n    type: CART_ADD_ITEM,\n    product,\n    options,\n    quantity\n  };\n}\nexport function cartRemoveItemSuccess(itemId) {\n  return {\n    type: CART_REMOVE_ITEM,\n    itemId\n  };\n}\nexport function cartUpdateQuantitiesSuccess(quantities) {\n  return {\n    type: CART_UPDATE_QUANTITIES,\n    quantities\n  };\n}\nexport function cartAddItem(product, options = [], quantity = 1) {\n  // sending request to server, timeout is used as a stub\n  return dispatch => new Promise(resolve => {\n    setTimeout(() => {\n      dispatch(cartAddItemSuccess(product, options, quantity));\n      resolve();\n    }, 250);\n  });\n}\nexport function cartRemoveItem(itemId) {\n  // sending request to server, timeout is used as a stub\n  return dispatch => new Promise(resolve => {\n    setTimeout(() => {\n      dispatch(cartRemoveItemSuccess(itemId));\n      resolve();\n    }, 250);\n  });\n}\nexport function cartUpdateQuantities(quantities) {\n  // sending request to server, timeout is used as a stub\n  return dispatch => new Promise(resolve => {\n    setTimeout(() => {\n      dispatch(cartUpdateQuantitiesSuccess(quantities));\n      resolve();\n    }, 250);\n  });\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/store/cart/cartActions.ts"],"names":["toast","globalIntl","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_UPDATE_QUANTITIES","cartAddItemSuccess","product","options","quantity","success","formatMessage","id","productName","name","type","cartRemoveItemSuccess","itemId","cartUpdateQuantitiesSuccess","quantities","cartAddItem","dispatch","Promise","resolve","setTimeout","cartRemoveItem","cartUpdateQuantities"],"mappings":"AAAA;AACA,SAASA,KAAT,QAAsB,gBAAtB,C,CACA;;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAGA,SACIC,aADJ,EAEIC,gBAFJ,EAGIC,sBAHJ,QASO,8BATP;AAWA,OAAO,SAASC,kBAAT,CACHC,OADG,EAEHC,OAA0B,GAAG,EAF1B,EAGHC,QAAQ,GAAG,CAHR,EAIc;AAAA;;AACjBR,EAAAA,KAAK,CAACS,OAAN,gBAAcR,UAAU,EAAxB,gDAAc,YAAcS,aAAd,CACV;AAAEC,IAAAA,EAAE,EAAE;AAAN,GADU,EAEV;AAAEC,IAAAA,WAAW,EAAEN,OAAO,CAACO;AAAvB,GAFU,CAAd;AAKA,SAAO;AACHC,IAAAA,IAAI,EAAEZ,aADH;AAEHI,IAAAA,OAFG;AAGHC,IAAAA,OAHG;AAIHC,IAAAA;AAJG,GAAP;AAMH;AAED,OAAO,SAASO,qBAAT,CAA+BC,MAA/B,EAAqE;AACxE,SAAO;AACHF,IAAAA,IAAI,EAAEX,gBADH;AAEHa,IAAAA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,2BAAT,CAAqCC,UAArC,EAAiG;AACpG,SAAO;AACHJ,IAAAA,IAAI,EAAEV,sBADH;AAEHc,IAAAA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,WAAT,CACHb,OADG,EAEHC,OAA0B,GAAG,EAF1B,EAGHC,QAAQ,GAAG,CAHR,EAI2B;AAC9B;AACA,SAAQY,QAAD,IACH,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACrBC,IAAAA,UAAU,CAAC,MAAM;AACbH,MAAAA,QAAQ,CAACf,kBAAkB,CAACC,OAAD,EAAUC,OAAV,EAAmBC,QAAnB,CAAnB,CAAR;AACAc,MAAAA,OAAO;AACV,KAHS,EAGP,GAHO,CAAV;AAIH,GALD,CADJ;AAQH;AAED,OAAO,SAASE,cAAT,CAAwBR,MAAxB,EAAwE;AAC3E;AACA,SAAQI,QAAD,IACH,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACrBC,IAAAA,UAAU,CAAC,MAAM;AACbH,MAAAA,QAAQ,CAACL,qBAAqB,CAACC,MAAD,CAAtB,CAAR;AACAM,MAAAA,OAAO;AACV,KAHS,EAGP,GAHO,CAAV;AAIH,GALD,CADJ;AAQH;AAED,OAAO,SAASG,oBAAT,CAA8BP,UAA9B,EAA8F;AACjG;AACA,SAAQE,QAAD,IACH,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACrBC,IAAAA,UAAU,CAAC,MAAM;AACbH,MAAAA,QAAQ,CAACH,2BAA2B,CAACC,UAAD,CAA5B,CAAR;AACAI,MAAAA,OAAO;AACV,KAHS,EAGP,GAHO,CAAV;AAIH,GALD,CADJ;AAQH","sourcesContent":["// third-party\nimport { toast } from 'react-toastify';\n// application\nimport { globalIntl } from '~/services/i18n/global-intl';\nimport { ICartItemOption } from '~/store/cart/cartTypes';\nimport { IProduct } from '~/interfaces/product';\nimport {\n    CART_ADD_ITEM,\n    CART_REMOVE_ITEM,\n    CART_UPDATE_QUANTITIES,\n    CartAddItemAction,\n    CartItemQuantity,\n    CartRemoveItemAction,\n    CartThunkAction,\n    CartUpdateQuantitiesAction,\n} from '~/store/cart/cartActionTypes';\n\nexport function cartAddItemSuccess(\n    product: IProduct,\n    options: ICartItemOption[] = [],\n    quantity = 1,\n): CartAddItemAction {\n    toast.success(globalIntl()?.formatMessage(\n        { id: 'TEXT_TOAST_PRODUCT_ADDED_TO_CART' },\n        { productName: product.name },\n    ));\n\n    return {\n        type: CART_ADD_ITEM,\n        product,\n        options,\n        quantity,\n    };\n}\n\nexport function cartRemoveItemSuccess(itemId: number): CartRemoveItemAction {\n    return {\n        type: CART_REMOVE_ITEM,\n        itemId,\n    };\n}\n\nexport function cartUpdateQuantitiesSuccess(quantities: CartItemQuantity[]): CartUpdateQuantitiesAction {\n    return {\n        type: CART_UPDATE_QUANTITIES,\n        quantities,\n    };\n}\n\nexport function cartAddItem(\n    product: IProduct,\n    options: ICartItemOption[] = [],\n    quantity = 1,\n): CartThunkAction<Promise<void>> {\n    // sending request to server, timeout is used as a stub\n    return (dispatch) => (\n        new Promise((resolve) => {\n            setTimeout(() => {\n                dispatch(cartAddItemSuccess(product, options, quantity));\n                resolve();\n            }, 250);\n        })\n    );\n}\n\nexport function cartRemoveItem(itemId: number): CartThunkAction<Promise<void>> {\n    // sending request to server, timeout is used as a stub\n    return (dispatch) => (\n        new Promise((resolve) => {\n            setTimeout(() => {\n                dispatch(cartRemoveItemSuccess(itemId));\n                resolve();\n            }, 250);\n        })\n    );\n}\n\nexport function cartUpdateQuantities(quantities: CartItemQuantity[]): CartThunkAction<Promise<void>> {\n    // sending request to server, timeout is used as a stub\n    return (dispatch) => (\n        new Promise((resolve) => {\n            setTimeout(() => {\n                dispatch(cartUpdateQuantitiesSuccess(quantities));\n                resolve();\n            }, 250);\n        })\n    );\n}\n"]},"metadata":{},"sourceType":"module"}