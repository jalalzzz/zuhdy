{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Shbaita Studio\\\\Documents\\\\project\\\\new1\\\\themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template\\\\Sources\\\\src\\\\components\\\\shared\\\\CompatibilityStatusBadge.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n// react\nimport React, { useMemo } from 'react'; // third-party\n\nimport { useIntl } from 'react-intl'; // application\n\nimport StatusBadge from '~/components/shared/StatusBadge';\nimport { useCurrentVehicle } from '~/services/current-vehicle';\n\nfunction CompatibilityStatusBadge(props) {\n  _s();\n\n  var product = props.product,\n      className = props.className;\n  var intl = useIntl();\n\n  var _useCurrentVehicle = useCurrentVehicle(),\n      _useCurrentVehicle2 = _slicedToArray(_useCurrentVehicle, 1),\n      currentVehicle = _useCurrentVehicle2[0];\n\n  var compatibility = useMemo(function () {\n    if (!currentVehicle) {\n      return null;\n    }\n\n    if (product.compatibility === 'all') {\n      return 'all';\n    }\n\n    if (product.compatibility === 'unknown') {\n      return 'unknown';\n    }\n\n    if (product.compatibility.includes(currentVehicle.id)) {\n      return 'fit';\n    }\n\n    return 'not-fit';\n  }, [product, currentVehicle]);\n\n  if (!compatibility || !currentVehicle) {\n    return null;\n  }\n\n  var compatibilityToTypeMap = {\n    all: 'unknown',\n    fit: 'success',\n    'not-fit': 'failure',\n    unknown: 'warning'\n  };\n  var compatibilityToIconMap = {\n    all: 'success',\n    fit: 'success',\n    'not-fit': 'failure',\n    unknown: 'failure'\n  };\n  var compatibilityToTextMap = {\n    all: intl.formatMessage({\n      id: 'TEXT_COMPATIBILITY_ALL'\n    }, currentVehicle),\n    fit: intl.formatMessage({\n      id: 'TEXT_COMPATIBILITY_FIT'\n    }, currentVehicle),\n    'not-fit': intl.formatMessage({\n      id: 'TEXT_COMPATIBILITY_NOT_FIT'\n    }, currentVehicle),\n    unknown: intl.formatMessage({\n      id: 'TEXT_COMPATIBILITY_UNKNOWN'\n    }, currentVehicle)\n  };\n  return __jsx(StatusBadge, {\n    type: compatibilityToTypeMap[compatibility],\n    icon: compatibilityToIconMap[compatibility],\n    text: compatibilityToTextMap[compatibility],\n    tooltip: compatibilityToTextMap[compatibility],\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  });\n}\n\n_s(CompatibilityStatusBadge, \"zHQ9XPpJz2pPJ9NN9Zu+0GJeG7k=\", false, function () {\n  return [useIntl, useCurrentVehicle];\n});\n\n_c = CompatibilityStatusBadge;\nexport default CompatibilityStatusBadge;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompatibilityStatusBadge\");","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/components/shared/CompatibilityStatusBadge.tsx"],"names":["React","useMemo","useIntl","StatusBadge","useCurrentVehicle","CompatibilityStatusBadge","props","product","className","intl","currentVehicle","compatibility","includes","id","compatibilityToTypeMap","all","fit","unknown","compatibilityToIconMap","compatibilityToTextMap","formatMessage"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B,C,CACA;;AACA,SAASC,OAAT,QAAwB,YAAxB,C,CACA;;AACA,OAAOC,WAAP,MAAgE,iCAAhE;AAGA,SAASC,iBAAT,QAAkC,4BAAlC;;AAMA,SAASC,wBAAT,CAAkCC,KAAlC,EAAgD;AAAA;;AAAA,MAExCC,OAFwC,GAIxCD,KAJwC,CAExCC,OAFwC;AAAA,MAGxCC,SAHwC,GAIxCF,KAJwC,CAGxCE,SAHwC;AAK5C,MAAMC,IAAI,GAAGP,OAAO,EAApB;;AAL4C,2BAM0BE,iBAAiB,EAN3C;AAAA;AAAA,MAMrCM,cANqC;;AAQ5C,MAAMC,aAAiD,GAAGV,OAAO,CAAC,YAAM;AACpE,QAAI,CAACS,cAAL,EAAqB;AACjB,aAAO,IAAP;AACH;;AACD,QAAIH,OAAO,CAACI,aAAR,KAA0B,KAA9B,EAAqC;AACjC,aAAO,KAAP;AACH;;AACD,QAAIJ,OAAO,CAACI,aAAR,KAA0B,SAA9B,EAAyC;AACrC,aAAO,SAAP;AACH;;AACD,QAAIJ,OAAO,CAACI,aAAR,CAAsBC,QAAtB,CAA+BF,cAAc,CAACG,EAA9C,CAAJ,EAAuD;AACnD,aAAO,KAAP;AACH;;AAED,WAAO,SAAP;AACH,GAfgE,EAe9D,CAACN,OAAD,EAAUG,cAAV,CAf8D,CAAjE;;AAiBA,MAAI,CAACC,aAAD,IAAkB,CAACD,cAAvB,EAAuC;AACnC,WAAO,IAAP;AACH;;AAED,MAAMI,sBAA6E,GAAG;AAClFC,IAAAA,GAAG,EAAE,SAD6E;AAElFC,IAAAA,GAAG,EAAE,SAF6E;AAGlF,eAAW,SAHuE;AAIlFC,IAAAA,OAAO,EAAE;AAJyE,GAAtF;AAMA,MAAMC,sBAA6E,GAAG;AAClFH,IAAAA,GAAG,EAAE,SAD6E;AAElFC,IAAAA,GAAG,EAAE,SAF6E;AAGlF,eAAW,SAHuE;AAIlFC,IAAAA,OAAO,EAAE;AAJyE,GAAtF;AAMA,MAAME,sBAAmE,GAAG;AACxEJ,IAAAA,GAAG,EAAEN,IAAI,CAACW,aAAL,CAAmB;AAAEP,MAAAA,EAAE,EAAE;AAAN,KAAnB,EAAqDH,cAArD,CADmE;AAExEM,IAAAA,GAAG,EAAEP,IAAI,CAACW,aAAL,CAAmB;AAAEP,MAAAA,EAAE,EAAE;AAAN,KAAnB,EAAqDH,cAArD,CAFmE;AAGxE,eAAWD,IAAI,CAACW,aAAL,CAAmB;AAAEP,MAAAA,EAAE,EAAE;AAAN,KAAnB,EAAyDH,cAAzD,CAH6D;AAIxEO,IAAAA,OAAO,EAAER,IAAI,CAACW,aAAL,CAAmB;AAAEP,MAAAA,EAAE,EAAE;AAAN,KAAnB,EAAyDH,cAAzD;AAJ+D,GAA5E;AAOA,SACI,MAAC,WAAD;AACI,IAAA,IAAI,EAAEI,sBAAsB,CAACH,aAAD,CADhC;AAEI,IAAA,IAAI,EAAEO,sBAAsB,CAACP,aAAD,CAFhC;AAGI,IAAA,IAAI,EAAEQ,sBAAsB,CAACR,aAAD,CAHhC;AAII,IAAA,OAAO,EAAEQ,sBAAsB,CAACR,aAAD,CAJnC;AAKI,IAAA,SAAS,EAAEH,SALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AASH;;GAzDQH,wB;UAKQH,O,EACyDE,iB;;;KANjEC,wB;AA2DT,eAAeA,wBAAf","sourcesContent":["// react\nimport React, { useMemo } from 'react';\n// third-party\nimport { useIntl } from 'react-intl';\n// application\nimport StatusBadge, { IStatusBadgeIcon, IStatusBadgeType } from '~/components/shared/StatusBadge';\nimport { IProduct, IProductCompatibilityResult } from '~/interfaces/product';\nimport { IVehicle } from '~/interfaces/vehicle';\nimport { useCurrentVehicle } from '~/services/current-vehicle';\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    product: IProduct;\n}\n\nfunction CompatibilityStatusBadge(props: Props) {\n    const {\n        product,\n        className,\n    } = props;\n    const intl = useIntl();\n    const [currentVehicle]: readonly [Enumerable<IVehicle> | null, any] = useCurrentVehicle();\n\n    const compatibility: IProductCompatibilityResult | null = useMemo(() => {\n        if (!currentVehicle) {\n            return null;\n        }\n        if (product.compatibility === 'all') {\n            return 'all';\n        }\n        if (product.compatibility === 'unknown') {\n            return 'unknown';\n        }\n        if (product.compatibility.includes(currentVehicle.id)) {\n            return 'fit';\n        }\n\n        return 'not-fit';\n    }, [product, currentVehicle]);\n\n    if (!compatibility || !currentVehicle) {\n        return null;\n    }\n\n    const compatibilityToTypeMap: Record<IProductCompatibilityResult, IStatusBadgeType> = {\n        all: 'unknown',\n        fit: 'success',\n        'not-fit': 'failure',\n        unknown: 'warning',\n    };\n    const compatibilityToIconMap: Record<IProductCompatibilityResult, IStatusBadgeIcon> = {\n        all: 'success',\n        fit: 'success',\n        'not-fit': 'failure',\n        unknown: 'failure',\n    };\n    const compatibilityToTextMap: Record<IProductCompatibilityResult, string> = {\n        all: intl.formatMessage({ id: 'TEXT_COMPATIBILITY_ALL' }, currentVehicle),\n        fit: intl.formatMessage({ id: 'TEXT_COMPATIBILITY_FIT' }, currentVehicle),\n        'not-fit': intl.formatMessage({ id: 'TEXT_COMPATIBILITY_NOT_FIT' }, currentVehicle),\n        unknown: intl.formatMessage({ id: 'TEXT_COMPATIBILITY_UNKNOWN' }, currentVehicle),\n    };\n\n    return (\n        <StatusBadge\n            type={compatibilityToTypeMap[compatibility]}\n            icon={compatibilityToIconMap[compatibility]}\n            text={compatibilityToTextMap[compatibility]}\n            tooltip={compatibilityToTextMap[compatibility]}\n            className={className}\n        />\n    );\n}\n\nexport default CompatibilityStatusBadge;\n"]},"metadata":{},"sourceType":"module"}