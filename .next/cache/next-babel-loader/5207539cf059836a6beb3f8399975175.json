{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\n// react\nimport { useMemo, useState } from 'react'; // third-party\n\nimport { useForm } from 'react-hook-form'; // application\n\nimport { useAsyncAction } from '~/store/hooks';\nimport { useUserSignIn } from '~/store/user/userHooks';\nexport function useSignInForm() {\n  _s();\n\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var signIn = useUserSignIn();\n  var onSuccess = options.onSuccess;\n\n  var _useState = useState(null),\n      serverError = _useState[0],\n      setServerError = _useState[1];\n\n  var methods = useForm({\n    defaultValues: {\n      email: 'red-parts@example.com',\n      password: '123456',\n      remember: false\n    }\n  });\n  var handleSubmit = methods.handleSubmit;\n\n  var _useAsyncAction = useAsyncAction(function (data) {\n    setServerError(null);\n    return signIn(data.email, data.password).then(function () {\n      if (onSuccess) {\n        onSuccess();\n      }\n    }, function (error) {\n      setServerError(\"ERROR_API_\".concat(error.message));\n    });\n  }, [signIn, setServerError, onSuccess]),\n      _useAsyncAction2 = _slicedToArray(_useAsyncAction, 2),\n      submit = _useAsyncAction2[0],\n      submitInProgress = _useAsyncAction2[1];\n\n  return {\n    submit: useMemo(function () {\n      return handleSubmit(submit);\n    }, [handleSubmit, submit]),\n    submitInProgress: submitInProgress || methods.formState.isSubmitting,\n    serverError: serverError,\n    errors: methods.errors,\n    register: methods.register,\n    watch: methods.watch\n  };\n}\n\n_s(useSignInForm, \"DZoVwY8NfiMhHQtzgA0PRLbd/M8=\", false, function () {\n  return [useUserSignIn, useForm, useAsyncAction];\n});","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/services/forms/sign-in.ts"],"names":["useMemo","useState","useForm","useAsyncAction","useUserSignIn","useSignInForm","options","signIn","onSuccess","serverError","setServerError","methods","defaultValues","email","password","remember","handleSubmit","data","then","error","message","submit","submitInProgress","formState","isSubmitting","errors","register","watch"],"mappings":";;;;AAAA;AACA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC,C,CACA;;AACA,SAASC,OAAT,QAAwB,iBAAxB,C,CACA;;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAYA,OAAO,SAASC,aAAT,GAAyD;AAAA;;AAAA,MAAlCC,OAAkC,uEAAJ,EAAI;AAC5D,MAAMC,MAAM,GAAGH,aAAa,EAA5B;AAD4D,MAEpDI,SAFoD,GAEtCF,OAFsC,CAEpDE,SAFoD;;AAAA,kBAGtBP,QAAQ,CAAgB,IAAhB,CAHc;AAAA,MAGrDQ,WAHqD;AAAA,MAGxCC,cAHwC;;AAI5D,MAAMC,OAAO,GAAGT,OAAO,CAAc;AACjCU,IAAAA,aAAa,EAAE;AACXC,MAAAA,KAAK,EAAE,uBADI;AAEXC,MAAAA,QAAQ,EAAE,QAFC;AAGXC,MAAAA,QAAQ,EAAE;AAHC;AADkB,GAAd,CAAvB;AAJ4D,MAWpDC,YAXoD,GAWnCL,OAXmC,CAWpDK,YAXoD;;AAAA,wBAYzBb,cAAc,CAAC,UAACc,IAAD,EAAuB;AACrEP,IAAAA,cAAc,CAAC,IAAD,CAAd;AAEA,WAAOH,MAAM,CAACU,IAAI,CAACJ,KAAN,EAAaI,IAAI,CAACH,QAAlB,CAAN,CAAkCI,IAAlC,CACH,YAAM;AACF,UAAIV,SAAJ,EAAe;AACXA,QAAAA,SAAS;AACZ;AACJ,KALE,EAMH,UAACW,KAAD,EAAkB;AACdT,MAAAA,cAAc,qBAAcS,KAAK,CAACC,OAApB,EAAd;AACH,KARE,CAAP;AAUH,GAbgD,EAa9C,CAACb,MAAD,EAASG,cAAT,EAAyBF,SAAzB,CAb8C,CAZW;AAAA;AAAA,MAYrDa,MAZqD;AAAA,MAY7CC,gBAZ6C;;AA2B5D,SAAO;AACHD,IAAAA,MAAM,EAAErB,OAAO,CAAC;AAAA,aAAMgB,YAAY,CAACK,MAAD,CAAlB;AAAA,KAAD,EAA6B,CAACL,YAAD,EAAeK,MAAf,CAA7B,CADZ;AAEHC,IAAAA,gBAAgB,EAAEA,gBAAgB,IAAIX,OAAO,CAACY,SAAR,CAAkBC,YAFrD;AAGHf,IAAAA,WAAW,EAAXA,WAHG;AAIHgB,IAAAA,MAAM,EAAEd,OAAO,CAACc,MAJb;AAKHC,IAAAA,QAAQ,EAAEf,OAAO,CAACe,QALf;AAMHC,IAAAA,KAAK,EAAEhB,OAAO,CAACgB;AANZ,GAAP;AAQH;;GAnCetB,a;UACGD,a,EAGCF,O,EAQmBC,c","sourcesContent":["// react\nimport { useMemo, useState } from 'react';\n// third-party\nimport { useForm } from 'react-hook-form';\n// application\nimport { useAsyncAction } from '~/store/hooks';\nimport { useUserSignIn } from '~/store/user/userHooks';\n\ninterface ISignInFormOptions {\n    onSuccess?: () => void;\n}\n\nexport interface ISignInForm {\n    email: string;\n    password: string;\n    remember: boolean;\n}\n\nexport function useSignInForm(options: ISignInFormOptions = {}) {\n    const signIn = useUserSignIn();\n    const { onSuccess } = options;\n    const [serverError, setServerError] = useState<string | null>(null);\n    const methods = useForm<ISignInForm>({\n        defaultValues: {\n            email: 'red-parts@example.com',\n            password: '123456',\n            remember: false,\n        },\n    });\n    const { handleSubmit } = methods;\n    const [submit, submitInProgress] = useAsyncAction((data: ISignInForm) => {\n        setServerError(null);\n\n        return signIn(data.email, data.password).then(\n            () => {\n                if (onSuccess) {\n                    onSuccess();\n                }\n            },\n            (error: Error) => {\n                setServerError(`ERROR_API_${error.message}`);\n            },\n        );\n    }, [signIn, setServerError, onSuccess]);\n\n    return {\n        submit: useMemo(() => handleSubmit(submit), [handleSubmit, submit]),\n        submitInProgress: submitInProgress || methods.formState.isSubmitting,\n        serverError,\n        errors: methods.errors,\n        register: methods.register,\n        watch: methods.watch,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}