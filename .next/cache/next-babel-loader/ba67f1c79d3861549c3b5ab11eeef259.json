{"ast":null,"code":"// application\nimport { isArrayOfNumbers, isArrayOfStrings } from '~/services/utils';\n\nfunction isRangeFilterValue(value) {\n  if (!Array.isArray(value) || value.length !== 2) {\n    return false;\n  }\n\n  return !(typeof value[0] !== 'number' || typeof value[1] !== 'number');\n}\n\nfunction isCheckFilterValue(value) {\n  return isArrayOfStrings(value);\n}\n\nfunction isRadioFilterValue(value) {\n  return value === null || typeof value === 'string';\n}\n\nfunction isColorFilterValue(value) {\n  return isArrayOfStrings(value);\n}\n\nfunction isRatingFilterValue(value) {\n  return isArrayOfNumbers(value);\n}\n\nconst CheckFilterHandler = {\n  serialize: value => {\n    if (!isCheckFilterValue(value)) {\n      throw Error('Provide a valid \"check\" filter value!');\n    }\n\n    return value.join(',');\n  },\n  deserialize: value => value ? value.split(',') : [],\n  isDefaultValue: (filter, value) => {\n    if (!isCheckFilterValue(value)) {\n      throw Error('Provide a valid \"check\" filter value!');\n    }\n\n    return value.length === 0;\n  },\n  getDefaultValue: () => [],\n  getActiveFilters: filter => {\n    if (filter.type !== 'check') {\n      throw Error('Provide a \"check\" filter!');\n    }\n\n    if (CheckFilterHandler.isDefaultValue(filter, filter.value)) {\n      return [];\n    }\n\n    return filter.items.filter(x => filter.value.includes(x.slug)).map(item => ({\n      id: `${filter.slug}/${item.slug}`,\n      type: filter.type,\n      original: filter,\n      item\n    }));\n  },\n\n  getResetValue(activeFilters) {\n    const itemSlugs = activeFilters.map(x => x.item.slug);\n    return CheckFilterHandler.serialize(activeFilters[0].original.value.filter(x => !itemSlugs.includes(x)));\n  }\n\n};\nconst ColorFilterHandler = {\n  serialize: value => {\n    if (!isColorFilterValue(value)) {\n      throw Error('Provide a valid \"color\" filter value!');\n    }\n\n    return value.join(',');\n  },\n  deserialize: value => value ? value.split(',') : [],\n  isDefaultValue: (filter, value) => {\n    if (!isColorFilterValue(value)) {\n      throw Error('Provide a valid \"check\" filter value!');\n    }\n\n    return value.length === 0;\n  },\n  getDefaultValue: () => [],\n  getActiveFilters: filter => {\n    if (filter.type !== 'color') {\n      throw Error('Provide a \"color\" filter!');\n    }\n\n    if (ColorFilterHandler.isDefaultValue(filter, filter.value)) {\n      return [];\n    }\n\n    return filter.items.filter(x => filter.value.includes(x.slug)).map(item => ({\n      id: `${filter.slug}/${item.slug}`,\n      type: filter.type,\n      original: filter,\n      item\n    }));\n  },\n  getResetValue: activeFilters => {\n    const itemSlugs = activeFilters.map(x => x.item.slug);\n    return ColorFilterHandler.serialize(activeFilters[0].original.value.filter(x => !itemSlugs.includes(x)));\n  }\n};\nconst RadioFilterHandler = {\n  serialize: value => {\n    if (!isRadioFilterValue(value)) {\n      throw Error('Provide a valid \"radio\" filter value!');\n    }\n\n    return value === null ? '' : value;\n  },\n  deserialize: value => value,\n  isDefaultValue: (filter, value) => {\n    if (!isRadioFilterValue(value)) {\n      throw Error('Provide a valid \"radio\" filter value!');\n    }\n\n    return RadioFilterHandler.getDefaultValue(filter) === value;\n  },\n  getDefaultValue: filter => {\n    if (filter.type !== 'radio') {\n      throw Error('Provide a \"radio\" filter!');\n    }\n\n    return filter.items[0].slug;\n  },\n  getActiveFilters: filter => {\n    if (filter.type !== 'radio') {\n      throw Error('Provide a \"radio\" filter!');\n    }\n\n    if (RadioFilterHandler.isDefaultValue(filter, filter.value)) {\n      return [];\n    }\n\n    return [{\n      id: filter.slug,\n      type: filter.type,\n      original: filter,\n      item: filter.items.find(x => x.slug === filter.value)\n    }];\n  },\n  getResetValue: activeFilters => activeFilters[0].original.items[0].slug\n};\nconst RangeFilterHandler = {\n  serialize: value => {\n    if (!isRangeFilterValue(value)) {\n      throw Error('Provide a valid \"range\" filter value!');\n    }\n\n    return value.join('-');\n  },\n  deserialize: value => value ? value.split('-').map(parseFloat) : undefined,\n  isDefaultValue: (filter, value) => {\n    if (filter.type !== 'range') {\n      throw Error('Provide a \"range\" filter!');\n    }\n\n    if (!isRangeFilterValue(value)) {\n      throw Error('Provide a valid \"range\" filter value!');\n    }\n\n    return filter.min === value[0] && filter.max === value[1];\n  },\n  getDefaultValue: filter => {\n    if (filter.type !== 'range') {\n      throw Error('Provide a \"range\" filter!');\n    }\n\n    return [filter.min, filter.max];\n  },\n  getActiveFilters: filter => {\n    if (filter.type !== 'range') {\n      throw Error('Provide a \"range\" filter!');\n    }\n\n    if (RangeFilterHandler.isDefaultValue(filter, filter.value)) {\n      return [];\n    }\n\n    return [{\n      id: filter.slug,\n      type: filter.type,\n      original: filter\n    }];\n  },\n  getResetValue: activeFilters => RangeFilterHandler.serialize([activeFilters[0].original.min, activeFilters[0].original.max])\n};\nconst RatingFilterHandler = {\n  serialize: value => {\n    if (!isRatingFilterValue(value)) {\n      throw Error('Provide a valid \"check\" filter value!');\n    }\n\n    return value.join(',');\n  },\n  deserialize: value => value ? value.split(',').map(parseFloat) : [],\n  isDefaultValue: (filter, value) => {\n    if (!isRatingFilterValue(value)) {\n      throw Error('Provide a valid \"check\" filter value!');\n    }\n\n    return value.length === 0;\n  },\n  getDefaultValue: () => [],\n  getActiveFilters: filter => {\n    if (filter.type !== 'rating') {\n      throw Error('Provide a \"rating\" filter!');\n    }\n\n    if (RatingFilterHandler.isDefaultValue(filter, filter.value)) {\n      return [];\n    }\n\n    return filter.items.filter(x => filter.value.includes(x.rating)).map(item => ({\n      id: `${filter.slug}/${item.rating}`,\n      type: 'rating',\n      original: filter,\n      item\n    }));\n  },\n  getResetValue: activeFilters => {\n    const itemSlugs = activeFilters.map(x => x.item.rating);\n    return RatingFilterHandler.serialize(activeFilters[0].original.value.filter(x => !itemSlugs.includes(x)));\n  }\n};\nconst VehicleFilterHandler = {\n  serialize: value => value === null ? '' : value.toString(),\n  deserialize: value => value === '' ? null : parseFloat(value),\n  isDefaultValue: (filter, value) => value === null,\n  getDefaultValue: () => null,\n  getActiveFilters: filter => {\n    if (filter.type !== 'vehicle') {\n      throw Error('Provide a \"vehicle\" filter!');\n    }\n\n    return filter.value ? [{\n      id: filter.slug,\n      type: 'vehicle',\n      original: filter\n    }] : [];\n  },\n  getResetValue: () => null\n};\n\nfunction getFilterHandler(filter) {\n  switch (filter.type) {\n    case 'check':\n      return CheckFilterHandler;\n\n    case 'color':\n      return ColorFilterHandler;\n\n    case 'radio':\n      return RadioFilterHandler;\n\n    case 'range':\n      return RangeFilterHandler;\n\n    case 'rating':\n      return RatingFilterHandler;\n\n    case 'vehicle':\n      return VehicleFilterHandler;\n\n    default:\n      return null;\n  }\n}\n\nfunction getExistsFilterHandler(filter) {\n  const handler = getFilterHandler(filter);\n\n  if (!handler) {\n    throw Error('Unhandled filter type!');\n  }\n\n  return handler;\n}\n\nexport function hasHandler(filter) {\n  return getFilterHandler(filter) !== null;\n}\nexport function isDefaultFilterValue(filter, value) {\n  return getExistsFilterHandler(filter).isDefaultValue(filter, value);\n}\nexport function getFilterDefaultValue(filter) {\n  return getExistsFilterHandler(filter).getDefaultValue(filter);\n}\nexport function serializeFilterValue(filter, value) {\n  return getExistsFilterHandler(filter).serialize(value);\n}\nexport function deserializeFilterValue(filter, value) {\n  return getExistsFilterHandler(filter).deserialize(value);\n}\nexport function getFilterValue(filter, currentSerializedValue) {\n  return deserializeFilterValue(filter, currentSerializedValue) || getFilterDefaultValue(filter);\n}\nexport function getActiveFilters(filter) {\n  return getExistsFilterHandler(filter).getActiveFilters(filter);\n}\nexport function getResetValue(activeFilters) {\n  return getExistsFilterHandler(activeFilters[0].original).getResetValue(activeFilters);\n}","map":{"version":3,"sources":["C:/Users/Shbaita Studio/Documents/project/new1/themeforest-irsnufCS-redparts-auto-parts-react-ecommerce-template/Sources/src/services/filters.ts"],"names":["isArrayOfNumbers","isArrayOfStrings","isRangeFilterValue","value","Array","isArray","length","isCheckFilterValue","isRadioFilterValue","isColorFilterValue","isRatingFilterValue","CheckFilterHandler","serialize","Error","join","deserialize","split","isDefaultValue","filter","getDefaultValue","getActiveFilters","type","items","x","includes","slug","map","item","id","original","getResetValue","activeFilters","itemSlugs","ColorFilterHandler","RadioFilterHandler","find","RangeFilterHandler","parseFloat","undefined","min","max","RatingFilterHandler","rating","VehicleFilterHandler","toString","getFilterHandler","getExistsFilterHandler","handler","hasHandler","isDefaultFilterValue","getFilterDefaultValue","serializeFilterValue","deserializeFilterValue","getFilterValue","currentSerializedValue"],"mappings":"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","sourcesContent":["// application\nimport {\n    IActiveFilter,\n    ICheckFilterValue,\n    IColorFilterValue,\n    IFilter,\n    IRadioFilterValue,\n    IRangeFilterValue,\n} from '~/interfaces/filter';\nimport { isArrayOfNumbers, isArrayOfStrings } from '~/services/utils';\n\ninterface IFilterHandler<T extends IFilter = IFilter, V = any, A = any> {\n    serialize: (value: V) => string;\n    deserialize: (value: string) => V;\n    isDefaultValue: (filter: T, value: V) => boolean;\n    getDefaultValue: (filter: T) => V;\n    getActiveFilters: (filter: T) => A[];\n    getResetValue: (activeFilters: A[]) => string | null;\n}\n\nfunction isRangeFilterValue(value: any): value is IRangeFilterValue {\n    if (!Array.isArray(value) || value.length !== 2) {\n        return false;\n    }\n\n    return !(typeof value[0] !== 'number' || typeof value[1] !== 'number');\n}\nfunction isCheckFilterValue(value: any): value is ICheckFilterValue {\n    return isArrayOfStrings(value);\n}\nfunction isRadioFilterValue(value: any): value is IRadioFilterValue {\n    return value === null || typeof value === 'string';\n}\nfunction isColorFilterValue(value: any): value is IColorFilterValue {\n    return isArrayOfStrings(value);\n}\nfunction isRatingFilterValue(value: any): value is IColorFilterValue {\n    return isArrayOfNumbers(value);\n}\n\nconst CheckFilterHandler: IFilterHandler = {\n    serialize: (value) => {\n        if (!isCheckFilterValue(value)) {\n            throw Error('Provide a valid \"check\" filter value!');\n        }\n\n        return value.join(',');\n    },\n    deserialize: (value) => (\n        value ? value.split(',') : []\n    ),\n    isDefaultValue: (filter, value) => {\n        if (!isCheckFilterValue(value)) {\n            throw Error('Provide a valid \"check\" filter value!');\n        }\n\n        return value.length === 0;\n    },\n    getDefaultValue: () => [],\n    getActiveFilters: (filter) => {\n        if (filter.type !== 'check') {\n            throw Error('Provide a \"check\" filter!');\n        }\n\n        if (CheckFilterHandler.isDefaultValue(filter, filter.value)) {\n            return [];\n        }\n\n        return filter.items.filter((x) => filter.value.includes(x.slug)).map((item) => ({\n            id: `${filter.slug}/${item.slug}`,\n            type: filter.type,\n            original: filter,\n            item,\n        }));\n    },\n    getResetValue(activeFilters) {\n        const itemSlugs = activeFilters.map((x) => x.item.slug);\n\n        return CheckFilterHandler.serialize(activeFilters[0].original.value\n            .filter((x: any) => !itemSlugs.includes(x)));\n    },\n};\n\nconst ColorFilterHandler: IFilterHandler = {\n    serialize: (value) => {\n        if (!isColorFilterValue(value)) {\n            throw Error('Provide a valid \"color\" filter value!');\n        }\n\n        return value.join(',');\n    },\n    deserialize: (value: string) => (\n        value ? value.split(',') : []\n    ),\n    isDefaultValue: (filter, value) => {\n        if (!isColorFilterValue(value)) {\n            throw Error('Provide a valid \"check\" filter value!');\n        }\n\n        return value.length === 0;\n    },\n    getDefaultValue: () => [],\n    getActiveFilters: (filter) => {\n        if (filter.type !== 'color') {\n            throw Error('Provide a \"color\" filter!');\n        }\n\n        if (ColorFilterHandler.isDefaultValue(filter, filter.value)) {\n            return [];\n        }\n\n        return filter.items.filter((x) => filter.value.includes(x.slug)).map((item) => ({\n            id: `${filter.slug}/${item.slug}`,\n            type: filter.type,\n            original: filter,\n            item,\n        }));\n    },\n    getResetValue: (activeFilters) => {\n        const itemSlugs = activeFilters.map((x) => x.item.slug);\n\n        return ColorFilterHandler.serialize(activeFilters[0].original.value\n            .filter((x: any) => !itemSlugs.includes(x)));\n    },\n};\n\nconst RadioFilterHandler: IFilterHandler = {\n    serialize: (value) => {\n        if (!isRadioFilterValue(value)) {\n            throw Error('Provide a valid \"radio\" filter value!');\n        }\n\n        return value === null ? '' : value;\n    },\n    deserialize: (value: string) => value,\n    isDefaultValue: (filter, value) => {\n        if (!isRadioFilterValue(value)) {\n            throw Error('Provide a valid \"radio\" filter value!');\n        }\n\n        return RadioFilterHandler.getDefaultValue(filter) === value;\n    },\n    getDefaultValue: (filter) => {\n        if (filter.type !== 'radio') {\n            throw Error('Provide a \"radio\" filter!');\n        }\n\n        return filter.items[0].slug;\n    },\n    getActiveFilters: (filter) => {\n        if (filter.type !== 'radio') {\n            throw Error('Provide a \"radio\" filter!');\n        }\n\n        if (RadioFilterHandler.isDefaultValue(filter, filter.value)) {\n            return [];\n        }\n\n        return [{\n            id: filter.slug,\n            type: filter.type,\n            original: filter,\n            item: filter.items.find((x) => x.slug === filter.value),\n        }];\n    },\n    getResetValue: (activeFilters) => (\n        activeFilters[0].original.items[0].slug\n    ),\n};\n\nconst RangeFilterHandler: IFilterHandler = {\n    serialize: (value) => {\n        if (!isRangeFilterValue(value)) {\n            throw Error('Provide a valid \"range\" filter value!');\n        }\n\n        return value.join('-');\n    },\n    deserialize: (value: string) => (\n        value ? value.split('-').map(parseFloat) : undefined\n    ),\n    isDefaultValue: (filter, value) => {\n        if (filter.type !== 'range') {\n            throw Error('Provide a \"range\" filter!');\n        }\n        if (!isRangeFilterValue(value)) {\n            throw Error('Provide a valid \"range\" filter value!');\n        }\n\n        return filter.min === value[0] && filter.max === value[1];\n    },\n    getDefaultValue: (filter) => {\n        if (filter.type !== 'range') {\n            throw Error('Provide a \"range\" filter!');\n        }\n\n        return [filter.min, filter.max];\n    },\n    getActiveFilters: (filter) => {\n        if (filter.type !== 'range') {\n            throw Error('Provide a \"range\" filter!');\n        }\n\n        if (RangeFilterHandler.isDefaultValue(filter, filter.value)) {\n            return [];\n        }\n\n        return [{\n            id: filter.slug,\n            type: filter.type,\n            original: filter,\n        }];\n    },\n    getResetValue: (activeFilters) => (\n        RangeFilterHandler.serialize([activeFilters[0].original.min, activeFilters[0].original.max])\n    ),\n};\n\nconst RatingFilterHandler: IFilterHandler = {\n    serialize: (value) => {\n        if (!isRatingFilterValue(value)) {\n            throw Error('Provide a valid \"check\" filter value!');\n        }\n\n        return value.join(',');\n    },\n    deserialize: (value) => (\n        value ? value.split(',').map(parseFloat) : []\n    ),\n    isDefaultValue: (filter, value) => {\n        if (!isRatingFilterValue(value)) {\n            throw Error('Provide a valid \"check\" filter value!');\n        }\n\n        return value.length === 0;\n    },\n    getDefaultValue: () => [],\n    getActiveFilters: (filter) => {\n        if (filter.type !== 'rating') {\n            throw Error('Provide a \"rating\" filter!');\n        }\n\n        if (RatingFilterHandler.isDefaultValue(filter, filter.value)) {\n            return [];\n        }\n\n        return filter.items.filter((x) => filter.value.includes(x.rating)).map((item) => ({\n            id: `${filter.slug}/${item.rating}`,\n            type: 'rating',\n            original: filter,\n            item,\n        }));\n    },\n    getResetValue: (activeFilters) => {\n        const itemSlugs = activeFilters.map((x) => x.item.rating);\n\n        return RatingFilterHandler.serialize(activeFilters[0].original.value\n            .filter((x: any) => !itemSlugs.includes(x)));\n    },\n};\n\nconst VehicleFilterHandler: IFilterHandler = {\n    serialize: (value) => (\n        value === null ? '' : value.toString()\n    ),\n    deserialize: (value) => (\n        value === '' ? null : parseFloat(value)\n    ),\n    isDefaultValue: (filter, value) => value === null,\n    getDefaultValue: () => null,\n    getActiveFilters: (filter) => {\n        if (filter.type !== 'vehicle') {\n            throw Error('Provide a \"vehicle\" filter!');\n        }\n\n        return filter.value ? [{ id: filter.slug, type: 'vehicle', original: filter }] : [];\n    },\n    getResetValue: () => null,\n};\n\nfunction getFilterHandler<T extends IFilter>(filter: T): IFilterHandler<T, T['value']> | null {\n    switch (filter.type) {\n    case 'check': return CheckFilterHandler;\n    case 'color': return ColorFilterHandler;\n    case 'radio': return RadioFilterHandler;\n    case 'range': return RangeFilterHandler;\n    case 'rating': return RatingFilterHandler;\n    case 'vehicle': return VehicleFilterHandler;\n    default:\n        return null;\n    }\n}\n\nfunction getExistsFilterHandler<T extends IFilter>(filter: T): IFilterHandler<T, T['value']> {\n    const handler = getFilterHandler(filter);\n\n    if (!handler) {\n        throw Error('Unhandled filter type!');\n    }\n\n    return handler;\n}\n\nexport function hasHandler<T extends IFilter>(filter: T): boolean {\n    return getFilterHandler(filter) !== null;\n}\n\nexport function isDefaultFilterValue<T extends IFilter>(filter: T, value: T['value']): boolean {\n    return getExistsFilterHandler(filter).isDefaultValue(filter, value);\n}\n\nexport function getFilterDefaultValue<T extends IFilter>(filter: T): T['value'] {\n    return getExistsFilterHandler(filter).getDefaultValue(filter);\n}\n\nexport function serializeFilterValue<T extends IFilter>(filter: T, value: T['value']): string | null {\n    return getExistsFilterHandler(filter).serialize(value);\n}\n\nexport function deserializeFilterValue<T extends IFilter = IFilter>(filter: T, value: string): T['value'] {\n    return getExistsFilterHandler(filter).deserialize(value);\n}\n\nexport function getFilterValue<T extends IFilter = IFilter>(filter: T, currentSerializedValue: string): T['value'] {\n    return deserializeFilterValue(filter, currentSerializedValue) || getFilterDefaultValue(filter);\n}\n\nexport function getActiveFilters<T extends IFilter = IFilter>(filter: T): IActiveFilter[] {\n    return getExistsFilterHandler(filter).getActiveFilters(filter);\n}\n\nexport function getResetValue<T extends IFilter = IFilter>(activeFilters: IActiveFilter[]): string | null {\n    return getExistsFilterHandler(activeFilters[0].original).getResetValue(activeFilters);\n}\n"]},"metadata":{},"sourceType":"module"}